@{
	ViewBag.title = "Theme";
	Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid-filter.k-state-active {
			color: #ffffff;
			background-color: #1274AC;
		}

		.k-grid.k-widget {
			height: 360px;
		}

		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}
	</style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
	<div class="content-wrapper">
		<div class="container-xxl flex-grow-1 container-p-y">
			<div class="card-body" style="margin-top: -1%; min-height: 82%;">
				<div class="row" style="margin-top:-19px">
					<div class="col-sm-4" style="margin-bottom:5px;">
						<label for="" class="form-label">Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<select id="cmbreconname" class="form-select form-control" onchange="reconchangelist()">
						</select>
					</div>
					<div class="col-xs-12">
						<a href='' onclick='getSerializedRows()' data-bs-toggle='modal' id="btn_new">
							<i class="fa fa-plus cursor-pointer" aria-hidden="true" style="color:green;font-size:15px;"></i>
						</a>
						<div id="gd_theme">
							<div id="grid_theme"> </div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

</body>
</html>
<script>
	$(document).ready(function () {
		gridlist();
		$("#navhead").text("Theme");
		setlocalStorage("ls_pageList", "");

	});

	function gridlist() {
		var data = {};		
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = sessionStorage.getItem("usrname");
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbreconname").empty();
				$("#cmbreconname").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.active_status == "Y") {
						$("#cmbreconname").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					}
				});
				if (sessionStorage.getItem("reconcode") != null) {
					$("#cmbreconname").val(sessionStorage.getItem("reconcode"));
					jQuery('#cmbreconname').trigger("change");
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
		grid_theme_details([]);
	}
	function reconchangelist() {
		if ($("#cmbreconname").val() != '') {
			sessionStorage.setItem("reconcode", $("#cmbreconname").val());
			sessionStorage.setItem("reconname", $("#cmbreconname :selected").text());
			setcon();
		}
		var cmbreconname = $("#cmbreconname").val();
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Theme/Themelistfetch',
			dataType: 'json',
			data: JSON.stringify({ recon_code: cmbreconname }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var result = JSON.parse(response);
				if (result != null) {
					$("#gd_theme").empty();
					$("#gd_theme").append("<div id='grid_theme'></div>");
					grid_theme_details(result);
				}
				else {
					grid_theme_details([]);
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	var status_Priority = [];
	function grid_theme_details(data) {
		try {
			$.each(data, function (index, value) {
				var flag = false;
				$.each(status_Priority, function (sindex, svalue) {
					if (svalue == value.active_status_desc) {
						flag = true;
					}
				});
				if (flag == false) {
					status_Priority.push(value.active_status_desc);
				}
			});
			$("#grid_theme").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 15,
					schema: {
						model: {
							fields: {
								theme_gid: { type: "string" },
								theme_code: { type: "string" },
								theme_desc: { type: "string" },
								theme_order: { type: "number" },
								recon_code: { type: "string" },
								recon_name: { type: "string" },
								active_status: { type: "string" },
								hold_flag: { type: "string" },
								active_status_desc: { type: "string" }
							}
						}
					}
				},
				height: 420,
				groupable: false,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_theme').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					var screen_code = rolevalidatescreen('theme_setup')
					if (screen_code[0].add == "N") {
						$("#btn_new").hide();
					}
					if (screen_code[0].edit == "N") {
						$(".k-grid-edit").hide();
					}
					if (screen_code[0].view == "N") {
						$(".k-grid-view").hide();
					}
					if (screen_code[0].delete == "N") {
						$(".k-grid-delete").hide();
					}
				},
				pageable: {
					refresh: false,
					pageSizes: [10, 15, 20, 25, 50],
					buttonCount: 5
				},
				sortable: true,
				selectable: true,
				filterable: true,
				navigatable: true,
				resizable: true,
				change: selectRow,
				columns: [{
					command: [
						{
							name: "edit",
							id: "btn_Edit",
							template: "<a href='' onclick='getSerializedSelectedRows(this)' class='k-grid-edit'  value='edit' data-bs-toggle='modal'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
						},
						{
							name: "view",
							id: "View",
							template: "<a href=''onclick='getSerializedSelectedRows(this)' class='k-grid-view' value='view' data-bs-toggle='modal'><img src = '../Assets/images/viewicons.png'></a>&nbsp;&nbsp;&nbsp;",
						},
						{
							name: "Delete",
							id: "Delete",
							template: "<a href='' onclick='myDeleteJs()' data-bs-toggle='modal' class='k-grid-delete' ><img src = '../Assets/images/del.png'></a>&nbsp;&nbsp;&nbsp;",
						},
					], title: "Action&nbsp;", width: "30px",
				},
				{
					field: "theme_gid",
					title: "Row id",
					width: 50,
					hidden: true,
				},
				{
					field: "theme_order",
					title: "Theme Order",
					width: 40,
					attributes: { style: "text-align: right;" },
					filterable: {
						ui: "numericInput",
						extra: false,
					},
				},
				{
					field: "theme_code",
					title: "Theme Code",
					width: 40,
				},
				{
					field: "theme_desc",
					title: "Theme Description",
					width: 120,
				},
				{
					field: "recon_code",
					title: "Recon Code",
					width: 60,
					hidden: true,
				},
				{
					field: "recon_name",
					title: "Recon Name",
					width: 120,
					hidden: true,
				},
				{
					field: "theme_type_code",
					title: "Recon Name",
					width: 120,
					hidden: true,
				},
				{
					field: "theme_type_desc",
					title: "Theme Type",
					width: 40,
				},
				{
					field: "hold_flag_desc",
					title: "Hold Flag",
					width: 40,
					hidden: true,
				},
				{
					field: "active_status",
					title: "Status",
					width: 100,
					hidden: true
				},
				{
					field: "hold_flag",
					title: "hold_flag",
					width: 40,
					hidden: true,
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 40,
					resizable: false,
					filterable: {
						ui: priorityFilter,
						extra: false,
						operators: {
							string: {
								eq: "Is equal to",
								neq: "Not equal to"
							}
						},
					},
				},

				{
					field: "In_mode_flag",
					title: "Mode",
					width: 50,
					hidden: true
				}],
				editable: false,

			});
			var grid = $("#grid_theme").data("kendoGrid");
			function filterActiveData() {
				var dataSource = grid.dataSource;
				dataSource.filter({
					logic: "and",
					filters: [
						{ field: "active_status_desc", operator: "neq", value: "InActive" }
					]
				});
			}
			filterActiveData();
		}
		catch (err) {
			console.log(err)

		}
	}
	function priorityFilter(element) {
		element.kendoDropDownList({
			dataSource: status_Priority,
			optionLabel: "--Select Value--"
		});

	}
	function getSerializedRows() {
		btn_onClick('Create');
		var grid = $("#grid_theme").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].theme_order > max && grid.dataSource._data[i].active_status != "N") {
				max = grid.dataSource._data[i].theme_order;
			}
		}
		var newSeqNo = parseInt(max) + 1;

		var selectedItem = [];
		var list = {};
		list.recon_code = $("#cmbreconname").val();
		list.theme_order = newSeqNo;
		selectedItem.push(list);

		if (selectedItem[0].recon_code != "") {
			setlocalStorage("ls_pageList", selectedItem);
			document.location = "../Theme/Themeview";
		} else {
			$.alert({
				title: 'Recon',
				content: "Please Select Recon ",
				type: 'red',
			});
		}
	}
	function getSerializedSelectedRows(mode) {
		try {
			if (getlocalStorage("ls_pageList") != undefined || getlocalStorage("ls_pageList") != "") {
				var items = getlocalStorage("ls_pageList");
				if (items.length == 0) {
					kendoAlert("Please select records");
				}
				else {
					if ($(mode).attr('value') == "edit") {
						if (items.active_status != "N") {
							btn_onClick("Edit");
							document.location = '../Theme/Themeview';
						}
					}
					else if ($(mode).attr('value') == "view") {
						btn_onClick('View');
						document.location = "../Theme/Themeview";
					}
				}
			}
		}
		catch (err) {

		}
	}
	function selectRow() {
		try {
			var grid = $("#grid_theme").data("kendoGrid");
			var selectedItem = grid.dataItem(grid.select());
			setlocalStorage("ls_pageList", selectedItem);
		}
		catch (err) {

		}
	}
	function myDeleteJs() {
		var grid = $("#grid_theme").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		if (model.active_status != "N") {
			var dataset_gid = model.theme_gid;
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						$.confirm({
							title: 'Delete Reason',
							content: '' +
								'<form action="" class="formName">' +
								'<div class="form-group">' +
								'<label>Reason</label>' +
								'<input type="text" placeholder="Reason" class="name form-control" required />' +
								'</div>' +
								'</form>',
							buttons: {
								formSubmit: {
									text: 'Submit',
									btnClass: 'btn-blue',
									action: function () {
										var name = this.$content.find('.name').val();
										if (!name) {
											$.alert('Reason cannot be empty');
											return false;
										}
										var holdflag = "";
										var themename = "";
										var cmbrecon = "";
										var theme_code = "";
										var clone_theme = "";
										var action = "DELETE";
										var theme_gid = model.theme_gid;
										var action_by = "";
										var status = "Y"
										var theme_order = "";
										var themetype = "";
										var sourcedataset = "";
										var comparedataset = "";
										$.ajax({
											type: "POST",
											url: '../theme/themeheader',
											dataType: 'json',
											data: JSON.stringify({ theme_name: themename, theme_Code: theme_code, theme_gid: theme_gid, theme_type: themetype, in_action: action, in_action_by: action_by, recon_code: cmbrecon, active_status: status, theme_order: theme_order, source_dataset: sourcedataset, comparison_dataset: comparedataset, inactive_reason: name }),
											contentType: 'application/json; charset=utf-8',
											success: function (response) {
												var result = JSON.parse(response);
												var data = result[0];
												debugger;
												if (data.out_result == "1") {
													$.alert({
														icon: 'fa fa-success',
														title: 'Recon',
														theme: 'dark',
														content: data.out_msg,
														type: 'green',
														animationSpeed: 700,
													});
													gridlist();
												} else {
													$.alert({
														title: 'Recon',
														content: data.out_msg,
														type: 'red',
													});
												}
											}
										})
									}
								},
								cancel: function () {
									//close
								},
							},

						});
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
</script>
