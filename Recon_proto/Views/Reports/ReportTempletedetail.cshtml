@{
    ViewData["Title"] = "Custom Report Template";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
    <title></title>
    <!-- Include SheetJS and Papa Parse libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.17.4/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>

    <style>
        .editable-dropdown {
            position: relative;
        }

        #grid_colfilter .k-grid-content {
            height: 200px !important;
        }

        .form-select1 {
            display: block;
            width: 75%;
            background-clip: padding-box;
            padding: 0.4375rem 1.875rem 0.4375rem 0.875rem;
            -moz-padding-start: calc(0.875rem - 3px);
            font-size: 0.7375rem;
            font-weight: 400;
            line-height: 1.53;
            color: #697a8d;
            background-color: #fff;
            background-image: url(data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='rgba%2867, 89, 113, 0.6%29' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e);
            background-repeat: no-repeat;
            background-position: right 0.875rem center;
            background-size: 17px 12px;
            border: 1px solid #d9dee3;
            border-radius: 0.375rem;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }

        #dropdown-list {
            list-style: none;
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            border: 1px solid #ccc;
            background-color: #fff;
            z-index: 1;
        }

            #dropdown-list li {
                padding: 5px;
                cursor: pointer;
            }

        #editable-input {
            width: 100%;
        }

        .nav-item.me-2.me-xl-50 {
            margin-right: 33rem !important;
        }

        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-grid-header {
            font-weight: bold;
        }

        .k-content {
            font-weight: normal;
            font-size: 13px;
        }

        .k-widget.k-window {
            padding-top: 35px;
            min-width: 90px;
            min-height: 50px;
            width: 700px !important;
            height: 300px !important;
            top: 180.766px !important;
            /*left: 120px !important;*/
            z-index: 10003;
            left: 300px !important;
        }

        .action-button {
            width: 120px;
            background: #673AB7;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 0px 10px 5px;
            float: right;
            border-radius: 20px;
        }

        .action-button-previous {
            width: 100px;
            background: #616161;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 5px 10px 0px;
            float: right;
            border-radius: 20px;
        }

        div.k-header.k-grid-toolbar {
            background-image: none;
        }

        .k-link:link, .k-link:visited, .k-nav-current.k-state-hover .k-link {
            color: white !important;
        }

        .control-label.required:after {
            content: "*";
            color: red;
        }

        span.k-tooltip {
            white-space: pre-line;
        }

        span.k-tooltip {
            position: fixed;
            display: -webkit-box;
            border-width: 1px;
            padding: 2px 5px 1px 6px;
        }

        .tab-content {
            padding: 0.9rem;
            border-radius: 0.375rem;
        }

        .k-grid .k-grouping-header {
            height: 20px;
            font-size: 12px;
        }

        .k-grid .k-i-arrow-n, .k-grid .k-i-arrow-s {
            float: left;
        }

        .k-block, .k-header, .k-grid-header, .k-toolbar, .k-grouping-header, .k-pager-wrap, .k-button, .k-draghandle, .k-treemap-tile, html .km-pane-wrapper .k-header {
            background-color: rgb(135, 46, 123) !important;
        }

        .k-grid-header {
            background-color: #FEE7D5;
            color: black;
            font-size: 12px;
        }

            .k-grid-header th.k-header.k-filter-row th {
                text-align: center;
            }

        .k-grid td {
            padding: 0.3em 0.3em;
            font-size: 12px;
        }

        .k-grid .k-grouping-header {
            height: 20px;
            font-size: 12px;
        }

        .k-grouping-header .k-group-indicator, .k-pivot-toolbar .k-button {
            height: 20px !important;
        }

        .k-state-selected, .k-state-selected:link, .k-state-selected:visited, .k-list > .k-state-selected, .k-list > .k-state-highlight, .k-panel > .k-state-selected, .k-ghost-splitbar-vertical, .k-ghost-splitbar-horizontal, .k-draghandle.k-state-selected:hover, .k-scheduler .k-scheduler-toolbar .k-state-selected, .k-scheduler .k-today.k-state-selected, .k-marquee-color {
            border-color: #872E7B !important;
            color: #e74949 !important;
        }

        .k-grid-content > table > tbody > .k-alt {
            /*background: #E0E6F8;*/
            line-height: 1px;
        }

        .form-horizontal .control-label {
            text-align: left;
        }

        div.k-grid tbody .k-button {
            min-width: 0;
        }

        .form-horizontal .control-label {
            font-weight: 400;
        }

        .k-grid .k-autocomplete.k-state-default, .k-grid .k-picker-wrap.k-state-default, .k-grid .k-numeric-wrap.k-state-default {
            height: 18px;
        }

        .content-wrapper, .right-side {
            background-color: #e7e7e7;
        }

        .info-box-icon {
            background: white;
        }

        div.k-window-content {
            overflow-y: auto;
            overflow-x: hidden;
        }

        .info-label {
            display: inline-block;
            cursor: pointer;
            color: blue;
        }

        .info-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            padding: 10px;
            z-index: 1;
        }

        .info-label:hover .info-content,
        .info-label.active .info-content {
            display: block;
        }

        .nav-align-top > .tab-content, .nav-align-right > .tab-content, .nav-align-bottom > .tab-content, .nav-align-left > .tab-content {
            box-shadow: none !important;
            margin-top: 18px !important;
        }

        .nav-align-top > .tab-content, .nav-align-right > .tab-content, .nav-align-bottom > .tab-content, .nav-align-left > .tab-content {
            box-shadow: none !important;
            margin-top: 18px;
        }
    </style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <div class="card-body" style="margin-top:-1%;height: 84%;">
                <form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
                    <div class="row" style="margin-top: -18px;margin-bottom: 10px;">
                        <div class="col-sm-6">
                            <div class="row">
                                <div class="col-sm-4">
                                    <label for="organization" class="form-label">Custom Template code</label>
                                    <input class="form-control" type="text" id="reporttemplate_code" value="" disabled>
                                </div>
                                <div class="col-sm-4">
                                    <label for="organization" class="form-label">Mode</label>
                                    <input class="form-control" type="text" id="txtmode" disabled>
                                </div>
                                <div class="col-sm-4">
                                    <label for="organization" class="form-label">Status</label><br>
                                    <input class="form-control" type="text" id="txtstatus" disabled>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-5"></div>
                        <div class="col-sm-1" style="margin-top: 3%;">
                            <center>
                                <a href="../Reports/ReportTemplete"><img style="cursor:pointer;" src="~/Content/images/toplist.png"></a>&nbsp;&nbsp;&nbsp;&nbsp;
                            </center>
                        </div>
                    </div>
                    <div class="col-md-12">
                        <div class="box box-orange" style="height:auto;">
                            <div class="row" style="padding-bottom:5px;padding-left:5px;padding-right:5px">
                                <div class="col-sm-3">
                                    <label for="" class="form-label">Custom Template Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                    <input class="form-control" id="rt_name" name="ReportTemplate" type="text">
                                    <input class="form-control" type="hidden" id="reporttemplate_gid" value=0>
                                </div>
                                <div class="col-sm-3">
                                    <label for="" class="form-label">Report Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                    <select id="cmbreporttype" class="form-select form-control">
                                    </select>
                                </div>
                                <div class="col-sm-3">
                                    <label for="" class="form-label">Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                    <input hidden class="form-control" id="cmbreconname_desc" name="reconName" type="text">
                                    <select id="cmbreconname" class="form-select form-control" disabled>
                                    </select>
                                </div>
                                @*<div class="col-sm-2">
                                <label for="" class="form-label">System Template&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                <select id="sys_flag" class="form-select form-control">
                                </select>
                                </div>*@
                                <div class="col-sm-2">
                                    <label for="" class="form-label">Clone Report Template&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                    <select id="clonereport" class="form-select form-control">
                                    </select>
                                </div>
                                <div class="col-sm-1" style="margin-top: 2.5%;">
                                    <button type="button" class="btn btn-sm me-2 save_btn" id="btnclone" onclick="saveclone()">Clone</button>&nbsp;&nbsp;&nbsp;
                                </div>
                            </div>

                            <div class="row">
                                <div class="nav-align-top mb-3">
                                    <ul class="nav nav-pills mb-2" role="tablist" style="margin-right: 13px;margin-left: 10px;">
                                        <li class="nav-item">
                                            <button type="button"
                                                    class="nav-link active"
                                                    role="tab"
                                                    data-bs-toggle="tab"
                                                    data-bs-target="#navs-pills-top-ReportFilter"
                                                    aria-controls="navs-pills-top-ReportFilter"
                                                    aria-selected="true">
                                                Row Filter
                                            </button>
                                        </li>

                                        <li class="nav-item">
                                            <button type="button"
                                                    class="nav-link"
                                                    role="tab"
                                                    data-bs-toggle="tab"
                                                    data-bs-target="#navs-pills-top-ColumnFilter"
                                                    aria-controls="navs-pills-top-ColumnFilter"
                                                    aria-selected="true">
                                                Column Filter
                                            </button>
                                        </li>

                                        <li class="nav-item">
                                            <button type="button"
                                                    class="nav-link"
                                                    role="tab"
                                                    data-bs-toggle="tab"
                                                    data-bs-target="#navs-pills-top-sorting"
                                                    aria-controls="navs-pills-top-sorting"
                                                    aria-selected="true">
                                                Sorting
                                            </button>
                                        </li>

                                        <li class="nav-item">
                                            <button type="button"
                                                    class="nav-link"
                                                    role="tab"
                                                    data-bs-toggle="tab"
                                                    data-bs-target="#navs-pills-top-attachment"
                                                    aria-controls="navs-pills-top-attachment"
                                                    aria-selected="true">
                                                Report Excel Template
                                            </button>
                                        </li>

                                    </ul>
                                    <div class="tab-content">
                                        @*Report Filter*@
                                        <div class="tab-pane fade show active" id="navs-pills-top-ReportFilter" role="tabpanel" style="margin-top:-25px;">
                                            <div class="panel panel-default">
                                                <div class="panel-body">
                                                    <div class="col-xs-12">
                                                        <div id="gd_tempfilter">
                                                            <div id="grid_tempfilter">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @*Column Filter*@
                                        <div class="tab-pane fade" id="navs-pills-top-ColumnFilter" role="tabpanel" style="margin-top:-31px;">
                                            <div class="panel panel-default">
                                                <div class="panel-body">
                                                    <div class="row" style="margin-bottom: 9px;">
                                                        <div class="col-md-11"> </div>
                                                        <div class="col-md-1">
                                                            <button type="button" class="btn btn-sm me-2 save_btn" id="btncolgrid" onclick="savecolfilter()" style="float: right;">Save</button>
                                                        </div>
                                                    </div>
                                                    <div class="col-xs-12">
                                                        <div id="gd_colfilter">
                                                            <div id="grid_colfilter">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @*Sorting*@
                                        <div class="tab-pane fade" id="navs-pills-top-sorting" role="tabpanel" style="margin-top:-25px;">
                                            <div class="panel panel-default">
                                                <div class="panel-body">
                                                    <div class="col-xs-12">
                                                        <label for="" class="form-label">Sorting Order&nbsp;</label>
                                                        <span style="margin-left:2px;margin-top:5px">
                                                            <input type="radio" id="sort1" name="sortOrder" value="asc" onclick="onpartial()" checked>&nbsp;Ascending &nbsp;
                                                            <input type="radio" id="sort2" name="sortOrder" value="desc" onclick="onpartial()" style="margin-left: 10px;">&nbsp;Descending&nbsp;
                                                        </span>
                                                    </div>
                                                    <div class="col-xs-12">
                                                        <div id="gd_sorting">
                                                            <div id="grid_sorting">
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        @*Attachment*@
                                        <div class="tab-pane fade" id="navs-pills-top-attachment" role="tabpanel" style="margin-top:-25px;">
                                            <div class="panel panel-default">
                                                <div class="panel-body">
                                                    <div class="row" style="padding-bottom:15%;margin-top:5px;padding-left:30px;padding-right:5px">
                                                        <div class="col-sm-4">
                                                            <div class="form-group">
                                                                <label for="Filename" class="form-label">Choose Excel<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                                                <input type="file" onchange="filechange(this)" class="form-control input-lg browse btn btn-primary input-lg" accept=".xlsx, .csv" name="File_Import" id="File_Import" style="width: 90%;height: 30px;">
                                                                <label class="col-md-6 control-label" id="FileName" hidden></label>
                                                            </div>
                                                            <div>
                                                                <label id="fetch_filename"> </label>
                                                            </div>
                                                        </div>
                                                        <div class="col-sm-2" style="margin-top:29px">
                                                            <label class="form-label"></label>
                                                            <input id="btn_upload" type="button" onclick="upload()" style="background: #175650;border-color: #175650;width:40%; color:#fff;" name="Start" class="btn btn-sm btn-success me-2" value="Upload" />

                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                    </div>
                                </div>
                            </div>

                            <div class="row" style="padding-bottom:5px;padding-left:5px;padding-right:5px">
                                <div class="col-sm-4"></div>
                                <div class="col-sm-4" style="text-align:center">
                                    <button type="button" class="btn btn-sm save_btn me-2" onclick="saveheadersubmit()">Submit</button>&nbsp;&nbsp;&nbsp;
                                    <a href="../Reports/ReportTemplete" class="btn btn-sm cancel_btn me-2">Cancel</a>
                                </div>
                                <div class="col-sm-4"></div>
                            </div>
                        </div>
                    </div>



                </form>
            </div>
        </div>
    </div>


</body>
</html>

<script type="text/javascript">
    $(document).ready(function () {
        $("#txtmode").val(getlocalStorage('btn_clk_val'))
        $("#navhead").text("Custom Report Template");
        kendodate_format();
        detailfetch();
        $("#cmbreporttype").prop("disabled", false);
    });

    function filechange(val) {
        var fileInput = val;
        if (fileInput.files.length > 0) {
            $("#fetch_filename").val(fileInput.files[0].name);
            // document.getElementById("fetch_filename").textContent = fileInput.files[0].name;
        }
    }

    function detailfetch() {
        //report list
        var getTemp_gid = getlocalStorage("temp_gid");
        $("#reporttemplate_gid").val(getTemp_gid);
        var data = {};
        var reconcode = getlocalStorage("ls_pageList");
        $("#cmbreconname").val(reconcode);
        $("#cmbreporttype").prop("disabled", true);
        data.in_recon_code = reconcode;
        $.ajax({
            type: "POST",
            url: '../Reports/reportTempletelist',
            dataType: 'json',
            contentType: 'application/json; charset=utf-8',
            data: JSON.stringify(data),
            success: function (response) {
                if (response != null) {
                    var res = JSON.parse(response)
                    $("#clonereport").empty();
                    $("#clonereport").append($('<option>', {
                        value: "",
                        text: "  Select  "
                    }));
                    $.each(res, function (index, item) {
                        if (item.active_status == 'Y') {
                            $("#clonereport").append($('<option>', {
                                value: item.reporttemplate_code,
                                text: item.reporttemplate_name,
                            }));
                        }
                    });
                }

                // system flag
                var in_master_code = "QCD_YN";
                var in_user_code = "";
                $.ajax({
                    type: "POST",
                    url: '../Common/Qcdmaster',
                    dataType: 'json',
                    async: false,
                    data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        $("#sys_flag").empty();
                        $("#sys_flag").append($('<option>', {
                            value: "",
                            text: "  Select  "
                        }));
                        $.each(response, function (index, item) {
                            $("#sys_flag").append($('<option>', {
                                value: item.masterSyscode,
                                text: item.masterName
                            }));
                        });

                    }
                });

            },
            error: function (er) {
                alert(er)
                console.log(er)
            }

        });

        var data = getlocalStorage("ls_pageList");
        $.ajax({
            type: "POST",
            url: '../Reports/ReportList',
            dataType: 'json',
            data: JSON.stringify({}),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                $("#cmbreporttype").empty();
                $("#cmbreporttype").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(response, function (index, item) {
                    $("#cmbreporttype").append($('<option>', {
                        value: item.report_code,
                        text: item.report_desc
                    }));
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });

        // system flag
        var in_master_code = "QCD_YN";
        var in_user_code = "";
        $.ajax({
            type: "POST",
            url: '../Common/Qcdmaster',
            dataType: 'json',
            async: false,
            data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                $("#sys_flag").empty();
                $("#sys_flag").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(response, function (index, item) {
                    $("#sys_flag").append($('<option>', {
                        value: item.masterSyscode,
                        text: item.masterName
                    }));
                });

            }
        });

        // recon list

        var data = {};
        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        data.in_user_gid = 0;
        data.in_active_status = '';
        data.in_user_code = txtusername.user_name;
        var Context = data;
        $.ajax({
            type: "POST",
            url: '../Recon/Reconlistfetch',
            dataType: 'json',
            async: false,
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var res = JSON.parse(response);
                $("#cmbreconname").empty();
                $("#cmbreconname").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(res, function (index, item) {
                    $("#cmbreconname").append($('<option>', {
                        value: item.recon_code,
                        text: item.recon_name
                    }));
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
        var data = getlocalStorage("ls_pageList");
        $("#cmbreconname").val(data);
        debugger;
        var gettext = $("#cmbreconname").find(":selected").text();
        $("#cmbreconname_desc").val(gettext);
        $("#cmbreporttype").prop("disabled", true);
        var reconcode = $("#cmbreconname").val();

        if (getlocalStorage('btn_clk_val') == "Create" && ($("#reporttemplate_gid").val() == '0' || $("#reporttemplate_gid").val() == 0)) {
            $("#txtstatus").val("Active");
            $("#reporttemplate_gid").val("0");
            $("#reporttemplate_code").val("");
            // $("#txtmode").val(getlocalStorage('btn_clk_val'));
            $("#btncolgrid").prop('disabled', true);
            $("#btn_upload").prop('disabled', true);
            $("#btnclone").prop('disabled', false);
            grid_tempfilter([]);
        }
        else if ((getlocalStorage('btn_clk_val') == "View" || getlocalStorage('btn_clk_val') == "Edit" || getlocalStorage('btn_clk_val') == "Create") && ($("#reporttemplate_gid").val() != 0 || $("#reporttemplate_gid").val() != '0')) {
            if (getlocalStorage("ls_pageList") != undefined) {
                var getselectedTemplate = getlocalStorage("selectedTemplate");
                var jsondata = {};
                jsondata.in_reporttemplate_code = getselectedTemplate.reporttemplate_code;
                jsondata.in_recon_code = getselectedTemplate.recon_code;
                jsondata.in_report_code = getselectedTemplate.report_code;
                //detail fetch
                $.ajax({
                    type: "POST",
                    url: '../Reports/reporttemplatefetch',
                    dataType: 'json',
                    data: JSON.stringify(jsondata),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        if (response != " ") {
                            var res = JSON.parse(response);
                            $("#reporttemplate_code").val(res.Table[0].reporttemplate_code);
                            // $("#txtmode").val(getlocalStorage('btn_clk_val'));
                            $("#txtstatus").val("Active");
                            $("#reporttemplate_gid").val(res.Table[0].reporttemplate_gid);
                            $("#rt_name").val(res.Table[0].reporttemplate_name);
                            $("#cmbreporttype").val(res.Table[0].report_code);
                            $("#sys_flag").val(res.Table[0].system_flag);
                            $("#cmbreconname").val(res.Table[0].recon_code);
                            document.getElementById("fetch_filename").textContent = res.Table[0].file_name ? res.Table[0].file_name : '';
                            $("#cmbreporttype").prop("disabled", true);
                            $("#clonereport").prop('disabled', true);
                            $("#cmbreconname").prop('disabled', true);
                            $("#btnclone").prop('disabled', true);
                            $("#btncolgrid").prop('disabled', false);
                            $("#btn_upload").prop('disabled', false);
                            if (res.Table[0].sortby_code == "desc") {
                                $("#sort2").prop("checked", true);
                            } else {
                                $("#sort1").prop("checked", true);
                            }
                            grid_tempfilter(res.Table1);
                            grid_columfilter(res.Table2);
                            grid_sorting(res.Table3);
                        }
                        else {
                            grid_tempfilter([]);
                            grid_columfilter([]);
                            grid_sorting([]);
                        }
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }

                });
            }
        }
    }


    // Row filter
    function grid_tempfilter(data) {
        var filter_criteria_desc_list = "";
        var join_condition_list = "";
        var reportparam_value_list = "";
        $("#grid_tempfilter").kendoGrid({
            dataSource: {
                data: data,
                pageSize: 10,
                schema: {
                    model: {
                        fields: {
                            reporttemplatefilter_gid: { type: "string", defaultValue: "0" },
                            reporttemplate_code: { type: "string" },
                            filter_seqno: { type: "string" },
                            report_field: { type: "string" },
                            reportparam_value: { type: "string" },
                            filter_criteria: { type: "string" },
                            filter_criteria_desc: { type: "string" },
                            filter_value: { type: "string" },
                            open_parentheses_flag: { type: "string", editable: false },
                            close_parentheses_flag: { type: "string", editable: false },
                            join_condition: { type: "string" },
                            active_status: { type: "string" },
                            active_status_desc: { type: "string" },
                            system_flag: { type: "string" }
                        }
                    }
                }
            },
            height: 220,
            groupable: false,
            edit: OnEdit,
            dataBound: function (e) {
                resultData = e.sender._data;
                var rows = $('#grid_tempfilter').data('kendoGrid').tbody.children();
                setColor(rows, resultData);
            },
            sortable: false,
            selectable: "row",
            filterable: false,
            navigatable: true,
            pageable: true,
            resizable: true,
            pageable: {
                refresh: false,
                pageSizes: true,
                buttonCount: 5
            },
            toolbar: "<a href='javascript:void(0)' onclick='saveheader()' > <span class='fa fa-plus' style = 'color:White' > </span></a> ",
            columns: [{
                command: [
                    {
                        name: "save",
                        id: "Save",
                        template: "<a href=''onclick='savereportFilter()' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:17%;'></a>&nbsp;&nbsp;&nbsp;",
                    },
                    {
                        name: "Delete",
                        id: "Delete",
                        template: "<a href='' onclick='myDeleteJs()' data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
                    },
                ], title: "Action&nbsp;", width: "40px",
            },
            {
                field: "filter_seqno",
                title: "Filter Seq No",
                width: 50,
            },
            {
                title: "(", width: 20,
                template: '#=sel_checkbox(data)#'
            },
            {
                field: "reporttemplatefilter_gid",
                title: "reporttemplatefilter_gid",
                hidden: true,
            },
            {
                field: "reporttemplate_code",
                title: "reporttemplate_code",
                hidden: true,
            },
            {
                field: "report_field",
                title: "report_field",
                width: 120,
                hidden: true
            },
            {
                field: "reportparam_value",
                title: "Filter Field",
                editor: function (container, options) {
                    combo_editor_reportfiled(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "report_field", "grid_tempfilter")
                },
                width: 120,
            },
            {
                field: "filter_criteria",
                title: "Filter Criteria",
                width: 120,
                hidden: true
            },
            {
                field: "filter_criteria_desc",
                title: "Filter Criteria",
                editor: function (container, options) {
                    combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_tempfilter", "SOURCE")
                },
                editable: true,
                width: 120
            },
            {
                field: "filter_value",
                title: "Filter Value",
                width: 120
            },
            {
                field: "close_parentheses_flag",
                title: ")",
                template: '#=sel_checkbox1(data)#',
                width: 20
            },
            {
                field: "join_condition",
                title: "Joins",
                editor: function (container, options) {
                    combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_tempfilter")
                },
                width: 60
            },
            {
                field: "active_status",
                title: "Status",
                hidden: true
            },
            {
                field: "active_status_desc",
                title: "Status",
                width: 80,
                hidden: true
            }],
            editable: true,
        });

        join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

    }

    function OnEdit(e) {
        try {
            if (e.model.system_flag == 'Y') {
                e.sender.closeCell();
            }
            //setDefaultValues(e);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }

    function addRow() {
        var grid = $("#grid_tempfilter").data("kendoGrid");
        var dataSource = grid.dataSource;

        // Get the last sequence number and increment it
        var lastSeqNo = grid.dataSource._data.length;
        var newSeqNo = parseInt(lastSeqNo) + 1;

        // Add a new row with the incremented sequence number
        dataSource.add({ filter_seqno: newSeqNo, open_parentheses_flag: "N", close_parentheses_flag: "N", reporttemplatefilter_gid: 0 });
    }

    //function OnEdit(e) {
    //    try {
    //        setDefaultValues(e);
    //    }
    //    catch (err) {
    //        javascript_log4j_root(arguments.callee.name, err);
    //    }
    //}

    var gridRowID = -1;
    function sel_checkbox(data) {
        gridRowID++;
        var isChecked = data.open_parentheses_flag;
        var con = "";
        if (isChecked == "Y") {
            con = 'checked';
        }
        if (data.system_flag == 'Y') {
            return '<input id="chk_sel_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' disabled /> ';

        } else {
            return '<input id="chk_sel_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' /> ';

        }
    }
    var gridRowID1 = -1;
    function sel_checkbox1(data) {
        gridRowID1++;
        var isChecked1 = data.close_parentheses_flag;
        var con = "";
        if (isChecked1 == "Y") {
            con = 'checked';
        }
        if (data.system_flag == 'Y') {
            return '<input id="chk_sel1_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' disabled /> ';

        } else {
            return '<input id="chk_sel1_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' /> ';

        }
    }

    function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        var arr = [];
        var in_master_code = "QCD_RP_CONSTRAINT";
        var in_user_code = txtusername.user_name;
        $.ajax({
            type: "POST",
            url: '../Common/Qcdmaster',
            dataType: 'json',
            data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                if (response.length > 0) {
                    for (i = 0; response.length > i; i++) {
                        var list = {};
                        list.code = response[i].masterCode;
                        list.desc = response[i].masterName;
                        arr.push(list);
                    }
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
        $('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
            autoBind: false,
            filter: "contains",
            dataSource: arr,
            change: function (e) {
                var cmb_value = this.value();
                if (cmb_value && this.selectedIndex == -1) {
                    this.value("");
                }
                //else{FF
                var cmb_var = $("#" + grid_id).data("kendoGrid");
                var selectedItem = cmb_var.dataItem(cmb_var.select());
                var combobox_data = $("#" + cmbid).data("kendoComboBox");
                if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
                    selectedItem[datafield] = "";
                    selectedItem[code_datafield] = "";
                }
                else {
                    selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
                    selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
                }
            }
        });
        $("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
    }

    function combo_editor_reportfiled(container, cmbid, datasource, datafield, code_datafield, grid_id) {
        var arr1 = [];
        var data = {};
        data.in_reportparam_gid = 0;
        data.in_report_code = $("#cmbreporttype").val();
        data.in_recon_code = $("#cmbreconname").val();
        data.in_action = '';
        $.ajax({
            type: "POST",
            url: "../Reports/getreportparamrecon",
            dataType: "json",
            data: JSON.stringify({ in_reportparam_gid: data.in_reportparam_gid, in_report_code: data.in_report_code, in_action: data.in_action, in_recon_code: data.in_recon_code }),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var res = JSON.parse(response);
                if (res.length > 0) {
                    for (i = 0; res.length > i; i++) {
                        var list = {};
                        if (res[i].reportparam_code != "") {
                            list.code = res[i].reportparam_code;
                            list.desc = res[i].reportparam_desc;
                            arr1.push(list);
                        }
                    }
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
        $('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
            autoBind: false,
            filter: "contains",
            dataSource: arr1,
            change: function (e) {
                var cmb_value = this.value();
                if (cmb_value && this.selectedIndex == -1) {
                    this.value("");
                }
                //else{FF
                var cmb_var = $("#" + grid_id).data("kendoGrid");
                var selectedItem = cmb_var.dataItem(cmb_var.select());
                var combobox_data = $("#" + cmbid).data("kendoComboBox");
                if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
                    selectedItem[datafield] = "";
                    selectedItem[code_datafield] = "";
                }
                else {
                    selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
                    selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
                }
            }
        });

        $("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
    }

    //Column filter

    function grid_columfilter(data) {
        $("#grid_colfilter").kendoGrid({
            dataSource: {
                data: data,
                schema: {
                    model: {
                        fields: {
                            report_field: { type: "string" },
                            report_field_desc: { type: "string", editable: false },
                            display_desc: { type: "string" },
                            display_order: { type: "number" },
                            display_flag: { type: "string", editable: false }
                        }
                    }
                }
            },
            groupable: false,
            dataBound: function (e) {
                resultData = e.sender._data;
                var rows = $('#grid_colfilter').data('kendoGrid').tbody.children();
                setColor(rows, resultData);
            },
            sortable: false,
            selectable: "row",
            filterable: false,
            navigatable: true,
            pageable: false,
            resizable: true,
            editable: true,

            columns: [
                {
                    field: "report_field",
                    title: "report_field",
                    hidden: true,
                },
                {
                    field: "report_field_desc",
                    title: "Report Field",
                    width: 100
                },
                {
                    field: "display_desc",
                    title: "Display Description",
                    width: 100
                },
                {
                    field: "display_order",
                    title: "Display Order",
                    width: 50,
                    //template: '<input type="number" style="width: 88%;height: 10px" class= "form-control" /> ',
                },
                {
                    field: "display_flag",
                    title: "Display Flag",
                    attributes: { style: "text-align: center" },
                    width: 50,
                    template: '#=display_checkbox1(data)#'
                }],
        });
    }

    function display_checkbox1(data) {
        gridRowID1++;
        var isChecked1 = data.display_flag;
        var con = "";
        if (isChecked1 == "Y") {
            con = 'checked';
        }
        if (data.system_flag == 'Y') {
            return '<input id="display_sel" class="checkbox" type="checkbox" ' + con + ' disabled /> ';
        } else {
            return '<input id="display_sel" class="checkbox" type="checkbox" ' + con + ' /> ';
        }

    }

     // Sorting

    function grid_sorting(data) {

        var reportparam_value_list = "";
        $("#grid_sorting").kendoGrid({
            dataSource: {
                data: data,
                pageSize: 10,
                schema: {
                    model: {
                        fields: {
                            active_status: { type: "string" },
                            report_field: { type: "string" },
                            sort_order: { type: "number" },
                            reportparam_value: { type: "string" },
                            reporttemplate_code: { type: "string" },
                            reporttemplatesorting_gid: { type: "number" },
                        }
                    }
                }
            },
            height: 205,
            groupable: false,
            edit: OnEdit,
            dataBound: function (e) {
                resultData = e.sender._data;
                var rows = $('#grid_sorting').data('kendoGrid').tbody.children();
                setColor(rows, resultData);
            },
            sortable: false,
            selectable: "row",
            filterable: false,
            navigatable: true,
            pageable: true,
            resizable: true,
            pageable: {
                refresh: false,
                pageSizes: true,
                buttonCount: 5
            },
            toolbar: "<a href='javascript:void(0)' onclick='addSortRow()' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
            columns: [{
                command: [
                    {
                        name: "save",
                        id: "Save",
                        template: "<a href=''onclick='saveSorting()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:6.5%;'></a>&nbsp;&nbsp;&nbsp;",
                    },
                    //{
                    //    name: "edit",
                    //    id: "Edit",
                    //    template: "<a href=''class='k-grid-edit'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
                    //},
                    {
                        name: "Delete",
                        id: "Delete",
                        template: "<a href='' onclick='deleteSort()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
                    },
                ], title: "Action&nbsp;", width: "40px",
            },
            {
                field: "reporttemplatesorting_gid",
                title: "reporttemplatesorting_gid",
                width: 100,
                hidden: true
            },
            {
                field: "report_field",
                title: "Report Field",
                width: 100,
                hidden: true
            },
            {
                field: "reportparam_value",
                title: "Filter Field",
                editor: function (container, options) {
                    combo_editor_sortfiled(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "report_field", "grid_sorting")
                },
                width: 120,
            },
            {
                field: "sorting_order",
                title: "Sort Order",
                width: 50
            }],
            editable: true,
        });
    }

    function combo_editor_sortfiled(container, cmbid, datasource, datafield, code_datafield, grid_id) {
        var arr1 = [];
        var data = {};
        data.in_reportparam_gid = 0;
        data.in_report_code = $("#cmbreporttype").val();
        data.in_recon_code = $("#cmbreconname").val();
        data.in_action = '';
        $.ajax({
            type: "POST",
            url: "../Reports/getreportparamrecon",
            dataType: "json",
            data: JSON.stringify({ in_reportparam_gid: data.in_reportparam_gid, in_report_code: data.in_report_code, in_action: data.in_action, in_recon_code: data.in_recon_code }),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var res = JSON.parse(response);
                if (res.length > 0) {
                    for (i = 0; res.length > i; i++) {
                        var list = {};
                        if (res[i].reportparam_code != "") {
                            list.code = res[i].reportparam_code;
                            list.desc = res[i].reportparam_desc;
                            arr1.push(list);
                        }
                    }
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
        $('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
            autoBind: false,
            filter: "contains",
            dataSource: arr1,
            change: function (e) {
                var cmb_value = this.value();
                if (cmb_value && this.selectedIndex == -1) {
                    this.value("");
                }
                //else{FF
                var cmb_var = $("#" + grid_id).data("kendoGrid");
                var selectedItem = cmb_var.dataItem(cmb_var.select());
                var combobox_data = $("#" + cmbid).data("kendoComboBox");
                if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
                    selectedItem[datafield] = "";
                    selectedItem[code_datafield] = "";
                }
                else {
                    selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
                    selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
                }
            }
        });

        $("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
    }

    function addSortRow() {
        var grid = $("#grid_sorting").data("kendoGrid");
        var dataSource = grid.dataSource;

        // Get the last sequence number and increment it
        var lastSeqNo = grid.dataSource._data.length;
        var newSeqNo = parseInt(lastSeqNo) + 1;

        // Add a new row with the incremented sequence number
        dataSource.add({ filter_seqno: newSeqNo, reporttemplatesorting_gid: 0 });
    }

    // save

    function savereportFilter() {
        try {
            var grid = $("#grid_tempfilter").data("kendoGrid");
            var model = grid.dataItem($(event.target).closest("tr"));
            var data = {};
            if (model.system_flag != 'Y') {
                data.in_reporttemplatefilter_gid = model.reporttemplatefilter_gid;
                data.in_reporttemplate_code = $("#reporttemplate_code").val();
                data.in_filter_seqno = model.filter_seqno;
                data.in_report_field = model.report_field;
                data.in_filter_criteria = model.filter_criteria;
                data.in_filter_value = model.filter_value;
                data.in_join_condition = model.join_condition;
                data.in_action = ''
                data.in_active_status = 'Y';
                data.in_open_parentheses_flag = "";
                data.in_close_parentheses_flag = "";
                if ($('#chk_sel_' + model.reporttemplatefilter_gid).is(":checked")) {
                    data.in_open_parentheses_flag = "Y";
                } else {
                    data.in_open_parentheses_flag = "N";
                }
                if ($('#chk_sel1_' + model.reporttemplatefilter_gid).is(":checked")) {
                    data.in_close_parentheses_flag = "Y";
                } else {
                    data.in_close_parentheses_flag = "N";
                }
                if (data.in_reporttemplatefilter_gid == "0") {
                    data.in_reporttemplatefilter_gid = 0;
                    data.in_action = "INSERT"
                } else {
                    data.in_action = "UPDATE"
                }
                $.ajax({
                    type: "POST",
                    url: '../Reports/reporttemplatefilter',
                    dataType: 'json',
                    data: JSON.stringify(data),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        if (response != null) {
                            var res = JSON.parse(response);
                            if (res.length > 0) {
                                $.alert({
                                    title: 'Recon',
                                    content: res[0].out_msg,
                                    type: 'green',
                                });
                                $("#txtmode").val("Edit");
                                detailfetch();
                            }
                        }
                        else { }
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }
                });
            } else {
                $.alert({
                    title: 'Recon',
                    content: 'Do not have option to save this field',
                    type: 'red',
                });
            }

        }
        catch (e) {
            console.log(e)
        }
    }

    function savecolfilter() {
        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        var modelArr = [];
        var grid = $("#grid_colfilter").data("kendoGrid");
        var colfilterData = $("#grid_colfilter").data().kendoGrid.dataSource.view();
        var checkedrows = $("#display_sel:checked", grid.tbody).closest("tr");
        var data = {};
        for (var i = 0; i < colfilterData.length; i++) {
            var dataItem = colfilterData[i];
            var display_flag = "N";
            if (checkedrows.is(grid.tbody.find("tr:eq(" + i + ")"))) {
                display_flag = "Y";
            }
            modelArr.push({
                in_reporttemplatefield_gid: 0,
                in_reporttemplate_code: $("#reporttemplate_code").val(),
                in_report_field: dataItem.report_field,
                in_display_flag: display_flag,
                in_display_desc: dataItem.display_desc,
                in_display_order: dataItem.display_order,
                in_active_status: 'Y',
                in_action_by: txtusername.user_name,
            });
        }
        data.templateJSON = JSON.stringify(modelArr);
        data.in_reporttemplate_code = $("#reporttemplate_code").val();
        if (data.templateJSON) {
            $.ajax({
                url: '@Url.Action("reporttemplatefield", "Reports")',
                type: "post",
                data: JSON.stringify(data),
                contentType: "application/json",
                success: function (data) {
                    var result = JSON.parse(data);
                    if (result[0].out_result == 1 || result[0].out_result == "1") {
                        $.alert({
                            title: 'Recon',
                            content: result[0].out_msg,
                            type: 'green',
                        });
                        detailfetch();
                    } else {
                        $.alert({
                            title: 'Recon',
                            content: 'Something went wrong..! Please try after sometime..!',
                            type: 'red',
                        });
                    }
                },
                error: function (er) {
                    $.alert({
                        title: 'Recon',
                        content: 'Failed.!, Try After Sometime',
                        type: 'green',
                    });
                }
            });
        } else {
            $.alert({
                title: 'Recon',
                content: 'Required fileds are missing',
                type: 'green',
            });
        }

    }

    function myDeleteJs() {
        var grid = $("#grid_tempfilter").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        if (model.system_flag != 'Y') {
            var reporttemplatefilter_gid = parseInt(model.reporttemplatefilter_gid);
            if (reporttemplatefilter_gid == 0) {
                grid.dataSource.remove(model);
            } else {
                $.confirm({
                    icon: 'fa fa-warning',
                    title: 'Recon',
                    autoClose: 'cancel|10000',
                    theme: 'dark',
                    animationSpeed: 700,
                    content: 'Are you sure do you want to delete this record!',
                    type: 'orange',
                    buttons: {
                        confirm: function () {
                            var data = {};
                            data.in_reporttemplatefilter_gid = parseInt(model.reporttemplatefilter_gid);
                            data.in_reporttemplate_code = $("#reporttemplate_code").val();
                            data.in_filter_seqno = model.filter_seqno;
                            data.in_report_field = model.reporttemplate_code;
                            data.in_filter_criteria = model.filter_criteria;
                            data.in_filter_value = model.filter_value;
                            data.in_join_condition = model.join_condition;
                            data.in_action = 'DELETE'
                            data.in_active_status = 'Y';
                            data.in_open_parentheses_flag = "";
                            data.in_close_parentheses_flag = "";
                            $.ajax({
                                type: "POST",
                                url: '../Reports/reporttemplatefilter',
                                dataType: 'json',
                                data: JSON.stringify(data),
                                contentType: 'application/json; charset=utf-8',
                                success: function (response) {
                                    if (response != null) {
                                        var res = JSON.parse(response);
                                        if (res.length > 0) {
                                            $.alert({
                                                title: 'Recon',
                                                content: res[0].out_msg,
                                                type: 'green',
                                            });
                                            $("#txtmode").val("Edit");
                                            detailfetch();
                                        }
                                    } else { }
                                }
                            })
                        },
                        cancel: function () {
                            $.alert({
                                icon: 'fa fa-success',
                                title: 'Recon',
                                theme: 'dark',
                                content: 'Delete Canceled.!',
                                type: 'blue',
                                animationSpeed: 700,
                            });
                        },
                    }
                });
            }
        } else {
            $.alert({
                title: 'Recon',
                content: 'Do not have option to delete this field.!',
                type: 'green',
            });
        }

    }

    function deleteSort() {
        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        var grid = $("#grid_sorting").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var reporttemplatesorting_gid = parseInt(model.reporttemplatesorting_gid);
        if (reporttemplatesorting_gid == 0) {
            grid.dataSource.remove(model);
        } else {
            $.confirm({
                icon: 'fa fa-warning',
                title: 'Recon',
                autoClose: 'cancel|10000',
                theme: 'dark',
                animationSpeed: 700,
                content: 'Are you sure do you want to delete this record!',
                type: 'orange',
                buttons: {
                    confirm: function () {
                        var data = {};
                        data.in_reporttemplatesorting_gid = model.reporttemplatesorting_gid;
                        data.in_reporttemplate_code = $("#reporttemplate_code").val();
                        data.in_report_field = model.report_field;
                        data.in_sorting_order = model.sorting_order;
                        data.in_active_status = 'Y';
                        data.in_action = 'DELETE';
                        data.in_action_by = txtusername.user_name,
                            data.in_delete_flag = 'N'
                        $.ajax({
                            url: '@Url.Action("reporttemplatesorting", "Reports")',
                            type: "post",
                            data: JSON.stringify(data),
                            contentType: "application/json",
                            success: function (data) {
                                var result = JSON.parse(data);
                                if (result[0].out_result == 1 || result[0].out_result == "1") {
                                    $.alert({
                                        title: 'Recon',
                                        content: result[0].out_msg,
                                        type: 'green',
                                    });
                                    $("#txtmode").val("Edit");
                                    detailfetch();
                                } else {
                                    $.alert({
                                        title: 'Recon',
                                        content: 'Something went wrong..! Please try after sometime..!',
                                        type: 'red',
                                    });
                                }
                            },
                            error: function (er) {
                                $.alert({
                                    title: 'Recon',
                                    content: 'Failed.!, Please try after sometime .!',
                                    type: 'green',
                                });
                            }
                        });
                    },
                    cancel: function () {
                        $.alert({
                            icon: 'fa fa-success',
                            title: 'Recon',
                            theme: 'dark',
                            content: 'Delete Canceled.!',
                            type: 'blue',
                            animationSpeed: 700,
                        });
                    },
                }
            });
        }
    }

    function saveheader() {
        if ($("#reporttemplate_gid").val() == '0' || $("#reporttemplate_gid").val() == 0) {
            var data = {};
            data.in_reporttemplate_gid = $("#reporttemplate_gid").val();
            data.in_reporttemplate_code = $("#reporttemplate_code").val();
            data.in_reporttemplate_name = $("#rt_name").val();
            data.in_report_code = $("#cmbreporttype").val();
            data.in_recon_code = $("#cmbreconname").val();
            data.in_system_flag = 'N';
            data.in_action = 'INSERT';
            data.in_active_status = 'Y';
            data.in_sortby_code = $("input[name='sortOrder']:checked").val();
            if (data.in_reporttemplate_name && data.in_report_code && data.in_recon_code) {
                $.ajax({
                    type: "POST",
                    url: '../Reports/reporttemplate',
                    dataType: 'json',
                    data: JSON.stringify(data),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        var result = JSON.parse(response);
                        if (result.length > 0) {
                            if (result[0].out_result == '1') {
                                $.alert({
                                    title: 'Recon',
                                    content: result[0].out_msg,
                                    type: 'green',
                                });
                                var constdata = {};

                                constdata.recon_code = $("#cmbreconname").val();
                                constdata.report_code = $("#cmbreporttype").val();
                                constdata.reporttemplate_code = result[0].in_reporttemplate_code;
                                setlocalStorage("selectedTemplate", constdata);
                                setlocalStorage("ls_pageList", result[0].in_reporttemplate_code);
                                setlocalStorage("temp_gid", result[0].in_reporttemplate_gid);
                                btn_onClick("Edit");
                                $("#reporttemplate_code").val(result[0].in_reporttemplate_code);
                                $("#txtmode").val("Create");
                                $("#txtstatus").val("Active");
                                $("#reporttemplate_gid").val(result[0].in_reporttemplate_gid);
                                $("#cmbreporttype").prop("disabled", true);
                                $("#clonereport").prop('disabled', true);
                                $("#cmbreconname").prop('disabled', true);
                                $("#btnclone").prop('disabled', true);
                                detailfetch();
                                addRow();

                            } else {
                                $.alert({
                                    title: 'Recon',
                                    content: result[0].out_msg,
                                    type: 'red',
                                });
                            }
                        }
                    }
                });
            } else if (!data.in_reporttemplate_name) {
                $.alert({
                    title: 'Recon',
                    content: 'Custom Template Name should not be empty',
                    type: 'red',
                });
            }
            else if (!data.in_report_code) {
                $.alert({
                    title: 'Recon',
                    content: 'Please Select Report',
                    type: 'red',
                });
            } else if (!data.in_recon_code) {
                $.alert({
                    title: 'Recon',
                    content: 'Recon Name should not be empty',
                    type: 'red',
                });
            }
        } else {
            addRow();
            return;
        }

    }


    function saveheadersubmit() {
        var data = {};
        data.in_reporttemplate_gid = $("#reporttemplate_gid").val();
        data.in_reporttemplate_code = $("#reporttemplate_code").val();
        data.in_reporttemplate_name = $("#rt_name").val();
        data.in_report_code = $("#cmbreporttype").val();
        data.in_recon_code = $("#cmbreconname").val();
        data.in_system_flag = 'N';
        data.in_action = $("#reporttemplate_gid").val() == '0' ? 'INSERT' : 'UPDATE';
        data.in_active_status = 'Y';
        data.in_sortby_code = $("input[name='sortOrder']:checked").val();
        if (data.in_reporttemplate_name && data.in_report_code && data.in_recon_code) {
            $.ajax({
                type: "POST",
                url: '../Reports/reporttemplate',
                dataType: 'json',
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    var result = JSON.parse(response);
                    if (result.length > 0) {
                        if (result[0].out_result == '1') {
                            $.alert({
                                title: 'Recon',
                                content: result[0].out_msg,
                                type: 'green',
                            });
                            if (data.in_action = 'INSERT') {
                                var constdata = {};
                                constdata.recon_code = $("#cmbreconname").val();
                                constdata.report_code = $("#cmbreporttype").val();
                                constdata.reporttemplate_code = result[0].in_reporttemplate_code;
                                setlocalStorage("selectedTemplate", constdata);
                                setlocalStorage("ls_pageList", result[0].in_reporttemplate_code);
                                setlocalStorage("temp_gid", result[0].in_reporttemplate_gid);
                                $("#btnclone").prop('disabled', true);
                                btn_onClick("Edit");
                                $("#reporttemplate_code").val(result[0].in_reporttemplate_code);
                                $("#txtmode").val("Create");
                                $("#txtstatus").val("Active");
                                $("#reporttemplate_gid").val(result[0].in_reporttemplate_gid);
                                $("#cmbreporttype").prop("disabled", true);
                            } else {
                                btn_onClick("Edit");
                                $("#txtmode").val("Edit");
                                $("#txtstatus").val("Active");
                            }

                            //detailfetch();
                        } else {
                            $.alert({
                                title: 'Recon',
                                content: result[0].out_msg,
                                type: 'red',
                            });
                        }
                    }
                }
            });
        } else if (!data.in_reporttemplate_name) {
            $.alert({
                title: 'Recon',
                content: 'Custom Template Name Should not be empty',
                type: 'red',
            });
        }
        else if (!data.in_report_code) {
            $.alert({
                title: 'Recon',
                content: 'Please select Report',
                type: 'red',
            });
        } else if (!data.in_recon_code) {
            $.alert({
                title: 'Recon',
                content: 'Recon Name should not be empty',
                type: 'red',
            });
        }
    }

    function saveclone() {
        $.confirm({
            icon: 'fa fa-info',
            title: 'Recon',
            theme: 'dark',
            content: 'Are you sure to Clone ?',
            type: 'orange',
            buttons: {
                confirm: function () {
                    var data = {};
                    data.in_reporttemplate_gid = 0;
                    data.in_clone_reporttemplate_code = $("#clonereport").val();
                    data.in_reporttemplate_name = $("#rt_name").val();
                    data.in_report_code = $("#cmbreporttype").val();
                    data.in_action = 'INSERT';
                    data.in_active_status = 'Y';
                    if (data.in_reporttemplate_name && data.in_clone_reporttemplate_code) {
                        $.ajax({
                            type: "POST",
                            url: '../Reports/clonereporttemplate',
                            dataType: 'json',
                            data: JSON.stringify(data),
                            contentType: 'application/json; charset=utf-8',
                            success: function (response) {
                                var result = JSON.parse(response);
                                if (result.length > 0) {
                                    if (result[0].out_result == '1') {
                                        debugger;
                                        var reconcode = getlocalStorage("ls_pageList");
                                        var constdata = {};
                                        constdata.recon_code = $("#cmbreconname").val();
                                        constdata.report_code = result[0].in_report_code;
                                        constdata.reporttemplate_code = result[0].out_reporttemplate_code;
                                        setlocalStorage("selectedTemplate", constdata);
                                        setlocalStorage("temp_gid", result[0].in_reporttemplate_gid);
                                        $("#txtmode").val("Create");
                                        $("#btnclone").prop('disabled', true);
                                        $("#reporttemplate_gid").val(result[0].in_reporttemplate_gid)
                                        setlocalStorage("ls_pageList", result[0].out_reporttemplate_code);
                                        $("#reporttemplate_code").val(result[0].out_reporttemplate_code);
                                        $.alert({
                                            title: 'Recon',
                                            content: result[0].out_msg,
                                            type: 'green',
                                        });
                                        btn_onClick("Edit");
                                        $("#txtmode").val("Create");
                                        detailfetch();
                                    } else {
                                        $("#txtstatus").val("Active");
                                        $.alert({
                                            title: 'Recon',
                                            content: result[0].out_msg,
                                            type: 'green',
                                        });
                                    }
                                    //detailfetch();
                                }
                                else {
                                    $.alert({
                                        title: 'Recon',
                                        content: 'Something Went wrong .!',
                                        type: 'red',
                                    });
                                }
                            }
                        });
                    } else if (!data.in_reporttemplate_name) {
                        $.alert({
                            title: 'Recon',
                            content: 'Custom Template Name should not be empty',
                            type: 'red',
                        });
                    }
                    else if (!data.in_clone_reporttemplate_code) {
                        $.alert({
                            title: 'Recon',
                            content: 'Please select Clone Custom report template',
                            type: 'red',
                        });
                    }
                },
                cancel: function () {
                    $.alert({
                        icon: 'fa fa-success',
                        title: 'Recon',
                        theme: 'dark',
                        content: 'clone Canceled.!',
                        type: 'blue',
                        animationSpeed: 700,
                    });
                },
            },
        });
    }

    function saveSorting() {
        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        var grid = $("#grid_sorting").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var data = {};
        data.in_reporttemplatesorting_gid = model.reporttemplatesorting_gid ? model.reporttemplatesorting_gid : 0;
        data.in_reporttemplate_code = $("#reporttemplate_code").val();
        data.in_report_field = model.report_field;
        data.in_sorting_order = model.sorting_order;
        data.in_active_status = 'Y';
        data.in_action = model.reporttemplatesorting_gid ? 'UPDATE' : 'INSERT';
        data.in_action_by = txtusername.user_name;
        data.in_delete_flag = 'N'
        $.ajax({
            url: '@Url.Action("reporttemplatesorting", "Reports")',
            type: "post",
            data: JSON.stringify(data),
            contentType: "application/json",
            success: function (data) {
                var result = JSON.parse(data);
                if (result[0].out_result == 1 || result[0].out_result == "1") {
                    $.alert({
                        title: 'Recon',
                        content: result[0].out_msg,
                        type: 'green',
                    });
                    $("#txtmode").val("Edit");
                    detailfetch();
                } else {
                    $.alert({
                        title: 'Recon',
                        content: 'Something went wrong..! Please try after sometime..!',
                        type: 'red',
                    });
                }
            },
            error: function (er) {
                $.alert({
                    title: 'Recon',
                    content: 'Failed, Please try again.!',
                    type: 'green',
                });
            }
        });
    }

    function upload() {

        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        var data = {};
        var formData = new FormData();
        data.in_reporttemplate_code = $("#reporttemplate_code").val();
        data.in_action_by = txtusername.user_name;
        var fileInput = '';
        var filepath = $("#File_Import").val();
        fileInput = document.getElementById('File_Import');
        if (fileInput.files.length > 0) {
            formData.append('file', fileInput.files[0]);
            data.in_file_name = fileInput.files[0].name;
            getFirstSheetNameFromFile(fileInput.files[0])
                .then(firstSheetName => {
                    if (firstSheetName === "Report") {
                        formData.append('in_reporttemplate_code', data.in_reporttemplate_code);
                        formData.append('in_action_by', data.in_action_by);
                        formData.append('in_file_name', data.in_file_name);
                        if (data.in_file_name && data.in_reporttemplate_code) {
                            $.ajax({
                                url: '@Url.Action("uploadreporttempletefile", "Reports")',
                                type: "post",
                                data: formData,
                                processData: false,
                                contentType: false,
                                async: true,
                                success: function (res) {
                                    debugger;
                                    if (res != '') {
                                        var response = JSON.parse(res);
                                        if (response[0].out_result == 1 || response[0].out_result == "1") {
                                            $.alert({
                                                title: 'Recon',
                                                content: response[0].out_msg,
                                                type: 'green',
                                            });
                                            $("#txtmode").val("Edit");
                                            detailfetch();
                                        } else {
                                            $.alert({
                                                title: 'Recon',
                                                content: response[0].out_msg,
                                                type: 'red',
                                            });
                                        }
                                    } else {
                                        $.alert({
                                            title: 'Recon',
                                            content: 'Something went wrong',
                                            type: 'red',
                                        });
                                    }
                                }, error: function (er) {
                                    $.alert({
                                        title: 'Recon',
                                        content: 'Failed, Please try again.!',
                                        type: 'green',
                                    });
                                }
                            });
                        }
                        else if (!data.in_file_name) {
                            $.alert({
                                title: 'Recon',
                                content: 'File Name is missing.!',
                                type: 'green',
                            });
                        }
                        else if (!data.in_reporttemplate_code) {
                            $.alert({
                                title: 'Recon',
                                content: 'Custom Template code is missing.!',
                                type: 'green',
                            });
                        }

                    } else {
                        $.alert({
                            title: 'Recon',
                            content: 'First sheet name should be "Report", Please rename it as "Report"',
                            type: 'red',
                        });
                        return;
                    }
                })
                .catch(error => {
                    console.error("Error reading file:", error);
                });

        }
    }

    function getFirstSheetNameFromFile(file) {
        var reader = new FileReader();

        reader.readAsArrayBuffer(file);

        return new Promise((resolve, reject) => {
            reader.onload = function (e) {
                var data = new Uint8Array(e.target.result);

                if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
                    // Read XLSX and XLS files
                    var workbook = XLSX.read(data, { type: 'array' });
                    var firstSheetName = workbook.SheetNames[0];
                    resolve(firstSheetName);
                } else if (file.name.endsWith('.csv')) {
                    // Read CSV files
                    Papa.parse(file, {
                        complete: function (result) {
                            var firstSheetName = result.meta.fields;
                            var headers = firstSheetName[0]// Assuming the first row contains headers
                            resolve(headers);
                        },
                        error: function (error) {
                            reject(error);
                        }
                    });
                } else {
                    reject("Unsupported file format.");
                }
            };

            reader.onerror = function (error) {
                reject(error);
            };
        });
    }
</script>