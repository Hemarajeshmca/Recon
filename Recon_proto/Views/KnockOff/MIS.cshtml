@{
    ViewBag.title = "KnockOff MIS";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
    <title></title>
    <style>
        .k-grid-header .k-grid-filter .k-i-filter {
            display: inline-block !important; /* Ensure the filter icon is visible */
            visibility: visible !important;
        }

        table {
            width: 100% !important;
        }

        table#grid1 {
            width: 100% !important;
        }

        .custom-excel-button {
            background-color: #4CAF50; /* Green background */
            color: white; /* White font color */
            /*border: none; /* Optional: Remove border */
            padding: 5px 10px; /* Optional: Add padding */
            border-radius: 5px; /* Optional: Rounded corners */
            cursor: pointer; /* Optional: Change cursor to pointer */
        }

        .custom-excel-button:hover {
            background-color: #45a049; /* Darker green on hover */
        }

        th.k-header a.k-link {
            color: #fff !important;
        }

        .k-grid td {
            border: unset !important;
            font-weight: 400;
            line-height: 1em;
            border-left: 1px solid #c5c5c5 !important;
        }

        .k-grid-header th.k-header, .k-filter-row th {
            font-weight: 700 !important;
        }

        .selectedDataset {
            font-size: 13px;
            font-weight: 600;
            color: brown;
        }

        .nav-item.me-2.me-xl-50 {
            margin-right: 33rem !important;
        }

        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-grid.k-widget {
            height: 360px;
        }

        .k-grid-header {
            font-weight: bold;
        }

        .k-content {
            font-weight: normal;
            font-size: 13px;
        }

        .k-widget.k-window {
            padding-top: 35px;
            min-width: 90px;
            min-height: 50px;
            width: 700px !important;
            height: 300px !important;
            top: 180.766px !important;
            /*left: 120px !important;*/
            z-index: 10003;
            left: 300px !important;
        }

        .action-button {
            width: 120px;
            background: #673AB7;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 0px 10px 5px;
            float: right;
            border-radius: 20px;
        }

        .action-button-previous {
            width: 100px;
            background: #616161;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 5px 10px 0px;
            float: right;
            border-radius: 20px;
        }

        .tooltip-container {
            position: relative;
            display: inline-block;
        }

        .info-icon {
            cursor: pointer;
        }

        .tooltip1 {
            display: none;
            position: absolute;
            background-color: lightslategray;
            color: #fff;
            padding: 10px;
            border-radius: 15px;
            white-space: nowrap;
            z-index: 1;
            top: 100%;
            margin-left: -95px;
            transform: translateX(-50%);
        }

        .tooltip-container:hover .tooltip1 {
            display: block;
        }

        .k-grouping-header {
            color: #fff;
        }
    </style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <div class="card-body" style="margin-top:-12px;height: 84%;">
                <div class="row" style="margin-top:10px;margin-bottom: 2%;">

                    <div class="col-sm-2">
                        <label for="" class="form-label">Period From&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                        <div>
                            <input class="cusDate" #datepicker data-role='datepicker' id="period_from" name="period_from" style="width:100%" />
                            <span data-for='valid' class='k-invalid-msg'></span>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <label for="" class="form-label">Period To&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>

                        <div>
                            <input class="cusDate" data-role='datepicker' id="period_to" style="height:25px;width: 100%;" data-bind="value:period_to" /><span data-for='valid' class='k-invalid-msg'></span>
                        </div>
                    </div>
                    <div class="col-md-2">
                        <label for="organization" class="form-label">Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label><br>
                        <select id="reconname" class="form-select form-control" onchange="onc()"> </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label" for="formatDropdown">Grid Display</label>
                        <select class="form-select form-control" id="formatDropdown">
                            <option value="format1" selected>Column-wise</option>
                            <option value="format2">Row-wise</option>
                        </select>
                    </div>
                    <div class="col-md-2">
                        <label class="form-label" for="conversionDropdown">Values In</label>
                        <select class="form-select form-control" id="conversionDropdown">
                            @foreach (var item in ViewBag.ConversionTypes)
                            {
                                <option value="@item.Key">@item.Label</option>
                            }
                        </select>
                    </div>
                    <div class="col-md-2" style="margin-top: 2%;">
                        <button type="button" onclick="run()" class="btn btn-sm save_btn me-2" style="width:40%;margin-top:6px;">
                            View
                        </button> &nbsp;&nbsp;
                        @* <button type="button" onclick="exportexcel()" id="exportExcel" aria-hidden="true" class="btn btn-sm btn-success me-2" style="background: #38b55a;border-color: #38b55a;width:23%;margin-top: 7px">
                            <i class="fa-solid fa-file-excel"></i>
                            </button> *@
                    </div>

                </div>

                <div id="grid"></div>
            </div>
        </div>
    </div>


</body>
</html>
<script>
    $(document).ready(function () {
        // Set the default value from ViewBag
        var defaultType = '@ViewBag.DefaultConversionType';
        $("#conversionDropdown").val(defaultType);
        let decimalPlaces = 2; // Default to 2 decimal places
        var format = " ";
    });
</script>
<script>
    var selected_dataset = '';
    var in_conversion_type = "L";
    $(document).ready(function () {
        $("#navhead").text("KnockOff MIS");
        kendodate_format();
        getreconlist();
        loadGrid();
        $("#exportExcel").hide();
    });

    function getreconlist() {
        var data = {};
        data.in_user_gid = 0;
        data.in_active_status = '';
        data.in_user_code = sessionStorage.getItem("usrname");
        var Context = data;
        $.ajax({
            type: "POST",
            url: '../Recon/Reconlistfetch',
            dataType: 'json',
            async: false,
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var res = JSON.parse(response);
                $("#reconname").empty();
                $("#reconname").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(res, function (index, item) {
                    if (item.active_status == 'Y') {
                        $("#reconname").append($('<option>', {
                            value: item.recon_code,
                            text: item.recon_name
                        }));
                    }
                    $("#reconname").val(sessionStorage.getItem("reconcode"));
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
    }
    function onc() {
        if ($("#reconname").val() != '') {
            sessionStorage.setItem("reconcode", $("#reconname").val());
            sessionStorage.setItem("reconname", $("#reconname :selected").text());
            setcon();
        }
    }
    function run() {
        var fromDate = validateDateFormat($("#period_from").val());
        var toDate = validateDateFormat($("#period_to").val());
        if (fromDate && toDate && $("#reconname").val()) {
            var in_recon_code = $("#reconname").val();
            var period_from = $("#period_from").val();
            var ts = period_from.split("/");
            var pr = ts[2] + "-" + ts[1] + "-" + ts[0];
            var period_to = $("#period_to").val();
            var ts1 = period_to.split("/");
            var pr1 = ts1[2] + "-" + ts1[1] + "-" + ts1[0];
            var in_user_code = sessionStorage.getItem("usrname");
            var in_dataset_formt = $("#formatDropdown").val();//"Format2";
            in_conversion_type = $("#conversionDropdown").val();//"Format2";

            $.ajax({
                type: "POST",
                url: '../KnockOff/runkosum',
                dataType: 'json',
                data: JSON.stringify({ in_recon_code: in_recon_code, in_period_from: pr, in_period_to: pr1, in_ip_addr: '', in_user_code: in_user_code, in_conversion_type: in_conversion_type, in_dataset_formt: in_dataset_formt }),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response) {
                        var res = JSON.parse(response)
                        if (res.Table.length > 0) {

                            loadGrid1(res.Table);
                            $("#exportExcel").show();
                        } else {
                            loadGrid1();
                            $.alert({
                                title: 'Recon',
                                content: "No Records found",
                                type: 'red',
                            });
                        }
                    } else {
                        $.alert({
                            title: 'Recon',
                            content: "Something Went Wrong..!",
                            type: 'red',
                        });
                    }

                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }
            });
        } else if (!fromDate) {
            $.alert({
                title: 'Recon',
                content: "Invalid Date ..!",
                type: 'red',
            });
        } else if (!toDate) {
            $.alert({
                title: 'Recon',
                content: "Invalid Date ..!",
                type: 'red',
            });
        } else if (!$("#reconname").val()) {
            $.alert({
                title: 'Recon',
                content: "Please Select Recon ..!",
                type: 'red',
            });
        }

    }

    function loadGrid1(data) {
        var columns = [];
        var rows = [];
        var groupRows = [];
        var ruleRows = [];
        var totalRows = [];
        var finalRows = [];
        var reconType = "";
        var dataCopy = data;
        var targetHeader = {
            "Row Labels": "Target",
            "Dr Count": null,
            "Dr Value": null,
            "Cr Count": null,
            "Cr Value": null,
            "backcolor": "White",
            "forecolor": "Blue",

        }


        if (dataCopy) {
            var index = 0;
            // Step 1: Separate the data into group, rule, and total rows
            $.each(dataCopy, function (i, e) {
                if (e.backcolor === "White" && e.forecolor === "Blue") {
                    // Group rows (e.g., "Receipt Report")
                    groupRows.push(e);
                    reconType = groupRows.length > 0 ? groupRows[groupRows.length - 1]["recontype"] : null;
                } else if (e.backcolor === "White" && e.forecolor === "Black") {
                    // Rule rows (e.g., "Rule 1 - Cash T+1")
                    var lastGroupRowLabel = groupRows.length > 0 ? groupRows[groupRows.length - 1]["Row Labels"] : null;
                    e["groupRowLabel"] = lastGroupRowLabel;
                    e["groupRowdisplayLabel"] = lastGroupRowLabel;
                    ruleRows.push(e);
                } else if (e.backcolor === "Yellow" && e.forecolor === "Red" && e["Row Labels"] === "Sub Total") {
                    // Total rows (e.g., "Sub Total")
                    var lastGroupRowLabel = groupRows.length > 0 ? groupRows[groupRows.length - 1]["Row Labels"] : null;
                    e["groupRowLabel"] = lastGroupRowLabel;
                    e["groupRowdisplayLabel"] = lastGroupRowLabel;
                    totalRows.push(e);
                }
            });

            groupRows.push(targetHeader);

            if (reconType == "B") {
                if ($("#formatDropdown").val() == "format1") {
                    renderGroupedGrid_Contra(ruleRows, totalRows);
                }
                else {
                    renderGroupedGridpivot(ruleRows, totalRows);
                }

            } else if (reconType == "I") {

                if ($("#formatDropdown").val() == "format1") {
                    renderGroupedGrid_Mirror(ruleRows, totalRows);
                }
                else {
                    renderGroupedGridpivot(ruleRows, totalRows);
                }
            } else if (reconType == "N") {
                //renderGroupedGridNonvaluebase(ruleRows, totalRows);
                if ($("#formatDropdown").val() == "format1") {
                    renderGroupedGridNVB(ruleRows, totalRows);
                }
                else {
                    renderGroupedGridNVBpivot(ruleRows, totalRows);
                }
            } else if (reconType == "V") {
                if ($("#formatDropdown").val() == "format1") {
                    renderGroupedGridValuebase(ruleRows, totalRows);
                }
                else {
                    renderGroupedGridVBpivot(ruleRows, totalRows);
                }
            } else {

                if ($("#formatDropdown").val() == "format1") {
                    renderGroupedGrid(ruleRows, totalRows);
                }
                else {
                    renderGroupedGridpivot(ruleRows, totalRows);
                }
            }
        }
    }

    function renderGroupedGrid_Contra(datas, totalRows) {
        // Preprocess the data: Replace empty spaces in string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key === "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel };
            let totalNetValue = 0; // Initialize total for Net columns

            groupLabels.forEach(group => {
                const rowData = data.find(d => d["Row Labels"] === rowLabel && d.groupRowLabel === group);
                //const netValue = rowData ? (parseFloat(rowData["Cr Value"] || 0) - parseFloat(rowData["Dr Value"] || 0)) : 0;
                const netValue = rowData ? (parseFloat(Number(kendo.toString(rowData["Formal Cr Value"]).split(" ")[0]) || decimalFixed(in_conversion_type, 0.000000)) - parseFloat(Number(kendo.toString(rowData["Formal Dr Value"]).split(" ")[0]) || decimalFixed(in_conversion_type, 0.000000))) : decimalFixed(in_conversion_type, 0.000000);
                row[`${group}_Dr_Count`] = rowData ? rowData["Dr Count"] : "0";
                //row[`${group}_Dr_Value`] = rowData ? rowData["Dr Value"] : "0";
                row[`${group}_Dr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Dr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Dr_Value`] = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                format = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : format;
                decimalPlaces = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[2] : decimalPlaces;
                row[`${group}_Cr_Count`] = rowData ? rowData["Cr Count"] : "0";
                //row[`${group}_Cr_Value`] = rowData ? rowData["Cr Value"] : "0";
                row[`${group}_Cr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Cr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Cr_Value`] = rowData ? kendo.toString(rowData["Formal Cr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                row[`${group}_Net_Value`] = parseFloat(decimalFixed(in_conversion_type, netValue));
                totalNetValue += netValue;
            });

            row["Contra"] = parseFloat(decimalFixed(in_conversion_type, totalNetValue)); //totalNetValue.toFixed(3); // Add Contra column value
            return row;
        });
        // Define grid columns dynamically with aggregate functions
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 250,
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: black;" },
                footerTemplate: "Total", // Include the text 'Total' in the footer
                locked: true // Freeze the first column
            }
        ];

        // Prepare aggregates dynamically
        const aggregates = [];
        groupLabels.forEach(group => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center;  background-color: blue; color: white;"
                },
                columns: [
                    {
                        field: `${group}_Dr_Count`,
                        title: "Dr",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" }
                    },
                    {
                        field: `${group}_Dr_Value`,
                        title: `Dr ${format}`,
                        width: 100,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" },

                    },
                    {
                        field: `${group}_Cr_Count`,
                        title: "Cr",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" }
                    },
                    {
                        field: `${group}_Cr_Value`,
                        title: `Cr ${format}`,
                        width: 100,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" }
                    },
                    {
                        field: `${group}_Net_Value`,
                        title: `Net Value${format}`,
                        width: 100,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" }
                    }
                ]
            });

            // Dynamically add the aggregates for this group
            aggregates.push(
                { field: `${group}_Dr_Count`, aggregate: "sum" },
                { field: `${group}_Dr_Value`, aggregate: "sum" },
                { field: `${group}_Cr_Count`, aggregate: "sum" },
                { field: `${group}_Cr_Value`, aggregate: "sum" },
                { field: `${group}_Net_Value`, aggregate: "sum" }
            );
        });

        // Add Contra column to grid configuration
        columns.push({
            field: "Contra",
            title: "Control Check",
            width: 100,
            attributes: { style: "text-align:right;" },
            headerAttributes: { style: "text-align:center; font-weight: bold; background-color: red; color: white;" },
            aggregates: ["sum"],
            //footerTemplate: "#= kendo.toString(sum, 'n2') #",
            format: `{0:N${decimalPlaces}}`,
            footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
            footerAttributes: { style: "text-align:right;" }
        });

        aggregates.push({ field: "Contra", aggregate: "sum" });

        // Initialize Kendo Grid with footer for Grand Total
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:100%;"></table></div>');

        $("#grid1").kendoGrid({
            dataSource: {
                data: gridData,
                aggregate: aggregates,
                schema: {
                    model: {
                        fields: {
                            Contra: { type: "number" },
                            ...groupLabels.reduce((acc, group) => {
                                acc[`${group}_Dr_Count`] = { type: "number" };
                                acc[`${group}_Dr_Value`] = { type: "number" };
                                acc[`${group}_Cr_Count`] = { type: "number" };
                                acc[`${group}_Cr_Value`] = { type: "number" };
                                acc[`${group}_Net_Value`] = { type: "number" };
                                return acc;
                            }, {})
                        }
                    }
                }
            },
            height: 400,
            sortable: false,
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            }, excelExport: function (e) {
                var sheet = e.workbook.sheets[0];

                // Loop through rows to find all footer rows
                sheet.rows.forEach(function (row) {
                    if (row.type === "footer") { // Check if the row is a footer row
                        row.cells.forEach(function (cell) {
                            cell.hAlign = "right"; // Set horizontal alignment to right for all footer cells
                            if (!cell.font) {
                                cell.font = {}; // Ensure font object exists
                            }
                            cell.font.bold = true;
                        });
                    }
                });
            }

        });
    }


    function renderGroupedGrid_Mirror(datas, totalRows) {
        let decimalPlaces = 2; // Default to 2 decimal places
        // Preprocess the data: Replace empty spaces in string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key === "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel };
            let totalNetValue = 0; // Initialize total for Net columns

            groupLabels.forEach((group, index) => {
                const rowData = data.find(d => d["Row Labels"] === rowLabel && d.groupRowLabel === group);
                //const netValue = rowData ? (parseFloat(rowData["Cr Value"] || 0) - parseFloat(rowData["Dr Value"] || 0)) : 0;
                const netValue = rowData ? (parseFloat(Number(kendo.toString(rowData["Formal Cr Value"]).split(" ")[0]) || decimalFixed(in_conversion_type, 0.000000)) - parseFloat(Number(kendo.toString(rowData["Formal Dr Value"]).split(" ")[0]) || decimalFixed(in_conversion_type, 0.000000))) : decimalFixed(in_conversion_type, 0.000000);
                row[`${group}_Dr_Count`] = rowData ? rowData["Dr Count"] : "0";
                //row[`${group}_Dr_Value`] = rowData ? rowData["Dr Value"] : "0";
                row[`${group}_Dr_Value`] = rowData ? parseFloat(parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Dr Value"]).split(" ")[0])))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Dr_Value`] = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                format = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : format;
                decimalPlaces = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[2] : decimalPlaces;
                row[`${group}_Cr_Count`] = rowData ? rowData["Cr Count"] : "0";
                //row[`${group}_Cr_Value`] = rowData ? rowData["Cr Value"] : "0";
                row[`${group}_Cr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Cr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Cr_Value`] = rowData ? kendo.toString(rowData["Formal Cr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                row[`${group}_Net_Value`] = parseFloat(decimalFixed(in_conversion_type, netValue)); //netValue.toFixed(3);
                if (index == 0) {
                    totalNetValue += netValue;
                } else {
                    totalNetValue -= netValue;
                }

            });

            row["Mirror"] = parseFloat(decimalFixed(in_conversion_type, totalNetValue)); //totalNetValue.toFixed(3); // Add Contra column value
            return row;
        });

        // Define grid columns dynamically with aggregate functions
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 250,
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: black;" },
                footerTemplate: "Total", // Include the text 'Total' in the footer
                locked: true // Freeze the first column
            }
        ];

        // Prepare aggregates dynamically
        const aggregates = [];
        groupLabels.forEach(group => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center; background-color: blue; color: white;"
                },
                columns: [
                    {
                        field: `${group}_Dr_Count`,
                        title: "Dr",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" }
                    },
                    {
                        field: `${group}_Dr_Value`,
                        title: `Dr ${format}`,
                        width: 100,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" }
                    },
                    {
                        field: `${group}_Cr_Count`,
                        title: "Cr",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" }
                    },
                    {
                        field: `${group}_Cr_Value`,
                        title: `Cr ${format}`,
                        width: 100,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" }
                    },
                    {
                        field: `${group}_Net_Value`,
                        title: "Net Value",
                        width: 100,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" }
                    }
                ]
            });

            // Dynamically add the aggregates for this group
            aggregates.push(
                { field: `${group}_Dr_Count`, aggregate: "sum" },
                { field: `${group}_Dr_Value`, aggregate: "sum" },
                { field: `${group}_Cr_Count`, aggregate: "sum" },
                { field: `${group}_Cr_Value`, aggregate: "sum" },
                { field: `${group}_Net_Value`, aggregate: "sum" }
            );
        });

        // Add Contra column to grid configuration
        columns.push({
            field: "Mirror",
            title: "Control Check",
            width: 100,
            attributes: { style: "text-align:right;" },
            headerAttributes: { style: "text-align:center; background-color: red; color: white;" },
            aggregates: ["sum"],
            //footerTemplate: "#= sum #",
            format: `{0:N${decimalPlaces}}`,
            footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
            footerAttributes: { style: "text-align:right;" }
        });

        aggregates.push({ field: "Mirror", aggregate: "sum" });

        // Initialize Kendo Grid with footer for Grand Total
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:100%;"></table></div>');

        $("#grid1").kendoGrid({
            dataSource: {
                data: gridData,
                aggregate: aggregates,
                schema: {
                    model: {
                        fields: {
                            Mirror: { type: "number" },
                            ...groupLabels.reduce((acc, group) => {
                                acc[`${group}_Dr_Count`] = { type: "number" };
                                acc[`${group}_Dr_Value`] = { type: "number" };
                                acc[`${group}_Cr_Count`] = { type: "number" };
                                acc[`${group}_Cr_Value`] = { type: "number" };
                                acc[`${group}_Net_Value`] = { type: "number" };
                                return acc;
                            }, {})
                        }
                    }
                }
            },
            height: 400,
            sortable: false,
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            }, excelExport: function (e) {
                var sheet = e.workbook.sheets[0];

                // Loop through rows to find all footer rows
                sheet.rows.forEach(function (row) {
                    if (row.type === "footer") { // Check if the row is a footer row
                        row.cells.forEach(function (cell) {
                            cell.hAlign = "right"; // Set horizontal alignment to right for all footer cells
                            if (!cell.font) {
                                cell.font = {}; // Ensure font object exists
                            }
                            cell.font.bold = true;
                        });
                    }
                });
            }
        });
    }


    function renderGroupedGrid(datas, totalRows) {
        // Preprocess the data: replace empty spaces in all string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key === "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel };
            let totalNetValue = 0; // Initialize total for Net columns

            groupLabels.forEach(group => {
                const rowData = data.find(d => d["Row Labels"] === rowLabel && d.groupRowLabel === group);
                row[`${group}_Dr_Count`] = rowData ? rowData["Dr Count"] : "0";
                //row[`${group}_Dr_Value`] = rowData ? rowData["Dr Value"] : "0";
                //row[`${group}_Formal_Dr_Value`] = rowData ? rowData["Formal Dr Value"] : "0";
                row[`${group}_Dr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Dr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Dr_Value`] = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                format = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : format;
                decimalPlaces = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[2] : decimalPlaces;
                row[`${group}_Cr_Count`] = rowData ? rowData["Cr Count"] : "0";
                //row[`${group}_Cr_Value`] = rowData ? rowData["Cr Value"] : "0";
                //row[`${group}_Formal_Cr_Value`] = rowData ? rowData["Formal Cr Value"] : "0";
                row[`${group}_Cr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Cr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Cr_Value`] = rowData ? kendo.toString(rowData["Formal Cr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                //row[`${group}_Net_Value`] = rowData ? rowData["Net Value"] : "0";
                //row[`${group}_Formal_Net_Value`] = rowData ? rowData["Formal Net Value"] : "0";
                row[`${group}_Net_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Net Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Net_Value`] = rowData ? kendo.toString(rowData["Formal Net Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                // Accumulate Net values for the Contra column
                totalNetValue += row[`${group}_Net_Value`]
            });
            row["Contra"] = parseFloat(totalNetValue); // Add Contra column value
            return row;
        });

        // Add "Sub Total" row dynamically
        const totalRowData = totals.find(t => t["Row Labels"] === "SubTotal") || {}; // Get 'Total' data from totalRows
        const subTotalRow = {
            RowLabel: "Total",
            backcolor: totalRowData.backcolor || "yellow",  // Use dynamic color if available
            forecolor: totalRowData.forecolor || "red"     // Use dynamic color if available
        };
        groupLabels.forEach(group => {
            const total = totals.find(t => t.groupRowLabel === group);
            subTotalRow[`${group}_Dr_Count`] = total ? total["Dr Count"] : "0";
            subTotalRow[`${group}_Dr_Value`] = total ? total["Dr Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Formal_Dr_Value`] = total ? total["Formal Dr Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Cr_Count`] = total ? total["Cr Count"] : "0";
            subTotalRow[`${group}_Cr_Value`] = total ? total["Cr Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Formal_Cr_Value`] = total ? total["Formal Cr Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Net_Value`] = total ? total["Net Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Formal_Net_Value`] = total ? total["Formal Net Value"] : decimalFixed(in_conversion_type, 0.000000);
        });

        // Push the subTotalRow to gridData only once
        //gridData.push(subTotalRow);

        // Define grid columns dynamically with aggregate functions
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 250,
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;" },
                footerTemplate: "Total", // Include the text 'Total' in the footer
                locked: true // Freeze the first column
            }
        ];

        // Prepare aggregates dynamically
        const aggregates = [];
        groupLabels.forEach(group => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center; font-weight: bold; background-color: blue; color: white;"  // Apply blue color to the group label
                },
                columns: [
                    {
                        field: `${group}_Dr_Count`,
                        title: "Dr",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Dr_Value`,
                        title: `Dr ${format}`,
                        width: 100,
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Formal_Dr_Value`,
                        title: `Dr ${format}`,
                        width: 100,
                        hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Cr_Count`,
                        title: "Cr",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Cr_Value`,
                        title: `Cr ${format}`,
                        width: 100,
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #", // Format the sum to 2 decimal places
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Formal_Cr_Value`,
                        title: `Cr ${format}`,
                        width: 100,
                        hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Net_Value`,
                        title: `Net Value${format}`,
                        width: 100,
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Formal_Net_Value`,
                        title: `Net Values${format}`,
                        width: 100,
                        hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    }
                ]
            });

            // Dynamically add the aggregates for this group
            aggregates.push(
                { field: `${group}_Dr_Count`, aggregate: "sum" },
                { field: `${group}_Dr_Value`, aggregate: "sum" },
                { field: `${group}_Formal_Dr_Value`, aggregate: "sum" },
                { field: `${group}_Cr_Count`, aggregate: "sum" },
                { field: `${group}_Cr_Value`, aggregate: "sum" },
                { field: `${group}_Formal_Cr_Value`, aggregate: "sum" },
                { field: `${group}_Net_Value`, aggregate: "sum" },
                { field: `${group}_Formal_Net_Value`, aggregate: "sum" },
                { field: `Contra`, aggregate: "sum" }
            );
        });

        // Initialize Kendo Grid with footer for Grand Total
        var gridConfig = {
            dataSource: {
                data: gridData,
                aggregate: aggregates,
                schema: {
                    model: {
                        fields: {
                            ...groupLabels.reduce((acc, group) => {
                                acc[`${group}_Dr_Count`] = { type: "number" };
                                acc[`${group}_Dr_Value`] = { type: "number" };
                                acc[`${group}_Cr_Count`] = { type: "number" };
                                acc[`${group}_Cr_Value`] = { type: "number" };
                                acc[`${group}_Net_Value`] = { type: "number" };
                                return acc;
                            }, {})
                        }
                    }
                }
            },
            height: 400,
            width: "auto", // Set the grid width to 100% of its container
            sortable: false,
            scrollable: {
                virtual: false
            },
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            }, excelExport: function (e) {
                var sheet = e.workbook.sheets[0];

                // Loop through rows to find all footer rows
                sheet.rows.forEach(function (row) {
                    if (row.type === "footer") { // Check if the row is a footer row
                        row.cells.forEach(function (cell) {
                            cell.hAlign = "right"; // Set horizontal alignment to right for all footer cells
                            if (!cell.font) {
                                cell.font = {}; // Ensure font object exists
                            }
                            cell.font.bold = true;
                        });
                    }
                });
            }
        };

        // Initialize the grid
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:100%;"></table></div>');

        var timeEditGrid = $("#grid1").kendoGrid(gridConfig).data("kendoGrid");
    }


    function renderGroupedGridpivot(datas, totalRows) {
        // Preprocess the data: replace empty spaces in all string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key === "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        groupLabel.push("Target");
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"] + "&$~^" + d["Target Labels"]))];

        // Extract target labels if available
        const targetLabels = [...new Set(data.map(d => d["Target Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel.split("&$~^")[0] };
            let totalNetValue = 0; // Initialize total for Net columns rowLabel.split('&$~^')[0]

            groupLabels.forEach(group => {
                if (group != "Target") {
                    const rowData = data.find(d => d["Row Labels"] + "&$~^" + d["Target Labels"] === rowLabel && d.groupRowLabel === group);
                    //row[`${group}_Dr_Count`] = rowData ? rowData["Dr Count"] : "0";
                    row[`${group}_Dr_Count`] = rowData ? Number(rowData["Dr Count"]) : 0;

                    // row[`${group}_Dr_Value`] = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[0] : "0.00";
                    row[`${group}_Dr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Dr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                    //row[`${group}_Formal_Dr_Value`] = rowData ? rowData["Formal Dr Value"] : "0.00";
                    row[`${group}_Formal_Dr_Value`] = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                    format = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[1] : format;
                    decimalPlaces = rowData ? kendo.toString(rowData["Formal Dr Value"]).split(" ")[2] : decimalPlaces;
                    row[`${group}_Cr_Count`] = rowData ? rowData["Cr Count"] : "0";
                    //row[`${group}_Cr_Value`] = rowData ? rowData["Cr Value"] : "0";
                    row[`${group}_Cr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Cr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                    row[`${group}_Formal_Cr_Value`] = rowData ? kendo.toString(rowData["Formal Cr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                    row[`${group}_Net_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, rowData["Cr Value"])) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                    row[`${group}_Formal_Net_Value`] = rowData ? rowData["Formal Cr Value"] : decimalFixed(in_conversion_type, 0.000000);
                    //row["TargetDataSet"] = rowData ? rowData["Target Labels"] : "-";

                } else {
                    const rowData = data.find(d => d["Row Labels"] + "&$~^" + d["Target Labels"] === rowLabel && d.groupTargetRowLabel === group);
                    //row[`${group}_Dr_Count`] = rowData ? rowData["Target Dr Count"] : "0";
                    row[`${group}_Dr_Count`] = rowData ? Number(rowData["Target Dr Count"]) : 0;

                    //row[`${group}_Dr_Value`] = rowData ? rowData["Target Dr Value"] : "0.00";
                    row[`${group}_Dr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Target Formal Dr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                    row[`${group}_Cr_Count`] = rowData ? rowData["Target Cr Count"] : "0";
                    //row[`${group}_Cr_Value`] = rowData ? rowData["Target Cr Value"] : "0.00";
                    row[`${group}_Cr_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Target Formal Cr Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                    row[`${group}_Formal_Dr_Value`] = rowData ? kendo.toString(rowData["Target Formal Dr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                    row[`${group}_Formal_Cr_Value`] = rowData ? kendo.toString(rowData["Target Formal Cr Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                    //row = { "TargetDataSet": rowData ? rowData["Target Formal Cr Value"] : "-" };
                    row["TargetDataSet"] = rowData ? rowData["Target Labels"] : "-";
                }
                // Accumulate Net values for the Contra column
                totalNetValue += parseFloat(row[`${group}_Net_Value`]) || decimalFixed(in_conversion_type, 0.000000);;
                //row["TargetDataSet"] = rowData ? rowData["Target"] : "-";
            });
            row["Contra"] = parseFloat(totalNetValue); // Add Contra column value

            // Add Target Labels if available
            row["Target_Labels"] = targetLabels.join(", "); // Join all target labels into a single field

            return row;
        });

        // Add "Sub Total" row dynamically
        const totalRowData = totals.find(t => t["Row Labels"] === "SubTotal") || {}; // Get 'Total' data from totalRows
        const subTotalRow = {
            RowLabel: "Total",
            backcolor: totalRowData.backcolor || "yellow",  // Use dynamic color if available
            forecolor: totalRowData.forecolor || "red"     // Use dynamic color if available
        };
        groupLabels.forEach(group => {
            const total = totals.find(t => t.groupRowLabel === group);
            subTotalRow[`${group}_Dr_Count`] = total ? total["Dr Count"] : "0";
            subTotalRow[`${group}_Dr_Value`] = total ? total["Dr Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Formal_Dr_Value`] = total ? "C" : "C";
            subTotalRow[`${group}_Cr_Count`] = total ? total["Cr Count"] : "0";
            subTotalRow[`${group}_Cr_Value`] = total ? total["Cr Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Formal_Cr_Value`] = total ? "C" : "C";
            subTotalRow[`${group}_Net_Value`] = total ? total["Net Value"] : decimalFixed(in_conversion_type, 0.000000);
            subTotalRow[`${group}_Formal_Net_Value`] = total ? total["Formal Net Value"] : decimalFixed(in_conversion_type, 0.000000);
        });

        // Define grid columns dynamically with aggregate functions
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 250,
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;type:number" },
                footerTemplate: "Total", // Include the text 'Total' in the footer
                locked: true,// Freeze the first column
                filterable: true,
            }
            // {
            //     field: "TargetDataSet",
            //     title: "Target Data Set",
            //     width: 400,
            //     headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;" },
            //     //footerTemplate: "Total", // Include the text 'Total' in the footer
            //     locked: true // Freeze the first column
            // }
        ];

        // Prepare aggregates dynamically
        const aggregates = [];
        groupLabels.forEach((group, index) => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center; font-weight: bold; background-color: blue; color: white;"  // Apply blue color to the group label
                },
                columns: [
                    // Previous group column definitions remain the same
                    {
                        field: `${group}_Dr_Count`,
                        title: "Dr",
                        width: 80,
                        type: "number",
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" },
                        locked: index === 0, // Lock the first group column
                        filterable: true,
                    },
                    {
                        field: `${group}_Dr_Value`,
                        title: `Dr ${format}`,
                        width: 100,
                        type: "number",
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" },
                        locked: index === 0, // Lock the first group column
                        filterable: true,
                    },
                    {
                        field: `${group}_Formal_Dr_Value`,
                        title: "Units",
                        width: 50,
                        attributes: { style: "text-align:center;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: [],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "C",
                        footerAttributes: { style: "text-align:right;" },
                        locked: index === 0, // Lock the first group column
                        filterable: true,
                        hidden: true,
                    },
                    {
                        field: `${group}_Cr_Count`,
                        title: "Cr",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" },
                        locked: index === 0, // Lock the first group column
                        filterable: true,
                    },
                    {
                        field: `${group}_Cr_Value`,
                        title: `Cr ${format}`,
                        width: 100,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "#= kendo.toString(sum, 'n2') #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" },
                        locked: index === 0, // Lock the first group column
                        filterable: true,
                    },
                    {
                        field: `${group}_Formal_Cr_Value`,
                        title: "Units",
                        width: 50,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: [],
                        //footerTemplate: "#= sum #",
                        //footerTemplate: "C",
                        footerAttributes: { style: "text-align:right;" },
                        locked: index === 0, // Lock the first group column
                        filterable: true,
                        hidden: true,
                    },
                ]
            });

            // Dynamically add the aggregates for this group
            aggregates.push(
                { field: `${group}_Dr_Count`, aggregate: "sum" },
                { field: `${group}_Dr_Value`, aggregate: "sum" },
                // { field: `${group}_Formal_Dr_Value`, null },
                { field: `${group}_Cr_Count`, aggregate: "sum" },
                { field: `${group}_Cr_Value`, aggregate: "sum" },
                //{ field: `${group}_Formal_Cr_Value`,null },
                { field: `${group}_Net_Value`, aggregate: "sum" },
                { field: `${group}_Formal_Net_Value`, aggregate: "sum" }
            );
        });

        columns.push({
            field: "TargetDataSet",
            title: "Target Data Set",
            width: 250,
            headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;" },
            filterable: true
        });
        // Initialize Kendo Grid with footer for Grand Total
        var gridConfig = {
            dataSource: {
                data: gridData,
                aggregate: aggregates,
                schema: {
                    model: {
                        fields: {
                            ...groupLabels.reduce((acc, group) => {
                                acc[`${group}_Dr_Count`] = { type: "number" };
                                acc[`${group}_Dr_Value`] = { type: "number" };
                                acc[`${group}_Cr_Count`] = { type: "number" };
                                acc[`${group}_Cr_Value`] = { type: "number" };
                                return acc;
                            }, {})
                        }
                    }
                }
            },
            group: [{ field: "TargetDataSet" }], // Grouping by Target Labels
            height: 400,
            width: "auto", // Set the grid width to 100% of its container
            sortable: true,
            groupable: true, // Enables grouping
            scrollable: {
                virtual: true
            },
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            }, excelExport: function (e) {
                var sheet = e.workbook.sheets[0];

                // Loop through rows to find all footer rows
                sheet.rows.forEach(function (row) {
                    if (row.type === "footer") { // Check if the row is a footer row
                        row.cells.forEach(function (cell) {
                            cell.hAlign = "right"; // Set horizontal alignment to right for all footer cells
                            if (!cell.font) {
                                cell.font = {}; // Ensure font object exists
                            }
                            cell.font.bold = true;
                        });
                    }
                });
            }
        };

        // Initialize the grid
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:100%;"></table></div>');

        var timeEditGrid = $("#grid1").kendoGrid(gridConfig).data("kendoGrid");
    }


    function renderGroupedGridNVB(datas, totalRows) {
        debugger;
        // Preprocess the data: replace empty spaces in all string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key === "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel };
            let totalNetValue = 0; // Initialize total for Net columns

            groupLabels.forEach(group => {
                const rowData = data.find(d => d["Row Labels"] === rowLabel && d.groupRowLabel === group);
                row[`${group}_Count`] = rowData ? rowData["Count"] : "0";
                row[`${group}_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                row[`${group}_Formal_Value`] = rowData ? kendo.toString(rowData["Formal Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                format = rowData ? kendo.toString(rowData["Formal Value"]).split(" ")[1] : format;
                decimalPlaces = rowData ? kendo.toString(rowData["Formal Value"]).split(" ")[2] : decimalPlaces;
            });
            return row;
        });

        // Define grid columns dynamically with aggregate functions
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 250,
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;" },
                footerTemplate: "Total", // Include the text 'Total' in the footer
                locked: true // Freeze the first column
            }
        ];

        // Prepare aggregates dynamically
        const aggregates = [];
        groupLabels.forEach(group => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center; font-weight: bold; background-color: blue; color: white;"  // Apply blue color to the group label
                },
                columns: [
                    {
                        field: `${group}_Source_Count`,
                        title: "Source Count",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Source_Value`,
                        title: `Source Value${format}`,
                        width: 100,
                        type: "number",
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Target_Count`,
                        title: "Target Count",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Target_Value`,
                        title: `Target Value${format}`,
                        width: 100,
                        type: "number",
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Total_Count`,
                        title: "Total Count",
                        width: 80,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Total_Value`,
                        title: `Total Value${format}`,
                        width: 100,
                        type: "number",
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    }
                ]
            });

            // Dynamically add the aggregates for this group
            aggregates.push(
                { field: `${group}_Source_Count`, aggregate: "sum" },
                { field: `${group}_Source_Value`, aggregate: "sum" },
                { field: `${group}_Target_Count`, aggregate: "sum" },
                { field: `${group}_Target_Value`, aggregate: "sum" },
                { field: `${group}_Total_Count`, aggregate: "sum" },
                { field: `${group}_Total_Value`, aggregate: "sum" }
            );
        });

        // Initialize Kendo Grid with footer for Grand Total
        var gridConfig = {
            dataSource: {
                data: gridData,
                aggregate: aggregates,
                schema: {
                    model: {
                        fields: {
                            ...groupLabels.reduce((acc, group) => {
                                acc[`${group}_Source_Count`] = { type: "number" };
                                acc[`${group}_Source_Value`] = { type: "number" };
                                acc[`${group}_Target_Count`] = { type: "number" };
                                acc[`${group}_Target_Value`] = { type: "number" };
                                acc[`${group}_Total_Count`] = { type: "number" };
                                acc[`${group}_Total_Value`] = { type: "number" };
                                return acc;
                            }, {})
                        }
                    }
                }
            },
            height: 400,
            width: "auto", // Set the grid width to 100% of its container
            sortable: false,
            scrollable: {
                virtual: false
            },
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            }, excelExport: function (e) {
                var sheet = e.workbook.sheets[0];

                // Loop through rows to find all footer rows
                sheet.rows.forEach(function (row) {
                    if (row.type === "footer") { // Check if the row is a footer row
                        row.cells.forEach(function (cell) {
                            cell.hAlign = "right"; // Set horizontal alignment to right for all footer cells
                            if (!cell.font) {
                                cell.font = {}; // Ensure font object exists
                            }
                            cell.font.bold = true;
                        });
                    }
                });
            }
        };

        // Initialize the grid
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:100%;"></table></div>');

        var timeEditGrid = $("#grid1").kendoGrid(gridConfig).data("kendoGrid");
    }

    function renderGroupedGridNonValuebased(datas, totalRows) {
        debugger;
        // Preprocess the data: replace empty spaces in all string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key === "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel };
            let totalNetValue = 0; // Initialize total for Net columns

            groupLabels.forEach(group => {
                const rowData = data.find(d => d["Row Labels"] === rowLabel && d.groupRowLabel === group);
                row[`${group}_Count`] = rowData ? rowData["Count"] : "0";
                //row[`${group}_Value`] = rowData ? parseFloat(decimalFixed(in_conversion_type, Number(kendo.toString(rowData["Formal Value"]).split(" ")[0]))) : parseFloat(decimalFixed(in_conversion_type, 0.000000));
                //row[`${group}_Formal_Value`] = rowData ? kendo.toString(rowData["Formal Value"]).split(" ")[1] : decimalFixed(in_conversion_type, 0.000000);
                format = rowData ? kendo.toString(rowData["Formal Value"]).split(" ")[1] : format;
                decimalPlaces = rowData ? kendo.toString(rowData["Formal Value"]).split(" ")[2] : decimalPlaces;
            });
            return row;
        });

        // Define grid columns dynamically with aggregate functions
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 500,
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;" },
                footerTemplate: "Total", // Include the text 'Total' in the footer
                locked: true // Freeze the first column
            }
        ];

        // Prepare aggregates dynamically
        const aggregates = [];
        groupLabels.forEach(group => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center; font-weight: bold; background-color: blue; color: white;"  // Apply blue color to the group label
                },
                columns: [
                    {
                        field: `${group}_Count`,
                        title: "Count",
                        width: 150,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        //footerTemplate: "#= sum #",
                        format: `{0:N${decimalPlaces}}`,
                        footerTemplate: `#= kendo.toString(sum || 0, 'N${decimalPlaces}') #`,
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    }
                ]
            });

            // Dynamically add the aggregates for this group
            aggregates.push(
                { field: `${group}_Count`, aggregate: "sum" }
            );
        });

        // Initialize Kendo Grid with footer for Grand Total
        var gridConfig = {
            dataSource: {
                data: gridData,
                aggregate: aggregates,
                schema: {
                    model: {
                        fields: {
                            ...groupLabels.reduce((acc, group) => {
                                acc[`${group}_Count`] = { type: "number" }
                                return acc;
                            }, {})
                        }
                    }
                }
            },
            height: 400,
            width: "auto", // Set the grid width to 100% of its container
            sortable: false,
            scrollable: {
                virtual: false
            },
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            }, excelExport: function (e) {
                var sheet = e.workbook.sheets[0];

                // Loop through rows to find all footer rows
                sheet.rows.forEach(function (row) {
                    if (row.type === "footer") { // Check if the row is a footer row
                        row.cells.forEach(function (cell) {
                            cell.hAlign = "right"; // Set horizontal alignment to right for all footer cells
                            if (!cell.font) {
                                cell.font = {}; // Ensure font object exists
                            }
                            cell.font.bold = true;
                        });
                    }
                });
            }
        };

        // Initialize the grid
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:100%;"></table></div>');

        var timeEditGrid = $("#grid1").kendoGrid(gridConfig).data("kendoGrid");
    }


    function loadGrid(data) {
        var columns = [];
        var rows = [];
        if (data) {
            for (var key in data[0]) {
                var field = key.replace(/\s+/g, '_');
                var propType = typeof data[0][key];
                var bool = false;
                var txtalign = "";
                var widthval = "";
                if (field == "forecolor" || field == "backcolor") {
                    bool = true;
                } if (field == "Row_Labels") {
                    txtalign = "left";
                    widthval = 250;
                } else {
                    txtalign = "right"
                    widthval: 100;
                }
                columns.push({
                    field: field,
                    title: key,
                    type: propType,
                    attributes: { style: "text-align:" + txtalign },
                    filterable: false,
                    hidden: bool,
                    width: widthval
                });
            }
            $.each(data, function (i, e) {
                var entryObject = {};
                for (var key in e) {
                    var field = key.replace(/\s+/g, '_');
                    entryObject[field] = e[key];
                }
                rows.push(entryObject);
            });

            var configuration = {
                dataSource: {
                    data: rows,
                },
                height: 400,
                navigatable: false,
                groupable: false,
                editable: false,
                sortable: false,
                scrollable: true,
                attributes: { style: "text-align: center;" },
                filterable: {
                    extra: true,
                    operators: {
                        string: {
                            contains: "Contains"
                        }
                    }
                },
                pageable: false,
                resizable: true,
                persistSelection: true,
                selectable: true,
                columns: columns,
                dataBound: function (e) {
                    var grid = this; // "this" refers to the Kendo Grid

                    grid.tbody.find("tr").each(function (index) {
                        var rowData = grid.dataItem(this); // Get the data item for the current row
                        $(this).css("background-color", rowData.backcolor);
                        $(this).css("color", rowData.forecolor);
                        //}
                    });
                }
            };

            $("#example").remove();
            $('#grid').append('<div id="example" style="position:relative;" class="k-content"><table id="grid1" style="position:relative;overflow:scroll;width:100%"></table></div>');
            var timeEditGrid = $("#grid1").kendoGrid(configuration).data("kendoGrid");
        } else {
            var emptydata = [{
                "Row Labels": "",
                "Dr Count": "",
                "Dr Value": "",
                "Cr Count": "",
                "Cr Value": "",
                "Total Count": "",
                "Total Value": "",
            }];
            for (var key in emptydata[0]) {
                var emptyfield = key.replace(/\s+/g, '_');
                columns.push({
                    field: emptyfield,
                    title: key,
                    attributes: { style: "text-align: left;" },
                    filterable: false,
                });
            }
            $.each(emptydata, function (i, e) {
                var entryObject = {};
                for (var key in e) {
                    var field = key.replace(/\s+/g, '_');
                    entryObject[field] = e[key];
                }
                rows.push(entryObject);
            });

            var configuration = {
                dataSource: {
                    data: rows,
                },
                height: 400,
                navigatable: false,
                groupable: false,
                editable: false,
                sortable: false,
                scrollable: true,
                attributes: { style: "text-align: center;" },
                filterable: {
                    extra: true,
                    operators: {
                        string: {
                            contains: "Contains"
                        }
                    }
                },
                pageable: false,
                resizable: true,
                persistSelection: true,
                selectable: true,
                columns: columns
            };

            $("#example").remove();
            $('#grid').append('<div id="example" style="position:relative;" class="k-content"><table id="grid1" style="position:relative;overflow:scroll;width:100%"></table></div>');
            var timeEditGrid = $("#grid1").kendoGrid(configuration).data("kendoGrid");
        }



    }

    function exportexcel() {
        var in_recon_code = $("#reconname").val();
        var in_tran_date = $("#period_from").val();
        var ts = in_tran_date.split("/");
        var pr = ts[2] + "-" + ts[1] + "-" + ts[0];
        var in_todate = $("#period_to").val();
        var ts1 = in_todate.split("/");
        var pr1 = ts[2] + "-" + ts1[1] + "-" + ts1[0];
        var user_code = sessionStorage.getItem("usrname");
        window.location.href = '@Url.Action("KOMISreport", "KnockOff")?in_period_from=' + pr + '&in_period_to=' + pr1 + '&in_recon_code=' + in_recon_code + '&user_code=' + user_code + '';

    }

    //Date Validation



    document.addEventListener('DOMContentLoaded', function () {
        const dateInput = document.getElementById('period_from');
        const dateInput1 = document.getElementById('period_to');
        dateInput.addEventListener('focusout', onFocusOut);
        dateInput1.addEventListener('focusout', onFocusOut);
    });

    function decimalFixed(conversionType, value) {
        if (conversionType == "K" || conversionType == "L" || conversionType == "A") {
            return parseFloat(value).toFixed(2);
        } else if (conversionType == "Cr") {
            return parseFloat(value).toFixed(3);
        } else {
            return parseFloat(value).toFixed(2);
        }
    }

    function decimalPlace() {
        if (["C", "M", "B"].includes(format)) {
            decimalPlaces = 3;
            return decimalPlaces;
        } else if (["K", "L"].includes(format)) {
            decimalPlaces = 2;
            return decimalPlaces;
        } else {
            decimalPlaces = 2;
            return decimalPlaces;

        }
    }


</script>