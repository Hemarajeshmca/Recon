
<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.k-state-selected, .k-state-selected:link, .k-state-selected:visited, .k-list > .k-state-selected, .k-list > .k-state-highlight, .k-panel > .k-state-selected, .k-ghost-splitbar-vertical, .k-ghost-splitbar-horizontal, .k-draghandle.k-state-selected:hover, .k-scheduler .k-scheduler-toolbar .k-state-selected, .k-scheduler .k-today.k-state-selected, .k-marquee-color {
			border-color: #872E7B !important;
			color: #e74949 !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid-filter.k-state-active {
			background-color: initial !important;
		}

		.k-grid.k-widget {
			height: 360px;
		}

		.k-grid-header th.k-header > .k-link {
			width: 100px;
		}

		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}
	</style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
	<div class="container-xxl flex-grow-1 container-p-y">
		<div class="card-body" style="margin-top:-12px;height: 82%;">
			<form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
				<div class="row" style="margin-top: -18px;margin-bottom: 10px;">
					<div class="col-sm-6">
						<div class="row">
							<div class="col-sm-4">
								<label for="lbldatasetcode" class="form-label">Theme Code</label>
								<input class="form-control" type="text" id="txtthemecode" disabled>
							</div>
							<div class="col-sm-4">
								<label for="lblmode" class="form-label">Mode</label>
								<input class="form-control" type="text" id="txtmode1" value="Create" disabled>
							</div>
							<div class="col-sm-4">
								<label for="lblstatus" class="form-label">Status</label><br>
								<input class="form-control" type="text" id="txtstatus1" value="" disabled>
							</div>
						</div>
					</div>
					<div class="col-sm-5">
					</div>
					<div class="col-sm-1" style="margin-top:20px;">
					</div>
				</div>
				<div class="row" style="margin-top:10px;margin-bottom:20px">
					<div class="col-sm-3">
						<label class="form-label" for="">Theme Description&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<input class="form-control" type="text" id="themename">
						<input class="form-control" type="hidden" id="themegid" value=0>
					</div>
					<div class="col-sm-3">
						<label class="form-label" for="">Recon&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<select id="cmbrecon" class="form-select form-control" onchange="reconchange()" disabled>
						</select>
					</div>
					<div class="col-sm-2">
						<label class="form-label" style="width: 84px;" for="">Theme Order&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<input class="form-control" type="text" id="theme_order" value="0">
					</div>
					<div class="col-md-2" style="padding-left:0;margin-left: 15px;">
						<label for="" class="form-label">Hold Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<select id="holdflag" class="form-select form-control" style=" width:100%;">
						</select>
					</div>
				</div>

				<div class="row">
					<div class="col-xs-12">
						<div id="gd_themefilter">
							<div id="grid_themefilterfield">
							</div>
						</div>
					</div>
				</div>
			</form>
		</div>
	</div>
</body>
</html>
<script>

	function getGridthemeComboList() {
		//recon name
		var data = {};
		var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = txtusername.user_name;
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbrecon").empty();
				$("#cmbrecon").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.active_status == 'Y') {
						$("#cmbrecon").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					}
				});
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		var in_master_code = "QCD_RS_ACC_MODE";
		var in_user_code = "";
		var response = [];
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (data) {
				response = data;
				$("#Cmbdatasetaccmode").empty();
				$("#Cmbdatasetaccmode").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#Cmbdatasetaccmode").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
			}
		});
		// holdflag flag
		var in_master_code = "QCD_YN";
		var in_user_code = "";
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#holdflag").empty();
				$("#holdflag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#holdflag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});
		themeload();

	}
	function reconchange() {
		//sorce dataset
		var reconcode = $("#cmbrecon").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					$("#cmbsourcefield").empty();
					$("#cmbsourcefield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#cmbsourcefield").append($('<option>', {
							value: item.recon_field_desc,
							text: item.recon_field_name
						}).data('code', item.recon_field_type));
					});
				}
				else {
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		var reconcode = $("#cmbrecon").val();
		$.ajax({
			type: "POST",
			url: '../Theme/Themeclonefetch',
			dataType: 'json',
			data: "",
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var result = JSON.parse(response);
				if (result != null) {
					$("#Cmbclone").empty();
					$("#Cmbclone").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(result, function (index, item) {
						$("#Cmbclone").append($('<option>', {
							value: item.theme_code,
							text: item.theme_desc
						}));
					});
				}
				else {
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	};
	function themeload() {
		if (getlocalStorage("theme_details") != undefined) {
			var data = getlocalStorage("theme_details");
			var cat = data.dataset_category;
			$("#txtmode1").val("View");
			$("#themename").val(data.theme_desc);
			$("#cmbrecon").val(data.recon_code);
			$("#txtthemecode").val(data.theme_code);
			$("#themegid").val(data.theme_gid);
			$("#theme_order").val(data.theme_order);
			$("#txtstatus1").val("Active");
			$("#theme_order").val(data.theme_order);
			$("#holdflag").val(data.hold_flag);
			detailsfetch(data.theme_code)
			$("#Cmbclone").prop('disabled', true)
			$("#btnclone").prop('disabled', true)
			$("#savesubmit").hide();
			$("#adddataset").hide();
			$("#datasetfieldadd").hide();
			$(".k-grid-edit").hide();
			$("#btnsubmit").hide();
			$("#grid_themefilterfield .k-grid-toolbar").hide();
			$("#themename").prop('disabled', true);
			$("#theme_order").prop('disabled', true);
			$("#holdflag").prop('disabled', true);
		}
	}

	function grid_themefilter(data) {
		try {
			var join_condition_list = "";
			var filter_field_list = "";
			var filter_criteria_list = "";
			$("#grid_themefilterfield").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "theme_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								themefilter_gid: { type: "string", defaultValue: "0" },
								theme_code: { type: "string" },
								filter_field_code: { type: "string", defaultValue: "" },
								filter_field: { type: "string" },
								filter_criteria: { type: "string", defaultValue: "" },
								theme_seqno: { type: "NUMBER" },
								ident_value: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string", defaultValue: "" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 230,
				groupable: false,
				dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_themefilterfield').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
					}
				},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				pageable: true,
				resizable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				toolbar: "<a onclick=saveheader()  href='javascript:void(0)' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
				columns: [					
				{
					field: "theme_seqno",
					title: "Theme Seq No.",
					width: 50,
					attributes: { style: "text-align: right;" },
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.themefilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						}
					}
				},
				{
					field: "themefilter_gid",
					title: "themefilter_gid",
					hidden: true,
				},
				{
					field: "theme_code",
					title: "theme_code",
					width: 100,
					hidden: true,
				},

				{
					field: "filter_field_code",
					title: "filter_field_code",
					width: 100,
					hidden: true,
				},
				{
					field: "filter_field",
					title: "Filter Field",
					width: 100,
					editor: function (container, options) {
						combo_editor_man_theme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_themefilterfield")
					},
				},
				{
					field: "filter_criteria",
					title: "Filter Criteria",
					width: 100,
					editor: function (container, options) {
						combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_themefilterfield", "COMPARISON")
					},
				},
				{
					field: "ident_value",
					title: "Filter Value",
					width: 100,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.themefilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						}
					},
				},

				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_themefilterfield")
					},
					width: 40,
				}],
				editable: true,
			});
			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}

		function OnEdit(e) {
			try {
				setDefaultValues(e);

			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}

	}
	$(function () {
		$('#grid_themefilterfield').on('click', '.chkbx1', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_themefilterfield').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_themefilterfield').on('click', '.chkbx2', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_themefilterfield').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function addRow() {
		var grid = $("#grid_themefilterfield").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].theme_seqno > max) {
				max = grid.dataSource._data[i].theme_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ theme_seqno: newSeqNo, open_parentheses_flag: "N", close_parentheses_flag: "N", themefilter_gid: 0 });
	}


	function combo_filter_field(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "COMPARISON") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbrecon").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}
				if (datafield == "ident_criteria") {
					if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.ident_criteria_input = undefined;
				}
			}
		});
	}
	function combo_editor_man_theme(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});

		debugger;
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function detailsfetch(theme_code) {
		$.ajax({
			type: "POST",
			url: '../Theme/Themedetailfetch',
			dataType: 'json',
			data: JSON.stringify({ theme_code: theme_code }),
			async: false,
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				debugger;
				if (response != null) {
					var res = JSON.parse(response);
					//$("#gd_themefilter").empty();
					//$("#gd_themefilter").append("<div id='gd_themefilter'></div>");
					grid_themefilter(res.themedetail);
					if (response.length > 0) {
						$("#Cmbclone").val();
						$("#Cmbclone").prop('disabled', true)
						$("#btnclone").prop('disabled', true)
					}
				}
				else {
					grid_themefilter([]);
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	function myDeleteJstheme() {
		if ($("#txtmode").val() != "View") {
			var grid = $("#grid_themefilterfield").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var themefilter_gid = parseInt(model.themefilter_gid);
			if (themefilter_gid == 0) {
				grid.dataSource.remove(model);
			}
			if (themefilter_gid != 0) {
				$.confirm({
					icon: 'fa fa-warning',
					title: 'Recon',
					autoClose: 'cancel|10000',
					theme: 'dark',
					animationSpeed: 700,
					content: 'Are you sure do you want to delete this record!',
					type: 'orange',
					buttons: {
						confirm: function () {
							var theme_code = "";
							var recon_field = "";
							var filter_criteria = "";
							var filter_value = "";
							var in_open_flag = "";
							var in_close_flag = "";
							var in_join_condition = "";
							var theme_seqno = 0;
							var action = "DELETE";
							var action_by = ""
							var themefilter_gid = model.themefilter_gid;
							var active_status = "";
							$.ajax({
								type: "POST",
								url: '../theme/themedetail',
								dataType: 'json',
								data: JSON.stringify({ themefilter_gid: themefilter_gid, theme_code: theme_code, recon_field: recon_field, action: action, active_status: active_status, filter_criteria: filter_criteria, filter_value: filter_value, open_flag: in_open_flag, close_flag: in_close_flag, join_condition: in_join_condition, theme_seqno: theme_seqno }),
								contentType: 'application/json; charset=utf-8',
								success: function (response) {
									var res = JSON.parse(response);
									if (res[0].out_result == "1") {
										$.alert({
											title: 'Recon',
											content: res[0].out_msg,
											type: 'green',
										});
										detailsfetch($("#txtthemecode").val())
									} else {
										$.alert({
											title: 'Recon',
											content: res[0].out_msg,
											type: 'green',
										});
									}
								}
							});
						},
						cancel: function () {
							$.alert({
								icon: 'fa fa-success',
								title: 'Recon',
								theme: 'dark',
								content: 'Delete Canceled.!',
								type: 'blue',
								animationSpeed: 700,
							});
						},
					}
				});
			}
		}
	}

</script>