<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid-filter.k-state-active {
			background-color: initial !important;
		}

		.k-grid.k-widget {
			height: 360px;
		}

		.k-grid-header th.k-header > .k-link {
			width: 100px;
		}

		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}

		.accordion-wrapper {
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 4px 4px -2px rgba(0, 0, 0, 0.5);
			width: 100%;
			margin: 0 auto;
		}

		.accordion {
			width: 100%;
			color: white;
			overflow: hidden;
			margin-bottom: 3px;
		}

			.accordion:last-child {
				margin-bottom: 0;
			}

		.accordion-label {
			display: flex;
			-webkit-box-pack: justify;
			justify-content: space-between;
			padding: 4px;
			background: rgb(135, 46, 123);
			/*background: rgba(4,57,94,.8);*/
			font-weight: bold;
			cursor: pointer;
			font-size: 14px;
			color: white;
		}

			.accordion-label:hover {
				/*background: rgba(4,57,94,1);*/
				background: rgb(135, 46, 123)
			}

			.accordion-label::after {
				content: "\276F";
				width: 16px;
				height: 16px;
				text-align: center;
				-webkit-transition: all 0.3s;
				transition: all 0.3s;
			}

		.accordion-content {
			max-height: 0;
			padding: 0 16px;
			color: rgba(4, 57, 94, 1);
			background: rgb(135 46 123 / 14%);
			-webkit-transition: all 0.3s;
			transition: all 0.3s;
		}

			.accordion-content p {
				margin: 0;
				color: rgba(4,57,94,.7);
				font-size: 18px;
			}

		input:checked + .accordion-label {
			background: rgba(4,57,94,1);
		}

			input:checked + .accordion-label::after {
				-webkit-transform: rotate(90deg);
				transform: rotate(90deg);
			}

		input:checked ~ .accordion-content {
			max-height: 100vh;
			padding: 16px;
		}

		.validated1 {
			background-color: green; /* Change to desired color */
			color: white; /* Change to desired text color */
		}

		.validated {
			background-color: red; /* Change to desired color */
			color: white; /* Change to desired text color */
		}

	</style>
</head>
<body>
	<form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
		<div class="row" style="margin-top: -18px;margin-bottom: 10px;">
			<div class="col-sm-6">
				<div class="row">
					<div class="col-sm-4">
						<label for="lblpreprocesscode" class="form-label">Preprocess Code</label>
						<input class="form-control" type="text" id="txtpreprocesscode" disabled value="">
					</div>
					<div class="col-sm-4">
						<label for="lblmode" class="form-label">Mode</label>
						<input class="form-control" type="text" id="txtmode2" value="" disabled>
					</div>
					<div class="col-sm-4">
						<label for="lblstatus" class="form-label">Status</label><br>
						<input class="form-control" type="text" id="txtstatus2" value="Active" disabled>
					</div>
				</div>
			</div>
			<div class="col-sm-5">
			</div>
			<div class="col-sm-1" style="margin-top:20px;">
			</div>
		</div>
		<div class="row" style="margin-top:10px;">
			<div class="col-sm-3">
				<label class="form-label" for="">Preprocess Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<input class="form-control" type="text" id="preprocessname">
				<input class="form-control" type="hidden" id="preprocessgid" value=0;>
				<input class="form-control" type="hidden" id="validquery" />
			</div>
			<div class="col-sm-2">
				<label class="form-label" for="">Process Method&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="Cmbprocessmethod" class="form-select form-control" onchange="processmethod()">
				</select>
			</div>
			<div class="col-sm-3">
				<label class="form-label" for="">Recon&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="cmbrecon1" class="form-select form-control" onchange="reconcode()" disabled>
				</select>
			</div>
			<div class="col-sm-2">
				<label class="form-label" for="">Preprocess Order&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<input class="form-control" type="number" id="preprocessorder">
			</div>
			<div class="col-md-2" style="width: 14%;">
				<label for="" class="form-label">Hold Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="holdflag1" class="form-select form-control" style=" width:100%;">
				</select>
			</div>
		</div>
		<div style="height:245px;overflow-x:auto;padding-top:10px;margin-top:10px">
			<div class="accordion-wrapper">
				<div class="accordion" id="headingfunction">
					<input type="checkbox" name="radio-a" id="check2" style="display:none">
					<label class="accordion-label" for="check2">&nbsp;&nbsp;&nbsp;Function</label>
					<div id="headingfunction" class="accordion-content" aria-labelledby="headingfunction" data-bs-parent="#accordionfunction">
						<div class="accordion-body" style="padding-left:15px;">
							<div class="row">
								<div class="col-sm-3">
									<label class="form-label" for="">Lookup Recon Field&nbsp&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
									<select id="cmbgetrecon" class="form-select form-control" onchange="cmbgetfunction()">
									</select>
								</div>
								<div class="col-sm-3">
									<label class="form-label" for="">Lookup Function&nbsp;</label>
									<input class="form-control" id="Cmbfunction" name="Cmbfunction" type="text" value="" data-bind="value:Cmbfunction">
									@*<select id="Cmbfunction" class="form-select form-control">
									</select>*@
								</div>
								<div class="col-sm-3">
									<label class="form-label" for="">Update Recon Field&nbsp;</label>
									<select id="Cmbreconfield" class="form-select form-control">
									</select>
								</div>

							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headinglookup">
					<input type="checkbox" name="radio-a" id="check3" style="display:none">
					<label class="accordion-label" for="check3">&nbsp;&nbsp;&nbsp;Look Up</label>
					<div id="headinglookup" class="accordion-content">
						<div class="row" style="margin-bottom:5px;">
							<div class="col-sm-3">
								<label class="form-label" for="">Lookup Dataset &nbsp&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<select id="cmblookupdataset1" class="form-select form-control" onchange="lookupchange()">
								</select>
							</div>
							<div class="col-sm-3">
								<label class="form-label" for="">Lookup Return Field&nbsp;</label>
								<select id="Cmblookupdatasetfield" class="form-select form-control">
								</select>
							</div>
							<div class="col-sm-3">
								<label class="form-label" for="">Update Recon Field&nbsp;</label>
								<select id="Cmbreconfield1" class="form-select form-control">
								</select>
							</div>
						</div>
						<div class="col-xs-12" style="margin-top:5px;">
							<div id="grid_lookup">
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headingfilter">
					<input type="checkbox" name="radio-a" id="check1" style="display:none">
					<label class="accordion-label" for="check1">&nbsp;&nbsp;&nbsp;Filter</label>
					<div class="accordion-content" id="headingfilter">
						<div class="col-xs-12" style="margin-top:5px;">
							<div id="gd_filter">
								<div id="grid_filter">
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headingquery">
					<input type="checkbox" name="radio-a" id="check4" style="display:none">
					<label class="accordion-label" for="check4">&nbsp;&nbsp;&nbsp;Query</label>
					<div id="collapsequery" class="accordion-content" aria-labelledby="headingquery" data-bs-parent="#accordionquery">
						<textarea id="querydata" name="querydata" rows="4" style="margin-top: 20px;height: 115px;width: 1155px;border-radius: 0.375rem;"></textarea>
						@*<button type="button" id="validatequery" class="btn btn-sm btn btn-primary" onclick="validatequery1()">Validate</button>&nbsp;&nbsp;&nbsp;*@
					</div>
				</div>
			</div>
		</div>
	</form>

</body>
</html>
<script type="text/javascript">

	function getGridCombopreprocessList() {
		$("#headingquery").hide();
		$("#headinglookup").hide();
		$("#headingfunction").hide();
		$("#headingfilter").hide();

		//recon type
		var in_master_code = "QCD_PROCESSM";
		var in_user_code = "";
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#Cmbprocessmethod").empty();
				$("#Cmbprocessmethod").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#Cmbprocessmethod").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
			}
		});
		//recon name
		var data = {};
		var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = txtusername.user_name;
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbrecon1").empty();
				$("#cmbrecon1").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					$("#cmbrecon1").append($('<option>', {
						value: item.recon_code,
						text: item.recon_name
					}));
				});
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		// holdflag flag
		var in_master_code = "QCD_YN";
		var in_user_code = "";
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#holdflag1").empty();
				$("#holdflag1").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#holdflag1").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});
	
		preprocessload();
		
	}
	function preprocessload() {
		var data = getlocalStorage("preprocess_details");
		$("#txtmode2").val("View");
		$("#txtpreprocesscode").val(data.preprocess_code);
		$("#cmbrecon1").val(data.recon_code);
		jQuery('#cmbrecon1').trigger("change");
		$("#preprocessname").val(data.preprocess_desc);
		$("#preprocessorder").val(data.preprocess_order);
		$("#preprocessgid").val(data.preprocess_gid);
		$("#Cmbprocessmethod").val(data.process_method);
		jQuery('#Cmbprocessmethod').trigger("change");
		$("#cmbgetrecon").val(data.get_recon_field);
		jQuery('#cmbgetrecon').trigger("change");
		$("#Cmbfunction").val(data.process_function);
		$("#Cmbreconfield").val(data.set_recon_field);
		$("#querydata").val(data.process_query);

		$("#holdflag1").val(data.hold_flag);
		$("#txtstatus2").val("Active");		
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocessfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ preprocess_code: data.preprocess_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var result = JSON.parse(response);
				if (result != null) {
					if (result.filter.length > 0) {
						$("#gd_filter").empty();
						$("#gd_filter").append("<div id='grid_filter'></div>");
						grid_filter(result.filter);
					}
					else {
						grid_filter([]);
					}
					if (result.condition.length > 0) {
						grid_lookup(result.condition);
						if ($("#txtmode2").val() == "View") {
							$("#grid_filter .k-grid-toolbar").hide();
							$("#grid_lookup .k-grid-toolbar").hide();
						}
					} else {
						grid_lookup([]);
					}
					$("#txtpreprocesscode").val(result.header[0].preprocess_code);
					$("#cmbrecon1").val(result.header[0].recon_code);
					jQuery('#cmbrecon1').trigger("change");
					$("#preprocessname").val(result.header[0].preprocess_desc);
					$("#preprocessorder").val(result.header[0].preprocess_order);
					$("#preprocessgid").val(result.header[0].preprocess_gid);
					$("#Cmbprocessmethod").val(result.header[0].process_method);
					jQuery('#Cmbprocessmethod').trigger("change");
					$("#cmbgetrecon").val(result.header[0].get_recon_field);
					jQuery('#cmbgetrecon').trigger("change");
					$("#Cmbfunction").val(result.header[0].process_function);
					$("#Cmbreconfield").val(result.header[0].set_recon_field);
					$("#querydata").val(result.header[0].process_query);
					$("#cmblookupdataset1").val(result.header[0].lookup_dataset_code);
					jQuery('#cmblookupdataset1').trigger("change");
					$("#Cmblookupdatasetfield").val(result.header[0].lookup_return_field);
					$("#Cmbreconfield1").val(result.header[0].set_recon_field);
					$("#holdflag1").val(result.header[0].hold_flag);
				}
			}
		});
		$("#preprocessname").prop('disabled', true);
		$("#preprocessorder").prop('disabled', true);
		$("#Cmbprocessmethod").prop('disabled', true);
		$("#cmbgetrecon").prop('disabled', true);
		$("#Cmbfunction").prop('disabled', true);
		$("#Cmbreconfield").prop('disabled', true);
		$("#Cmbreconfield1").prop('disabled', true);
		$("#querydata").prop('disabled', true);
		$("#holdflag1").prop('disabled', true);
		$("#txtpreprocesscode").prop('disabled', true);
		$("#cmbrecon1").prop('disabled', true);
		$("#querydata").prop('disabled', true);
		$("#cmblookupdataset1").prop('disabled', true);
		$("#Cmblookupdatasetfield").prop('disabled', true);
		if ($("#txtmode2").val() == "View") {
			$("#grid_filter .k-grid-toolbar").hide();
			$("#grid_lookup .k-grid-toolbar").hide();
		}
	}

	function reconcode() {
		//dataset combo
		var reconcode = $("#cmbrecon1").val();
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocessdatasetfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmblookupdataset1").empty();
				$("#cmblookupdataset1").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.dataset_type == "L") {
						$("#cmblookupdataset1").append($('<option>', {
							value: item.dataset_code,
							text: item.dataset_name
						}));
					}
				});
			}
		});
		var reconcode = $("#cmbrecon1").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					$("#Cmbreconfield").empty();
					$("#Cmbreconfield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#cmbgetrecon").empty();
					$("#cmbgetrecon").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#Cmbreconfield1").empty();
					$("#Cmbreconfield1").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#Cmbreconfield").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#cmbgetrecon").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#Cmbreconfield1").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	function cmbgetfunction() {
		var sourcedata = "SOURCE1";
		var codeValue = $('#cmbgetrecon').find(":selected").text();
		var in_recon_code = $("#cmbrecon1").val()
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					var selected = [];
					for (var i = 0; i < res.length; i++) {
						selected[i] = res[i].condition_desc;
					}
					$("#Cmbfunction").autocomplete({
						source: selected,
						minLength: 0
					}).focus(function () {
						$("#Cmbfunction").autocomplete('search', $("#Cmbfunction").val())
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	//---- Function ----------------
	function grid_filter(data) {
		var join_condition_list = "";
		var filter_criteria_list = "";
		var filter_field_list = "";
		$("#grid_filter").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "filter_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocessfilter_gid: { type: "string", defaultValue: "0" },
							filter_seqno: { type: "NUMBER" },
							filter_field_code: { type: "string" },
							filter_field: { type: "string" },
							filter_criteria: { type: "string" },
							ident_criteria: { type: "string" },
							ident_value: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 210,
			groupable: false,
			dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_filter').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode2").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick=savefilterheader()  href='javascript:void(0)'><span class='fa fa-plus' style='color:white'></span></a>",
			columns: [
				{
					field: "filter_seqno",
					title: "Seq No.",
					width: 30,
					attributes: { style: "text-align: right;" },
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						}
					}
				},
				{
					field: "preprocessfilter_gid",
					title: "preprocessfilter_gid",
					hidden: true,
				},
				{
					field: "filter_field_code",
					title: "filter_field_code",
					hidden: true,
				},
				{
					field: "filter_field",
					title: "Filter Field",
					width: 100,
					editor: function (container, options) {
						combo_editor_man_process(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_filter")
					},
				},
				{
					field: "filter_criteria",
					title: "Filter Criteria",
					width: 100,
					editor: function (container, options) {
						combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_filter", "COMPARISON")
					},
				},
				{
					field: "ident_value",
					title: "Filter Value",
					width: 100,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true,
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_filter")
					},
					width: 50,
				}],
			editable: true,
		});

		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

		function OnEdit(e) {
			try {
				setDefaultValues(e);
			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
	}
	$(function () {
		$('#grid_filter').on('click', '.chkbx1', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_filter').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_filter').on('click', '.chkbx2', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_filter').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function combo_editor_man_process(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon1").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});


		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_filter_field(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbrecon1").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}

			}
		});
	}
	function addRowfilter() {
		var grid = $("#grid_filter").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].filter_seqno > max) {
				max = grid.dataSource._data[i].filter_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ filter_seqno: newSeqNo, preprocessfilter_gid: 0, open_parentheses_flag: "N", close_parentheses_flag: "N" });
	}
	//---- Look up ----------------
	function grid_lookup(data) {
		var source_field_desc_list = "";
		var extraction_criteria_list = "";
		var comparison_criteria_list = "";
		$("#grid_lookup").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "condition_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocesscondition_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							condition_seqno: { type: "NUMBER" },
							source_field_code: { type: "string", defaultValue: "" },
							source_field_desc: { type: "string", defaultValue: "" },
							comparison_field: { type: "string", defaultValue: "" },
							comparison_field_desc: { type: "string" },
							extraction_criteria: { type: "string" },
							extraction_criteria_code: { type: "string" },
							comparison_criteria: { type: "string" },
							comparison_criteria_code: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 150,
			groupable: false,
			//dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_lookup').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode2").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick=saveheader()  href='javascript:void(0)' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
			columns: [

				{
					field: "condition_seqno",
					title: "Seq No.",
					width: 40,
					attributes: { style: "text-align: right;" },
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						}
					}
				},
				{
					field: "preprocesscondition_gid",
					title: "preprocesscondition_gid",
					hidden: true,
				},
				{
					field: "source_field_code",
					title: "Recon Field",
					width: 100,
					hidden: true,
				},
				{
					field: "source_field_desc",
					title: "Recon Field",
					editor: function (container, options) {
						combo_editor_man_lookup(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_lookup")
					},
					width: 120,
				},
				{
					field: "extraction_criteria_code",
					title: "Extraction Criteria",
					hidden: true,
				},
				{
					field: "extraction_criteria",
					title: "Extraction Criteria",
					editor: function (container, options) {
						combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_lookup", "SOURCE")
					},
					editable: true,
					width: 120,
				},
				{
					field: "comparison_field",
					title: "comparison_field",
					width: 100,
					hidden: true,
				},
				{
					field: "comparison_field_desc",
					title: "Lookup Field",
					editor: function (container, options) {
						combo_editor_man_lookup1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_lookup")
					},
					width: 120,
				},
				{
					field: "comparison_criteria_code",
					title: "comparison_criteria_code",
					hidden: true,
				},
				{
					field: "comparison_criteria",
					title: "Comparison Criteria",
					editor: function (container, options) {
						combo_editor_man2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_lookup", "COMPARISON")
					},
					width: 120,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookup")
					},
					width: 40,
				}],
			editable: true,
		});
		source_field_desc_list = "";
		comparison_field_desc_list = "";
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
	}
	$(function () {
		$('#grid_lookup').on('click', '.chkbx1', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_lookup').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_lookup').on('click', '.chkbx2', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_lookup').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function OnEdit(e) {
		try {
			setDefaultValues(e);
		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}
	}
	function addRow() {
		var grid = $("#grid_lookup").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].condition_seqno > max) {
				max = grid.dataSource._data[i].condition_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ condition_seqno: newSeqNo, preprocesscondition_gid: 0, open_parentheses_flag: "N", close_parentheses_flag: "N" });
	}
	function color() {
		$("#grid_lookup").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
	}
	function combo_editor_man_lookup(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon1").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});


		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man_lookup1(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var datasetcode = $("#cmblookupdataset1").val();
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.DataSet.length > i; i++) {
						var list1 = {};
						list1.code = result.DataSet[i].dataset_table_field;
						list1.desc = result.DataSet[i].field_name;
						arr1.push(list1);
					}
				}
			}
		});


		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.source_field_desc;
		}
		var in_recon_code = $("#cmbrecon1").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}
				if (datafield == "ident_criteria") {
					if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.ident_criteria_input = undefined;
				}
			}
		});
	}
	function combo_editor_man2(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.comparison_field_desc;
		}
		var in_dataset_code = $("#cmblookupdataset1").val();
		$.ajax({
			type: "POST",
			url: '../Preprocess/lookupfilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_dataset_code: in_dataset_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "extraction_criteria") {
					if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.extraction_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.extraction_criteria_input = undefined;
				}
				if (datafield == "comparison_criteria") {
					if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.comparison_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.comparison_criteria_input = undefined;
				}
			},
		});
	}
	function processmethod() {
		if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
			$("#headingquery").hide();
			$("#headinglookup").hide();
			$("#headingfunction").show();
			$("#headingfilter").show();
			$("#check2").prop('checked', true);

		} else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
			$("#headingquery").hide();
			$("#headinglookup").show();
			$("#headingfunction").hide();
			$("#headingfilter").show();
			$("#check3").prop('checked', true);

		} else if ($("#Cmbprocessmethod").val() == 'QCD_QUERY') {
			$("#headingquery").show();
			$("#headinglookup").hide();
			$("#headingfunction").hide();
			$("#headingfilter").hide();
			$("#check4").prop('checked', true);
			$("#validquery").val("false");
		}
	}
	
	function preprocessfetch(preprocess_code) {
		var cmbpreprocess_code = preprocess_code;
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocessfetch',
			dataType: 'json',
			data: JSON.stringify({ preprocess_code: cmbpreprocess_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var result = JSON.parse(response);
				if (result != null) {
					if (result.filter.length > 0) {
						$("#gd_filter").empty();
						$("#gd_filter").append("<div id='grid_filter'></div>");
						grid_filter(result.filter);
					}
					else {
						grid_filter([]);
					}
					if (result.condition.length > 0) {
						grid_lookup(result.condition)
					} else {
						grid_lookup([]);
					}
					$("#txtpreprocesscode").val(result.header[0].preprocess_code);
					$("#cmbrecon1").val(result.header[0].recon_code);
					jQuery('#cmbrecon1').trigger("change");
					$("#preprocessname").val(result.header[0].preprocess_desc);
					$("#preprocessorder").val(result.header[0].preprocess_order);
					$("#preprocessgid").val(result.header[0].preprocess_gid);
					$("#Cmbprocessmethod").val(result.header[0].process_method);
					jQuery('#Cmbprocessmethod').trigger("change");
					$("#cmbgetrecon").val(result.header[0].get_recon_field);
					jQuery('#cmbgetrecon').trigger("change");
					$("#Cmbfunction").val(result.header[0].process_function);
					$("#Cmbreconfield").val(result.header[0].set_recon_field);
					$("#querydata").val(result.header[0].process_query);
					$("#cmblookupdataset1").val(result.header[0].lookup_dataset_code);
					jQuery('#cmblookupdataset1').trigger("change");
					$("#Cmblookupdatasetfield").val(result.header[0].lookup_return_field);
					$("#Cmbreconfield1").val(result.header[0].set_recon_field);
					$("#holdflag1").val(result.header[0].hold_flag);

				}
				else {
					grid_filter([]);
					grid_lookup([]);
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	function lookupchange() {
		var datasetcode = $("#cmblookupdataset1").val();
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					$("#Cmblookupdatasetfield").empty();
					$("#Cmblookupdatasetfield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(result.DataSet, function (index, item) {
						$("#Cmblookupdatasetfield").append($('<option>', {
							value: item.dataset_table_field,
							text: item.field_name
						}));
					});
				}
				else {
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}


</script>

