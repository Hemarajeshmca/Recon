@{
	ViewData["Title"] = "Preprocess";
	Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid-filter.k-state-active {
			background-color: initial !important;
		}

		.k-grid.k-widget {
			height: 360px;
		}

		.k-grid-header th.k-header > .k-link {
			width: 100px;
		}

		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}

		.accordion-wrapper {
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 4px 4px -2px rgba(0, 0, 0, 0.5);
			width: 100%;
			margin: 0 auto;
		}

		.accordion {
			width: 100%;
			color: white;
			overflow: hidden;
			margin-bottom: 9px;
		}

			.accordion:last-child {
				margin-bottom: 0;
			}

		.accordion-label {
			display: flex;
			-webkit-box-pack: justify;
			justify-content: space-between;
			padding: 4px;
			background: rgb(135, 46, 123);
			/*background: rgba(4,57,94,.8);*/
			font-weight: bold;
			cursor: pointer;
			font-size: 14px;
			color: white;
		}

			.accordion-label:hover {
				background: rgb(135, 46, 123)
			}

			.accordion-label::after {
				content: "\276F";
				width: 16px;
				height: 16px;
				text-align: center;
				-webkit-transition: all 0.3s;
				transition: all 0.3s;
			}

		.accordion-content {
			max-height: 0;
			padding: 0 16px;
			color: rgba(4, 57, 94, 1);
			background: rgb(135 46 123 / 14%);
			-webkit-transition: all 0.3s;
			transition: all 0.3s;
		}

			.accordion-content p {
				margin: 0;
				color: rgba(4,57,94,.7);
				font-size: 18px;
			}

		input:checked + .accordion-label {
			background: rgba(4,57,94,1);
		}

			input:checked + .accordion-label::after {
				-webkit-transform: rotate(90deg);
				transform: rotate(90deg);
			}

		input:checked ~ .accordion-content {
			max-height: 100vh;
			padding: 16px;
		}

		.validated1 {
			background-color: green; /* Change to desired color */
			color: white; /* Change to desired text color */
		}

		.validated {
			background-color: red; /* Change to desired color */
			color: white; /* Change to desired text color */
		}
	</style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
	<div class="content-wrapper">
		<div class="container-xxl flex-grow-1 container-p-y">
			<div class="card-body" style="margin-top:-12px;height: 82%;">
				<form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
					<div class="row" style="margin-top: -18px;margin-bottom: 10px;">
						<div class="col-sm-6">
							<div class="row">
								<div class="col-sm-4">
									<label for="lblpreprocesscode" class="form-label">Preprocess Code</label>
									<input class="form-control" type="text" id="txtpreprocesscode" disabled value="">
								</div>
								<div class="col-sm-4">
									<label for="lblmode" class="form-label">Mode</label>
									<input class="form-control" type="text" id="txtmode" value="Create" disabled>
								</div>
								<div class="col-sm-4">
									<label for="lblstatus" class="form-label">Status</label><br>
									<input class="form-control" type="text" id="txtstatus" value="Active" disabled>
								</div>
							</div>
						</div>
						<div class="col-sm-5">
						</div>
						<div class="col-sm-1" style="margin-top:20px;">
							<center>
								<a href="../Preprocess/Preprocesslist"><img style="cursor:pointer;" src="~/Content/images/toplist.png"></a>&nbsp;&nbsp;&nbsp;&nbsp;
							</center>
						</div>
					</div>
					<div class="row" style="margin-top:10px;">
						<div class="col-sm-3">
							<label class="form-label" for="">Preprocess Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
							<input class="form-control" type="text" id="preprocessname">
							<input class="form-control" type="hidden" id="preprocessgid" value=0;>
							<input class="form-control" type="hidden" id="validquery" />
						</div>
						<div class="col-sm-3">
							<label class="form-label" for="">Recon&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
							<input disabled class="form-control" id="cmbreconname_desc" name="reconName" type="text">
							<selec hidden id="cmbrecon" class="form-select form-control" onchange="reconcode()" disabled>
							</selec>
						</div>
						<div class="col-sm-2">
							<label class="form-label" for="">Process Method&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
							<select id="Cmbprocessmethod" class="form-select form-control" onchange="processmethodcon()">
							</select>
						</div>
						<div class="col-sm-1">
							<label class="form-label" for="">Order&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
							<input class="form-control" type="text" id="preprocessorder" onpaste="return false;" maxlength="5" onkeypress='return isNumberKey(event)'>
						</div>
						<div class="col-md-2" style="padding-left:0;margin-left: 15px;">
							<label for="" class="form-label">Post Process Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
							<select id="postprocessflag" class="form-select form-control" style=" width:120%;">
							</select>
						</div>
					</div>
					<div class="row" style="margin-top:10px;">
						<div class="col-sm-3">
							<label class="form-label" for="">Clone Preprocess&nbsp;</label>
							<select id="Cmbclone" class="form-select form-control">
							</select>
						</div>
						<div class="col-sm-1" style="margin-top:30px">
							<button type="button" class="btn btn-sm me-2 save_btn" id="btnclone" onclick="saveclone()">Clone</button>&nbsp;&nbsp;&nbsp;
						</div>
						<div class="col-md-2" style="width: 14%;display:none">
							<label for="" class="form-label">Hold Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
							<select id="holdflag" class="form-select form-control" style=" width:100%;">
							</select>
						</div>
					</div>
					<div style="height:244px;overflow-x:auto;">
						<div class="accordion-wrapper">
							<div class="accordion" id="headingfunction">
								<input type="checkbox" name="radio-a" id="check2" style="display:none">
								<label class="accordion-label" for="check2">&nbsp;&nbsp;&nbsp;Function</label>
								<div id="headingfunction" class="accordion-content">
									<div class="accordion-body" style="padding-left:15px;">
										<div class="row">
											<div class="col-sm-3">
												<label class="form-label" for="">Lookup Recon Field&nbsp&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
												<select id="cmbgetrecon" class="form-select form-control" onchange="cmbgetfunction()">
												</select>
											</div>
											<div class="col-sm-3">
												<label class="form-label" for="">Lookup Function&nbsp;</label>
												<input class="form-control" id="Cmbfunction" name="Cmbfunction" type="text" value="" data-bind="value:Cmbfunction">
												@*<select id="Cmbfunction" class="form-select form-control">
												</select>*@
											</div>
											<div class="col-sm-3">
												<label class="form-label" for="">Update Recon Field&nbsp;</label>
												<select id="Cmbreconfield" class="form-select form-control">
												</select>
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="accordion" id="headingexpression">
								<input type="checkbox" name="radio-a" id="check8" style="display:none">
								<label class="accordion-label" for="check8">&nbsp;&nbsp;&nbsp;Expression</label>
								<div id="headingexpression" class="accordion-content">
									<div class="accordion-body" style="padding-left:15px;">
										<div class="row">
											<div class="col-sm-3">
												<label class="form-label" for="">Update Recon Field&nbsp;</label>
												<select id="Cmbreconfield2" class="form-select form-control">
												</select>
											</div>
											<div class="col-sm-8">
												<label class="form-label" for="">Expression&nbsp;</label>
												<textarea id="CmbExpression" name="CmbExpression" rows="4" style="height: 32px;width: 818px;border-radius: 0.375rem;"></textarea>
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="accordion" id="headinglookupdataset">
								<input type="checkbox" name="radio-a" id="check3" style="display:none">
								<label class="accordion-label" for="check3">&nbsp;&nbsp;&nbsp;Lookup Dataset</label>
								<div id="headinglookupdataset" class="accordion-content">
									<div class="row" style="margin-bottom:5px;">
										<div class="col-sm-3">
											<label class="form-label" for="">Lookup Dataset &nbsp&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
											<select id="cmblookupdataset" class="form-select form-control" onchange="lookupchange()">
											</select>
										</div>
										<div class="col-sm-3" id="luprfield">
											<label class="form-label" for="">Lookup Return Field&nbsp;</label>
											<select id="Cmblookupdatasetfield" class="form-select form-control">
											</select>
										</div>
										<div class="col-sm-3" id="uprfield">
											<label class="form-label" for="">Update Recon Field&nbsp;</label>
											<select id="Cmbreconfield1" class="form-select form-control">
											</select>
										</div>
										<div class="col-sm-3">
											<div>
												<input type="checkbox" id="lookupflag" onclick="lookupflagjs()">
												<label for="vehicle1">Enable Mutiple Update Recon Field </label>
											</div>
											<div style="margin-top:10px" id="rflag">
												<input type="checkbox" id="returnflag" onclick="returnflag()">
												<label for="vehicle1">Group Return Value</label>
											</div>
										</div>
									</div>
									<div class="col-xs-12" style="margin-top:5px;margin-bottom:10px" id="lookupgrid">
										<label class="form-label" style="font-size: 14px;margin-left: -13px;font-weight:bold">&nbsp;&nbsp;&nbsp;Lookup Update Field</label>
										<div id="grid_lookupfield">
										</div>
									</div>
								</div>
							</div>
							<div class="accordion" id="headinglookuprecon">
								<input type="checkbox" name="radio-a" id="check4" style="display:none">
								<label class="accordion-label" for="check4">&nbsp;&nbsp;&nbsp;Recon (vs) Lookup</label>
								<div id="headinglookuprecon" class="accordion-content">
									<div class="row" style="margin-bottom:5px;">
										<div class="col-xs-12" style="margin-top:5px;">
											<div id="grid_lookup">
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="accordion" id="headinglookup">
								<input type="checkbox" name="radio-a" id="check5" style="display:none">
								<label class="accordion-label" for="check5">&nbsp;&nbsp;&nbsp;Lookup (vs) Recon</label>
								<div id="headinglookup" class="accordion-content">
									<div class="row" style="margin-bottom:5px;">
										<div class="col-xs-12" style="margin-top:5px;">
											<div id="grid_lookuprecon">
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="accordion" id="headinglookupfilter">
								<input type="checkbox" name="radio-a" id="check7" style="display:none">
								<label class="accordion-label" for="check7">&nbsp;&nbsp;&nbsp;Lookup Filter</label>
								<div class="accordion-content" id="headinglookupfilter">
									<div class="col-xs-12" style="margin-top:5px;">
										<div id="gd_lookupfilter">
											<div id="grid_lookupfilter">
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="accordion" id="headingfilter">
								<input type="checkbox" name="radio-a" id="check1" style="display:none">
								<label class="accordion-label" for="check1">&nbsp;&nbsp;&nbsp;Recon Filter</label>
								<div class="accordion-content" id="headingfilter">
									<div class="col-xs-12" style="margin-top:5px;">
										<div id="gd_filter">
											<div id="grid_filter">
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="accordion" id="headingquery">
								<input type="checkbox" name="radio-a" id="check6" style="display:none">
								<label class="accordion-label" for="check6">&nbsp;&nbsp;&nbsp;Query</label>
								<div id="collapsequery" class="accordion-content">
									<textarea id="querydata" name="querydata" rows="4" style="margin-top: 20px;height: 115px;width: 1155px;border-radius: 0.375rem;"></textarea>
									@*<button type="button" id="validatequery" class="btn btn-sm btn btn-primary" onclick="validatequery1()">Validate</button>&nbsp;&nbsp;&nbsp;*@
								</div>
							</div>
						</div>
					</div>

					<div class="row" style="padding-top:16px">
						<div class="col-sm-4">
						</div>
						<div class="col-sm-4" style="margin-left:58px;">
							<button type="button" id="savesubmit" class="btn btn-sm save_btn me-2" onclick="saveheadersubmit()">Submit</button>&nbsp;&nbsp;&nbsp;
							<a href="../Preprocess/Preprocesslist" class="btn btn-sm cancel_btn me-2">Cancel</a>
						</div>
						<div class="col-sm-4">
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</body>
</html>
<script type="text/javascript">
	$(document).ready(function () {
		$("#navhead").text("Preprocess");
		$("#headingquery").hide();
		$("#headinglookup").hide();
		$("#headinglookupdataset").hide();
		$("#headinglookuprecon").hide();
		$("#headingfunction").hide();
		$("#headingfilter").hide();
		$("#headinglookupfilter").hide();
		$("#headingexpression").hide();
		getGridComboList();
	});
	function getGridComboList() {
		//recon type
		var in_master_code = "QCD_PROCESSM";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#Cmbprocessmethod").empty();
				$("#Cmbprocessmethod").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#Cmbprocessmethod").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
			}
		});
		//recon name
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = sessionStorage.getItem("usrname");
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbrecon").empty();
				$("#cmbrecon").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					$("#cmbrecon").append($('<option>', {
						value: item.recon_code,
						text: item.recon_name
					}));
				});
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		// holdflag flag
		var in_master_code = "QCD_YN";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#holdflag").empty();
				$("#holdflag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#holdflag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});
		// postprocessflag flag
		var in_master_code = "QCD_YN";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#postprocessflag").empty();
				$("#postprocessflag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#postprocessflag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
				$("#postprocessflag").val('N');
			}
		});
		load();
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocesslistfetchclone',
			dataType: 'json',
			data: JSON.stringify({ recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var result = JSON.parse(response);
				if (result != null) {
					$("#Cmbclone").empty();
					$("#Cmbclone").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(result, function (index, item) {
						$("#Cmbclone").append($('<option>', {
							value: item.preprocess_code,
							text: item.preprocess_desc
						}));
					});
				}
				else {
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	function load() {
		if (getlocalStorage('btn_clk_val') == "Create") {
			$("#txtmode").val(getlocalStorage('btn_clk_val'));
			$("#txtstatus").val("Draft");
			var data = getlocalStorage("ls_pageList");
			$("#cmbrecon").val(data[0].recon_code);
			jQuery('#cmbrecon').trigger("change");
			var gettext = $("#cmbrecon").find(":selected").text();
			$("#cmbreconname_desc").val(sessionStorage.getItem("reconname"));
			$("#holdflag").val('N');
			$("#preprocessorder").val(data[0].preprocess_order);
			grid_lookup([]);
			grid_lookuprecon([]);
			grid_lookupfield([]);
			grid_filterdata([]);
			grid_lookupfilter([]);
		}
		else if (getlocalStorage('btn_clk_val') == "Edit") {
			if (getlocalStorage("ls_pageList") != undefined) {
				var data = getlocalStorage("ls_pageList");
				$("#txtmode").val(getlocalStorage('btn_clk_val'));
				$("#txtpreprocesscode").val(data.preprocess_code);
				$("#cmbrecon").val(data.recon_code);
				jQuery('#cmbrecon').trigger("change");
				$("#cmbreconname_desc").val(sessionStorage.getItem("reconname"));
				$("#preprocessname").val(data.preprocess_desc);
				$("#preprocessorder").val(data.preprocess_order);
				$("#preprocessgid").val(data.preprocess_gid);
				$("#Cmbprocessmethod").val(data.process_method);
				$("#cmbgetrecon").val(data.get_recon_field);
				jQuery('#cmbgetrecon').trigger("change");
				$("#Cmbfunction").val(data.process_function);
				$("#Cmbreconfield").val(data.set_recon_field);
				$("#querydata").val(data.process_query);
				preprocessfetch(data.preprocess_code);
				$("#holdflag").val(data.hold_flag);
				$("#txtstatus").val(data.active_status_desc);
				$("#Cmbclone").prop('disabled', true)
				$("#btnclone").prop('disabled', true)
				//$("#Cmbprocessmethod").prop('disabled', true);
			}
		} else if (getlocalStorage('btn_clk_val') == "View") {
			if (getlocalStorage("ls_pageList") != undefined) {
				var data = getlocalStorage("ls_pageList");
				$("#txtmode").val(getlocalStorage('btn_clk_val'));
				$("#txtpreprocesscode").val(data.preprocess_code);
				$("#cmbrecon").val(data.recon_code);
				jQuery('#cmbrecon').trigger("change");
				$("#cmbreconname_desc").val(sessionStorage.getItem("reconname"));
				$("#preprocessname").val(data.preprocess_desc);
				$("#preprocessorder").val(data.preprocess_order);
				$("#preprocessgid").val(data.preprocess_gid);
				$("#Cmbprocessmethod").val(data.process_method);
				$("#cmbgetrecon").val(data.get_recon_field);
				jQuery('#cmbgetrecon').trigger("change");
				$("#Cmbfunction").val(data.process_function);
				$("#Cmbreconfield").val(data.set_recon_field);
				$("#querydata").val(data.process_query);
				preprocessfetch(data.preprocess_code);
				$("#holdflag").val(data.hold_flag);
				$("#txtstatus").val(data.active_status_desc);
				$("#savesubmit").hide();
				$("#btnsubmit").hide();
				$("#preprocessname").prop('disabled', true);
				$("#preprocessorder").prop('disabled', true);
				$("#Cmbprocessmethod").prop('disabled', true);
				$("#cmbgetrecon").prop('disabled', true);
				$("#Cmbfunction").prop('disabled', true);
				$("#Cmbreconfield").prop('disabled', true);
				$("#Cmbreconfield2").prop('disabled', true);
				$("#Cmbreconfield1").prop('disabled', true);
				$("#querydata").prop('disabled', true);
				$("#holdflag").prop('disabled', true);
				$("#txtpreprocesscode").prop('disabled', true);
				$("#cmbrecon").prop('disabled', true);
				$("#querydata").prop('disabled', true);
				$("#cmblookupdataset").prop('disabled', true);
				$("#Cmblookupdatasetfield").prop('disabled', true);
				$("#Cmbclone").prop('disabled', true);
				$("#btnclone").prop('disabled', true);
				$("#returnflag").prop('disabled', true);
			}
		}
	}
	function reconcode() {
		//dataset combo
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocessdatasetfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmblookupdataset").empty();
				$("#cmblookupdataset").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.dataset_type == "L") {
						$("#cmblookupdataset").append($('<option>', {
							value: item.dataset_code,
							text: item.dataset_name
						}));
					}
				});
			}
		});
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					$("#Cmbreconfield").empty();
					$("#Cmbreconfield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#cmbgetrecon").empty();
					$("#cmbgetrecon").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#Cmbreconfield1").empty();
					$("#Cmbreconfield1").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#Cmbreconfield2").empty();
					$("#Cmbreconfield2").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#Cmbreconfield").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#cmbgetrecon").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#Cmbreconfield1").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#Cmbreconfield2").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	function cmbgetfunction() {
		var sourcedata = "SOURCE1";
		var codeValue = $('#cmbgetrecon').find(":selected").text();
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					var selected = [];
					for (var i = 0; i < res.length; i++) {
						selected[i] = res[i].condition_desc;
					}
					$("#Cmbfunction").autocomplete({
						source: selected,
						minLength: 0
					}).focus(function () {
						$("#Cmbfunction").autocomplete('search', $("#Cmbfunction").val())
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	//---- Function ----------------
	function grid_filterdata(data) {
		var join_condition_list = "";
		var filter_criteria_list = "";
		var filter_field_list = "";
		var ident_value_list = "";
		$("#grid_filter").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "filter_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocessfilter_gid: { type: "string", defaultValue: "0" },
							filter_seqno: { type: "NUMBER" },
							filter_field_code: { type: "string" },
							filter_field: { type: "string" },
							filter_criteria: { type: "string" },
							ident_criteria: { type: "string" },
							ident_value_flag: { type: "string" },
							ident_value: { type: "string" },
							ident_value_code: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 210,
			groupable: false,
			dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_filter').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				};
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick=savefilterheader()  href='javascript:void(0)'><span class='fa fa-plus' style='color:white'></span></a>",
			columns: [{
				command: [

					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='savefilter()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:17%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					{
						name: "Delete",
						id: "Delete",
						template: function (dataItem) {
							// Check your condition here to determine whether to show or hide the delete button
							if ($("#txtmode").val() == "View") {
								return "";
							} else {
								return "<a href='' onclick='myDeleteJsfilter()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png'></a>&nbsp;&nbsp;&nbsp;"
							}
						}
						//template: "<a href='' onclick='myDeleteJsfilter()' data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "filter_seqno",
				title: "Seq No.",
				width: 30,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '2');
				},
			},
			{
				field: "open_parentheses_flag",
				title: "(", width: 20,
				//template: '#=sel_checkbox(data)#'
				template: function (dataItem) {
					if (dataItem.preprocessfilter_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
					} else {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
					}
				}
			},
			{
				field: "preprocessfilter_gid",
				title: "preprocessfilter_gid",
				hidden: true,
			},
			{
				field: "filter_field_code",
				title: "filter_field_code",
				hidden: true,
			},
			{
				field: "filter_field",
				title: "Filter Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_man_process(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_filter")
				},
			},
			{
				field: "filter_criteria",
				title: "Filter Criteria",
				width: 100,
				editor: function (container, options) {
					combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_filter", "COMPARISON")
				},
			},
			{
				field: "ident_value_code",
				title: "ident_value_code",
				hidden: true,
			},
			{
				field: "ident_value_flag",
				title: "ident_value_flag",
				hidden: true,
			},
			{
				field: "ident_value",
				title: "Filter Value",
				width: 100,
				editor: function (container, options) {
					combo_editor_identifiervaluec(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "ident_value_code", "ident_value_flag", "grid_filter")
				},
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true,
			},
			{
				field: "close_parentheses_flag",
				title: ")", width: 20,
				//template: '#=sel_checkbox1(data)#'
				template: function (dataItem) {
					if (dataItem.preprocessfilter_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
					} else {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
					}
				},
			},
			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_filter")
				},
				width: 50,
			}],
			editable: true,
		});

		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
		$(function () {
			$('#grid_filter').on('click', '.chkbx3', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_filter').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('open_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('open_parentheses_flag', 'N');
				}
			})
		})
		$(function () {
			$('#grid_filter').on('click', '.chkbx4', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_filter').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('close_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('close_parentheses_flag', 'N');
				}
			})
		})
		function OnEdit(e) {
			try {
				setDefaultValues(e);
			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
	}
	function combo_editor_identifiervaluec(container, cmbid, datasource, datafield, code_datafield, code_flag, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "ident_value") {
					if (datafield == "ident_value" && selectedItem.ident_value_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_value_input;
						selectedItem[code_flag] = 'Y';
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						selectedItem[code_flag] = 'N';
					}
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man_process(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});


		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_filter_field(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}

			}
		});
	}
	function addRowfilter() {
		var grid = $("#grid_filter").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].filter_seqno > max) {
				max = grid.dataSource._data[i].filter_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ filter_seqno: newSeqNo, preprocessfilter_gid: 0, open_parentheses_flag: "N", close_parentheses_flag: "N", ident_value_code: '' });
		var lastRow = grid.tbody.children().last();
		grid.content.scrollTop(lastRow.position().top);
	}
	//----lookup filter ----------
	function grid_lookupfilter(data) {
		var join_condition_list = "";
		var filter_criteria_list = "";
		var filter_field_list = "";
		var ident_value_list = "";
		$("#grid_lookupfilter").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "filter_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocessfilter_gid: { type: "string", defaultValue: "0" },
							filter_seqno: { type: "NUMBER" },
							filter_field_code: { type: "string" },
							filter_field: { type: "string" },
							filter_criteria: { type: "string" },
							ident_criteria: { type: "string" },
							ident_value_flag: { type: "string" },
							ident_value: { type: "string" },
							ident_value_code: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 210,
			groupable: false,
			dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_filter').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				};
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick=savefilterheader1()  href='javascript:void(0)'><span class='fa fa-plus' style='color:white'></span></a>",
			columns: [{
				command: [

					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='savefilterlookup()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:17%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					{
						name: "Delete",
						id: "Delete",
						template: function (dataItem) {
							// Check your condition here to determine whether to show or hide the delete button
							if ($("#txtmode").val() == "View") {
								return "";
							} else {
								return "<a href='' onclick='myDeleteJsfilterlookup()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png'></a>&nbsp;&nbsp;&nbsp;"
							}
						}
						//template: "<a href='' onclick='myDeleteJsfilter()' data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "filter_seqno",
				title: "Seq No.",
				width: 30,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '2');
				},
			},
			{
				field: "open_parentheses_flag",
				title: "(", width: 20,
				//template: '#=sel_checkbox(data)#'
				template: function (dataItem) {
					if (dataItem.preprocessfilter_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
					} else {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
					}
				}
			},
			{
				field: "preprocessfilter_gid",
				title: "preprocessfilter_gid",
				hidden: true,
			},
			{
				field: "filter_field_code",
				title: "filter_field_code",
				hidden: true,
			},
			{
				field: "filter_field",
				title: "Filter Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_man_process1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_lookupfilter")
				},
			},
			{
				field: "filter_criteria",
				title: "Filter Criteria",
				width: 100,
				editor: function (container, options) {
					combo_filter_fieldl(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_lookupfilter", "COMPARISON")
				},
			},
			{
				field: "ident_value_code",
				title: "ident_value_code",
				hidden: true,
			},
			{
				field: "ident_value_flag",
				title: "ident_value_flag",
				hidden: true,
			},
			{
				field: "ident_value",
				title: "Filter Value",
				width: 100,
				editor: function (container, options) {
					combo_editor_identifiervaluecl(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "ident_value_code", "ident_value_flag", "grid_lookupfilter")
				},
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true,
			},
			{
				field: "close_parentheses_flag",
				title: ")", width: 20,
				//template: '#=sel_checkbox1(data)#'
				template: function (dataItem) {
					if (dataItem.preprocessfilter_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
					} else {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
					}
				},
			},
			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookupfilter")
				},
				width: 50,
			}],
			editable: true,
		});

		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
		$(function () {
			$('#grid_lookupfilter').on('click', '.chkbx3', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookupfilter').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('open_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('open_parentheses_flag', 'N');
				}
			})
		})
		$(function () {
			$('#grid_lookupfilter').on('click', '.chkbx4', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookupfilter').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('close_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('close_parentheses_flag', 'N');
				}
			})
		})
		function OnEdit(e) {
			try {
				setDefaultValues(e);
			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
	}
	function combo_editor_identifiervaluecl(container, cmbid, datasource, datafield, code_datafield, code_flag, grid_id) {
		var arr1 = [];
		var datasetcode = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					var res = result.DataSet;
					for (i = 0; res.length > i; i++) {
						var list1 = {};
						list1.code = res[i].dataset_table_field;
						list1.desc = res[i].field_name;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "ident_value") {
					if (datafield == "ident_value" && selectedItem.ident_value_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_value_input;
						selectedItem[code_flag] = 'Y';
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						selectedItem[code_flag] = 'N';
					}
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man_process1(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var datasetcode = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					var res = result.DataSet;
					for (i = 0; res.length > i; i++) {
						var list1 = {};
						list1.code = res[i].dataset_table_field;
						list1.desc = res[i].field_name;
						arr1.push(list1);
					}
				}
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_filter_fieldl(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}

			}
		});
	}
	function addRowlookupfilter() {
		var grid = $("#grid_lookupfilter").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].filter_seqno > max) {
				max = grid.dataSource._data[i].filter_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ filter_seqno: newSeqNo, preprocessfilter_gid: 0, open_parentheses_flag: "N", close_parentheses_flag: "N", ident_value_code: '' });
		var lastRow = grid.tbody.children().last();
		grid.content.scrollTop(lastRow.position().top);
	}
	//---- Look up multi ----------------
	function grid_lookupfield(data) {
		var lookup_return_field_desc_list = "";
		var set_recon_field_desc_list = "";
		$("#grid_lookupfield").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "lookup_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocesslookup_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							lookup_seqno: { type: "NUMBER" },
							lookup_return_field: { type: "string", defaultValue: "" },
							lookup_return_field_desc: { type: "string", defaultValue: "" },
							set_recon_field: { type: "string", defaultValue: "" },
							set_recon_field_desc: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 200,
			groupable: false,
			//dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_lookupfield').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				};
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick=saveheaderlookup()  href='javascript:void(0)' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='savelookupfield()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:12%;'></a>&nbsp;&nbsp;&nbsp;",
					},

					{
						name: "Delete",
						id: "Delete",
						template: function (dataItem) {
							if ($("#txtmode").val() == "View") {
								return "";
							} else {
								return "<a href='' onclick='myDeleteJslookupfield()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png'></a>&nbsp;&nbsp;&nbsp;"
							}
						}
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "lookup_seqno",
				title: "Seq No.",
				width: 40,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '2');
				},
			},
			{
				field: "preprocesslookup_gid",
				title: "preprocesslookup_gid",
				hidden: true,
			},
			{
				field: "lookup_return_field",
				title: "Lookup Return Field",
				width: 100,
				hidden: true,
			},
			{
				field: "set_recon_field_desc",
				title: "Update Recon Field",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "set_recon_field", "grid_lookupfield")
				},
				editable: true,
				width: 120,
			},
			{
				field: "lookup_return_field_desc",
				title: "Lookup Return Field",
				editor: function (container, options) {
					combo_editor_man_lookupfield(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "lookup_return_field", "grid_lookupfield")
				},
				width: 120,
			},
			{
				field: "set_recon_field",
				title: "Extraction Criteria",
				hidden: true,
			},

			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "preprocess_code",
				title: "preprocess_code",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,
		});
		set_recon_field_desc_list = set_recon_field();
	}
	function combo_editor_man_lookupfield(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr4 = [];
		var datasetcode = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					var res = result.DataSet;
					for (i = 0; res.length > i; i++) {
						var list1 = {};
						list1.code = res[i].dataset_table_field;
						list1.desc = res[i].field_name;
						arr4.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr4,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function set_recon_field() {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		return arr1;
	}
	function addRowlookup() {
		var grid = $("#grid_lookupfield").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].lookup_seqno > max) {
				max = grid.dataSource._data[i].lookup_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ lookup_seqno: newSeqNo, preprocesslookup_gid: 0 });
		var lastRow = grid.tbody.children().last();
		grid.content.scrollTop(lastRow.position().top);
	}
	//---- Look up condition ----------------
	function grid_lookup(data) {
		var source_field_desc_list = "";
		var extraction_criteria_list = "";
		var comparison_criteria_list = "";
		$("#grid_lookup").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "condition_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocesscondition_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							condition_seqno: { type: "NUMBER" },
							source_field_code: { type: "string", defaultValue: "" },
							source_field_desc: { type: "string", defaultValue: "" },
							comparison_field: { type: "string", defaultValue: "" },
							comparison_field_desc: { type: "string" },
							extraction_criteria: { type: "string" },
							extraction_criteria_code: { type: "string" },
							comparison_criteria: { type: "string" },
							comparison_criteria_code: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 200,
			groupable: false,
			//dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_lookup').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				};
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick=saveheader()  href='javascript:void(0)' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='savelookup()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:25%;'></a>&nbsp;&nbsp;&nbsp;",
					},

					{
						name: "Delete",
						id: "Delete",
						template: function (dataItem) {
							// Check your condition here to determine whether to show or hide the delete button
							if ($("#txtmode").val() == "View") {
								return "";
							} else {
								return "<a href='' onclick='myDeleteJslookup()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png'></a>&nbsp;&nbsp;&nbsp;"
							}
						}
						//template: "<a href='' onclick='myDeleteJslookup()' data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "condition_seqno",
				title: "Seq No.",
				width: 40,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '2');
				},
			},
			{
				field: "open_parentheses_flag",
				title: "(", width: 20,
				//template: '#=sel_checkbox(data)#'
				template: function (dataItem) {
					if (dataItem.preprocesscondition_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
					} else {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
					}
				}
			},
			{
				field: "preprocesscondition_gid",
				title: "preprocesscondition_gid",
				hidden: true,
			},
			{
				field: "source_field_code",
				title: "Recon Field",
				width: 100,
				hidden: true,
			},
			{
				field: "source_field_desc",
				title: "Recon Field",
				editor: function (container, options) {
					combo_editor_man_lookup(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_lookup")
				},
				width: 120,
			},
			{
				field: "extraction_criteria_code",
				title: "Extraction Criteria",
				hidden: true,
			},
			{
				field: "extraction_criteria",
				title: "Extraction Criteria",
				editor: function (container, options) {
					combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_lookup", "SOURCE")
				},
				editable: true,
				width: 120,
			},
			{
				field: "comparison_field",
				title: "comparison_field",
				width: 100,
				hidden: true,
			},
			{
				field: "comparison_field_desc",
				title: "Lookup Field",
				editor: function (container, options) {
					combo_editor_man_lookup1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_lookup")
				},
				width: 120,
			},
			{
				field: "comparison_criteria_code",
				title: "comparison_criteria_code",
				hidden: true,
			},
			{
				field: "comparison_criteria",
				title: "Comparison Criteria",
				editor: function (container, options) {
					combo_editor_man2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_lookup", "COMPARISON")
				},
				width: 120,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			},
			{
				field: "close_parentheses_flag",
				title: ")", width: 20,
				//template: '#=sel_checkbox1(data)#'
				template: function (dataItem) {
					if (dataItem.preprocesscondition_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
					} else {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
					}
				},
			},
			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookup")
				},
				width: 40,
			}],
			editable: true,
		});
		source_field_desc_list = "";
		comparison_field_desc_list = "";
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
	}
	$(function () {
		$('#grid_lookup').on('click', '.chkbx1', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_lookup').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_lookup').on('click', '.chkbx2', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_lookup').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function OnEdit(e) {
		try {
			setDefaultValues(e);
			//e.container.find("input[name='source_field_desc']").change(function () {
			//	e.model.extraction_criteria = "";
			//	$("#extraction_criteria_list").val("");
			// });

		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}
	}
	function addRow() {
		var grid = $("#grid_lookup").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].condition_seqno > max) {
				max = grid.dataSource._data[i].condition_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ condition_seqno: newSeqNo, preprocesscondition_gid: 0, open_parentheses_flag: "N", close_parentheses_flag: "N" });
		var lastRow = grid.tbody.children().last();
		grid.content.scrollTop(lastRow.position().top);
	}
	function color() {
		$("#grid_lookup").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
	}
	function combo_editor_man_lookup(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man_lookup1(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var datasetcode = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.DataSet.length > i; i++) {
						var list1 = {};
						list1.code = result.DataSet[i].dataset_table_field;
						list1.desc = result.DataSet[i].field_name;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.source_field_desc;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "extraction_criteria") {
					if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.extraction_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.extraction_criteria_input = undefined;
				}

			}
		});
	}
	function combo_editor_man2(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.comparison_field_desc;
		}
		var in_dataset_code = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Preprocess/lookupfilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_dataset_code: in_dataset_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "extraction_criteria") {
					if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.extraction_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.extraction_criteria_input = undefined;
				}
				if (datafield == "comparison_criteria") {
					if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.comparison_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.comparison_criteria_input = undefined;
				}
			},
		});
	}
	//---- Look up filter ----------------
	function grid_lookuprecon(data) {
		var source_field_desc_list = "";
		var extraction_criteria_list = "";
		var comparison_criteria_list = "";
		$("#grid_lookuprecon").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "condition_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocesscondition_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							condition_seqno: { type: "NUMBER" },
							source_field_code: { type: "string", defaultValue: "" },
							source_field_desc: { type: "string", defaultValue: "" },
							comparison_field: { type: "string", defaultValue: "" },
							comparison_field_desc: { type: "string" },
							extraction_criteria: { type: "string" },
							extraction_criteria_code: { type: "string" },
							comparison_criteria: { type: "string" },
							comparison_criteria_code: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 200,
			groupable: false,
			//dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_lookuprecon').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				};
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick=saveheader()  href='javascript:void(0)' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='savelookup1()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:25%;'></a>&nbsp;&nbsp;&nbsp;",
					},

					{
						name: "Delete",
						id: "Delete",
						template: function (dataItem) {
							// Check your condition here to determine whether to show or hide the delete button
							if ($("#txtmode").val() == "View") {
								return "";
							} else {
								return "<a href='' onclick='myDeleteJslookup1()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png'></a>&nbsp;&nbsp;&nbsp;"
							}
						}
						//template: "<a href='' onclick='myDeleteJslookup1()' data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "condition_seqno",
				title: "Seq No.",
				width: 40,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '2');
				},
			},
			{
				field: "open_parentheses_flag",
				title: "(", width: 20,
				//template: '#=sel_checkbox(data)#'
				template: function (dataItem) {
					if (dataItem.preprocesscondition_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
					} else {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
					}
				}
			},
			{
				field: "preprocesscondition_gid",
				title: "preprocesscondition_gid",
				hidden: true,
			},
			{
				field: "comparison_field_desc",
				title: "Lookup Field",
				editor: function (container, options) {
					combo_editor_man_lookup1new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_lookuprecon")
				},
				width: 120,
			},
			{
				field: "extraction_criteria_code",
				title: "Extraction Criteria",
				hidden: true,
			},
			{
				field: "extraction_criteria",
				title: "Extraction Criteria",
				editor: function (container, options) {
					combo_editor_man1new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_lookuprecon", "SOURCE")
				},
				editable: true,
				width: 120,
			},
			{
				field: "source_field_code",
				title: "Recon Field",
				width: 100,
				hidden: true,
			},
			{
				field: "source_field_desc",
				title: "Recon Field",
				editor: function (container, options) {
					combo_editor_man_lookupnew(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_lookuprecon")
				},
				width: 120,
			},
			{
				field: "comparison_criteria_code",
				title: "comparison_criteria_code",
				hidden: true,
			},
			{
				field: "comparison_criteria",
				title: "Comparison Criteria",
				editor: function (container, options) {
					combo_editor_mannew(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_lookuprecon", "COMPARISON")
				},
				width: 120,
			},

			{
				field: "comparison_field",
				title: "comparison_field",
				width: 100,
				hidden: true,
			},

			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			},
			{
				field: "close_parentheses_flag",
				title: ")", width: 20,
				//template: '#=sel_checkbox1(data)#'
				template: function (dataItem) {
					if (dataItem.preprocesscondition_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
					} else {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
					}
				},
			},
			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookuprecon")
				},
				width: 40,
			}],
			editable: true,
		});
		source_field_desc_list = "";
		comparison_field_desc_list = "";
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
	}
	$(function () {
		$('#grid_lookuprecon').on('click', '.chkbx1', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_lookuprecon').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_lookuprecon').on('click', '.chkbx2', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_lookuprecon').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function OnEdit(e) {
		try {
			setDefaultValues(e);
		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}
	}
	function addRowrecon() {
		var grid = $("#grid_lookuprecon").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].condition_seqno > max) {
				max = grid.dataSource._data[i].condition_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ condition_seqno: newSeqNo, preprocesscondition_gid: 0, open_parentheses_flag: "N", close_parentheses_flag: "N" });
		var lastRow = grid.tbody.children().last();
		grid.content.scrollTop(lastRow.position().top);
	}
	function color() {
		$("#grid_lookuprecon").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
	}
	function combo_editor_man_lookupnew(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man_lookup1new(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var datasetcode = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.DataSet.length > i; i++) {
						var list1 = {};
						list1.code = result.DataSet[i].dataset_table_field;
						list1.desc = result.DataSet[i].field_name;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_man1new(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.source_field_desc;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "extraction_criteria") {
					if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.extraction_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.extraction_criteria_input = undefined;
				}

			}
		});
	}
	function combo_editor_mannew(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.comparison_field_desc;
		}
		var in_dataset_code = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Preprocess/lookupfilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_dataset_code: in_dataset_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "extraction_criteria") {
					if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.extraction_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.extraction_criteria_input = undefined;
				}
				if (datafield == "comparison_criteria") {
					if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.comparison_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.comparison_criteria_input = undefined;
				}
			},
		});
	}
	function processmethodcon() {
		var processmethod = $("#Cmbprocessmethod").val();
		var preprocesscode = $("#txtpreprocesscode").val();
		if (preprocesscode != '') {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to change Process Method Existing records will be clear!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var preprocess_name = "";
						var preprocess_Code = preprocesscode;
						var recon_code = "";
						var process_method = processmethod;
						var get_recon_field = "";
						var set_recon_field = "";
						var process_function = "";
						var lookup_dataset_code = "";
						var lookup_return_field = "";
						var process_query = "";
						var clone_process = "";
						var postprocessflag = "";
						var preprocess_order = "";
						var expression = "";
						var muti_lookup_flag = '';
						var action = "DELETEPREPROCESS";
						var preprocess_gid = $("#preprocessgid").val();
						var holdflag = "";
						var action_by = sessionStorage.getItem("usrname");
						var status = "";
						$.ajax({
							type: "POST",
							url: '../Preprocess/preprocessheader',
							dataType: 'json',
							data: JSON.stringify({
								preprocess_name: preprocess_name, recon_code: recon_code, get_recon_field: get_recon_field, process_method: process_method, process_query: process_query,
								lookup_dataset_code: lookup_dataset_code, lookup_return_field, clone_process: clone_process, preprocess_order: preprocess_order, preprocess_Code: preprocess_Code, hold_flag: holdflag,
								set_recon_field: set_recon_field, process_function: process_function, lookup_multi_return_flag: muti_lookup_flag,
								in_action: action, in_action_by: action_by, preprocess_gid: preprocess_gid, active_status: status, expression: expression,
								postprocessflag: postprocessflag
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								var result = JSON.parse(response);
								var data = result[0];
								debugger;
								if (data.out_result == "1") {
									processmethod1();
								} else {
									$.alert({
										title: 'Recon',
										content: data.out_msg,
										type: 'red',
									});
								}
							}
						});
					},

					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
						load();
					},
				},
			});

		} else {
			processmethod1();
		}
	}

	const button = document.getElementById('validatequery');
	function validateAndChangeColor() {
		// Perform validation here
		if ($("#validquery").val() == "true") {
			button.classList.remove('validated');
			button.classList.add('validated1');
		} else {
			// If validation fails, remove 'validateds' class
			button.classList.remove('btn-primary');
			button.classList.add('validated');

		}
	}
	button.addEventListener('click', validateAndChangeColor);
	function savefilter() {
		try {
			var grid = $("#grid_filter").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var in_txtpreprocesscode = $("#txtpreprocesscode").val();
			var in_recon_code = $("#cmbrecon").val();
			var cmbfiltername = model.filter_field_code;
			var extractcriteria = model.filter_criteria;
			var identifiercriteria = model.ident_criteria;
			if (model.ident_value_input != undefined) {
				var ident_value_flag = 'Y';
				var identifiervalue = model.ident_value_input;
			} else if (model.ident_value_code == "") {
				var ident_value_flag = 'Y';
				if (model.ident_value == undefined) {
					var identifiervalue = model.ident_value_code;
				} else {
					var identifiervalue = model.ident_value;
				}
			} else {
				if (model.ident_value_flag == 'Y') {
					var ident_value_flag = model.ident_value_flag;
					var identifiervalue = model.ident_value_code;
				} else {
					var ident_value_flag = 'N';
					var identifiervalue = model.ident_value_code;
				}
			}
			var in_filter_seqno = model.filter_seqno
			var action = "";
			var action_by = sessionStorage.getItem("usrname");
			var preprocessfilter_gid = model.preprocessfilter_gid;
			if (preprocessfilter_gid == "0") {
				preprocessfilter_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			var in_filter_applied_on = "RECON";
			var in_open_flag = model.open_parentheses_flag;
			var in_close_flag = model.close_parentheses_flag;
			var in_join_condition = model.join_condition;
			$.ajax({
				type: "POST",
				url: '../Preprocess/filterdatasave',
				dataType: 'json',
				data: JSON.stringify({
					in_preprocessfilter_gid: preprocessfilter_gid, in_preprocess_code: in_txtpreprocesscode, in_recon_code: in_recon_code, in_join_condition: in_join_condition, in_ident_value_flag: ident_value_flag,
					in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, in_open_flag: in_open_flag, in_filter_seqno: in_filter_seqno,
					in_action: action, in_user_code: action_by, in_active_status: status, in_close_flag: in_close_flag, in_filter_applied_on: in_filter_applied_on
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						preprocessfetch($("#txtpreprocesscode").val());
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function savefilterlookup() {
		try {
			var grid = $("#grid_lookupfilter").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var in_txtpreprocesscode = $("#txtpreprocesscode").val();
			var in_recon_code = $("#cmbrecon").val();
			var cmbfiltername = model.filter_field_code;
			var extractcriteria = model.filter_criteria;
			var identifiercriteria = model.ident_criteria;
			if (model.ident_value_input != undefined) {
				var ident_value_flag = 'Y';
				var identifiervalue = model.ident_value_input;
			} else if (model.ident_value_code == "") {
				var ident_value_flag = 'Y';
				if (model.ident_value == undefined) {
					var identifiervalue = model.ident_value_code;
				} else {
					var identifiervalue = model.ident_value;
				}
			} else {
				if (model.ident_value_flag == 'Y') {
					var ident_value_flag = model.ident_value_flag;
					var identifiervalue = model.ident_value_code;
				} else {
					var ident_value_flag = 'N';
					var identifiervalue = model.ident_value_code;
				}
			}
			var in_filter_seqno = model.filter_seqno
			var action = "";
			var action_by = sessionStorage.getItem("usrname");
			var preprocessfilter_gid = model.preprocessfilter_gid;
			if (preprocessfilter_gid == "0") {
				preprocessfilter_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			var in_filter_applied_on = "LOOKUP";
			var in_open_flag = model.open_parentheses_flag;
			var in_close_flag = model.close_parentheses_flag;
			var in_join_condition = model.join_condition;
			$.ajax({
				type: "POST",
				url: '../Preprocess/filterdatasave',
				dataType: 'json',
				data: JSON.stringify({
					in_preprocessfilter_gid: preprocessfilter_gid, in_preprocess_code: in_txtpreprocesscode, in_recon_code: in_recon_code, in_join_condition: in_join_condition, in_ident_value_flag: ident_value_flag,
					in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, in_open_flag: in_open_flag, in_filter_seqno: in_filter_seqno,
					in_action: action, in_user_code: action_by, in_active_status: status, in_close_flag: in_close_flag, in_filter_applied_on: in_filter_applied_on
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						preprocessfetch($("#txtpreprocesscode").val());
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function myDeleteJsfilter() {
		var grid = $("#grid_filter").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var preprocessfilter_gid = parseInt(model.preprocessfilter_gid);
		if (preprocessfilter_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_txtpreprocesscode = $("#txtpreprocesscode").val();
						var in_recon_code = $("#cmbrecon").val();
						var cmbfiltername = model.filter_field_code;
						var extractcriteria = model.filter_criteria;
						var identifiercriteria = model.ident_criteria;
						var identifiervalue = model.ident_value;
						var in_filter_seqno = model.filter_seqno
						var action = "DELETE";
						var action_by = sessionStorage.getItem("usrname");
						var ident_value_flag = "";
						var preprocessfilter_gid = model.preprocessfilter_gid;
						var status = "Y";
						var in_open_flag = "";
						if ($('#chk_sel_' + model.preprocessfilter_gid).is(":checked")) {
							in_open_flag = "Y";
						} else {
							in_open_flag = "N";
						}
						var in_close_flag = "";
						if ($('#chk_sel1_' + model.preprocessfilter_gid).is(":checked")) {
							in_close_flag = "Y";
						} else {
							in_close_flag = "N";
						}
						var in_join_condition = model.join_condition;
						$.ajax({
							type: "POST",
							url: '../Preprocess/filterdatasave',
							dataType: 'json',
							data: JSON.stringify({
								in_preprocessfilter_gid: preprocessfilter_gid, in_preprocess_code: in_txtpreprocesscode, in_recon_code: in_recon_code, in_join_condition: in_join_condition, in_ident_value_flag: ident_value_flag,
								in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, in_open_flag: in_open_flag, in_filter_seqno: in_filter_seqno,
								in_action: action, in_user_code: action_by, in_active_status: status, in_close_flag: in_close_flag
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									preprocessfetch($("#txtpreprocesscode").val());
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	function myDeleteJsfilterlookup() {
		var grid = $("#grid_lookupfilter").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var preprocessfilter_gid = parseInt(model.preprocessfilter_gid);
		if (preprocessfilter_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_txtpreprocesscode = $("#txtpreprocesscode").val();
						var in_recon_code = $("#cmbrecon").val();
						var cmbfiltername = model.filter_field_code;
						var extractcriteria = model.filter_criteria;
						var identifiercriteria = model.ident_criteria;
						var identifiervalue = model.ident_value;
						var in_filter_seqno = model.filter_seqno
						var action = "DELETE";
						var action_by = sessionStorage.getItem("usrname");
						var ident_value_flag = "";
						var preprocessfilter_gid = model.preprocessfilter_gid;
						var status = "Y";
						var in_open_flag = "";
						if ($('#chk_sel_' + model.preprocessfilter_gid).is(":checked")) {
							in_open_flag = "Y";
						} else {
							in_open_flag = "N";
						}
						var in_close_flag = "";
						if ($('#chk_sel1_' + model.preprocessfilter_gid).is(":checked")) {
							in_close_flag = "Y";
						} else {
							in_close_flag = "N";
						}
						var in_join_condition = model.join_condition;
						var in_filter_applied_on = "LOOKUP";
						$.ajax({
							type: "POST",
							url: '../Preprocess/filterdatasave',
							dataType: 'json',
							data: JSON.stringify({
								in_preprocessfilter_gid: preprocessfilter_gid, in_preprocess_code: in_txtpreprocesscode, in_recon_code: in_recon_code, in_join_condition: in_join_condition, in_ident_value_flag: ident_value_flag,
								in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, in_open_flag: in_open_flag, in_filter_seqno: in_filter_seqno,
								in_action: action, in_user_code: action_by, in_active_status: status, in_close_flag: in_close_flag, in_filter_applied_on: in_filter_applied_on
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									preprocessfetch($("#txtpreprocesscode").val());
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	function preprocessfetch(preprocess_code) {
		var cmbpreprocess_code = preprocess_code;
		var in_user_code = sessionStorage.getItem("usrname");
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocessfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ preprocess_code: cmbpreprocess_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var result = JSON.parse(response);
				if (result != null) {
					$("#txtpreprocesscode").val(result.header[0].preprocess_code);
					$("#preprocessgid").val(result.header[0].preprocess_gid)
					$("#cmbrecon").val(result.header[0].recon_code);
					jQuery('#cmbrecon').trigger("change");
					$("#cmbreconname_desc").val(sessionStorage.getItem("reconname"));
					$("#preprocessname").val(result.header[0].preprocess_desc);
					$("#preprocessorder").val(result.header[0].preprocess_order);
					$("#preprocessgid").val(result.header[0].preprocess_gid);
					$("#Cmbprocessmethod").val(result.header[0].process_method);
					processmethod1();
					$("#cmbgetrecon").val(result.header[0].get_recon_field);
					jQuery('#cmbgetrecon').trigger("change");
					$("#Cmbfunction").val(result.header[0].process_function);
					if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
						$("#Cmbreconfield").val(result.header[0].set_recon_field);
					} else {
						$("#Cmbreconfield1").val(result.header[0].set_recon_field);
					}
					if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
						$("#Cmbreconfield2").val(result.header[0].set_recon_field);
						$("#CmbExpression").val(result.header[0].process_expression)
					}
					$("#postprocessflag").val(result.header[0].postprocess_flag)
					$("#querydata").val(result.header[0].process_query);
					$("#cmblookupdataset").val(result.header[0].lookup_dataset_code);
					jQuery('#cmblookupdataset').trigger("change");
					$("#Cmblookupdatasetfield").val(result.header[0].lookup_return_field);
					if (result.header[0].lookup_group_flag == "Y") {
						$("#returnflag").prop("checked", true);
					} else {
						$("#returnflag").prop("checked", false);
					}
					if (result.header[0].lookup_multi_return_flag == "Y") {
						$("#lookupflag").prop("checked", true);
						lookupflagjs();
					} else {
						$("#lookupflag").prop("checked", false);
					}

					$("#holdflag").val(result.header[0].hold_flag);
					$("#txtstatus").val(result.header[0].active_status_desc);
					$("#Cmbclone").prop('disabled', true)
					$("#btnclone").prop('disabled', true)
					if (result.filter.length > 0) {
						$("#gd_filter").empty();
						$("#gd_filter").append("<div id='grid_filter'></div>");
						grid_filterdata(result.filter);
					}
					else {
						grid_filterdata([]);
					}
					if (result.filterlookup.length > 0) {
						$("#gd_lookupfilter").empty();
						$("#gd_lookupfilter").append("<div id='grid_lookupfilter'></div>");
						grid_lookupfilter(result.filterlookup);
					}
					else {
						grid_lookupfilter([]);
					}
					if (result.condition.length > 0) {
						grid_lookup(result.condition)
					} else {
						grid_lookup([]);
					}
					if (result.conditionlookup.length > 0) {
						grid_lookuprecon(result.conditionlookup)
					} else {
						grid_lookuprecon([])
					}

					if (result.lookup.length > 0) {
						grid_lookupfield(result.lookup)
					} else {
						grid_lookupfield([]);
					}
					if ($("#txtmode").val() == "View") {
						$("#grid_filter .k-grid-toolbar").hide();
						$("#grid_lookup .k-grid-toolbar").hide();
						$("#grid_lookuprecon .k-grid-toolbar").hide();
						$("#grid_lookupfilter .k-grid-toolbar").hide();
					}
				}
				else {
					grid_filterdata([]);
					grid_lookup([]);
					grid_lookuprecon([]);
					grid_lookupfield([]);
					grid_lookupfilter([]);
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	function lookupchange() {
		var datasetcode = $("#cmblookupdataset").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					$("#Cmblookupdatasetfield").empty();
					$("#Cmblookupdatasetfield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(result.DataSet, function (index, item) {
						$("#Cmblookupdatasetfield").append($('<option>', {
							value: item.dataset_table_field,
							text: item.field_name
						}));
					});
				}
				else {
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	function savelookup() {
		try {
			if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				if ($("#cmblookupdataset").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Look up cannot be empty",
						type: 'green',
					});
					return;
				}
				var checkbox1 = document.getElementById("lookupflag");
				if (checkbox1.checked) {
					var muti_lookup_flag = '';
				} else {
					if ($("#Cmblookupdatasetfield").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Lookup Return Field cannot be empty",
							type: 'green',
						});
						return;
					}
					if ($("#Cmbreconfield1").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Update Recon Field cannot be empty",
							type: 'green',
						});
						return;
					}
				}
			}
			var grid = $("#grid_lookup").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var in_txtpreprocesscode = $("#txtpreprocesscode").val();
			var in_Ldataset_code = $("#cmblookupdataset").val();
			var in_Lreturn_field = $("#Cmblookupdatasetfield").val();
			var in_setrecon_field = $("#Cmbreconfield1").val();
			var checkbox = document.getElementById("returnflag");
			if (checkbox.checked) {
				var returnflag = 'Y'
			} else {
				var returnflag = 'N'
			}
			var comparison_field = model.comparison_field;
			var condition_seqno = model.condition_seqno;
			var source_field_code = model.source_field_code;
			var extraction_criteria = model.extraction_criteria;
			var comparison_criteria = model.comparison_criteria;
			var in_extraction_filter = "0";
			var in_comparison_filter = "0";
			var source_field_type = 'RECON';
			var action = "";
			var action_by = sessionStorage.getItem("usrname");
			var preprocesscondition_gid = model.preprocesscondition_gid;
			if (preprocesscondition_gid == "0") {
				preprocesscondition_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			var in_open_flag = model.open_parentheses_flag;
			var in_close_flag = model.close_parentheses_flag;
			var in_join_condition = model.join_condition;
			$.ajax({
				type: "POST",
				url: '../Preprocess/conditiondatasave',
				dataType: 'json',
				data: JSON.stringify({
					in_preprocesscondition_gid: preprocesscondition_gid, in_preprocess_code: in_txtpreprocesscode, in_condition_seqno: condition_seqno, in_returnflag: returnflag,
					in_recon_field: source_field_code, in_extraction_criteria: extraction_criteria, in_extraction_filter: in_extraction_filter,
					in_lookup_field: comparison_field, in_comparison_criteria: comparison_criteria, in_comparison_filter: in_comparison_filter, in_source_field_type: source_field_type,
					in_open_flag: in_open_flag, in_close_flag: in_close_flag, in_join_condition: in_join_condition, in_Ldataset_code: in_Ldataset_code,
					in_action: action, in_action_by: action_by, in_active_status: status, in_Lreturn_field: in_Lreturn_field, in_setrecon_field: in_setrecon_field
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						preprocessfetch($("#txtpreprocesscode").val());
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function savelookup1() {
		try {
			if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				if ($("#cmblookupdataset").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Look up cannot be empty",
						type: 'green',
					});
					return;
				}
				var checkbox1 = document.getElementById("lookupflag");
				if (checkbox1.checked) {
					var muti_lookup_flag = '';
				} else {
					if ($("#Cmblookupdatasetfield").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Lookup Return Field cannot be empty",
							type: 'green',
						});
						return;
					}
					if ($("#Cmbreconfield1").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Update Recon Field cannot be empty",
							type: 'green',
						});
						return;
					}
				}
			}
			var grid = $("#grid_lookuprecon").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var in_txtpreprocesscode = $("#txtpreprocesscode").val();
			var in_Ldataset_code = $("#cmblookupdataset").val();
			var in_Lreturn_field = $("#Cmblookupdatasetfield").val();
			var in_setrecon_field = $("#Cmbreconfield1").val();
			var checkbox = document.getElementById("returnflag");
			var source_field_type = 'LOOKUP';
			if (checkbox.checked) {
				var returnflag = 'Y'
			} else {
				var returnflag = 'N'
			}
			var comparison_field = model.comparison_field;
			var condition_seqno = model.condition_seqno;
			var source_field_code = model.source_field_code;
			var extraction_criteria = model.extraction_criteria;
			var comparison_criteria = model.comparison_criteria;
			var in_extraction_filter = "0";
			var in_comparison_filter = "0";
			var action = "";
			var action_by = sessionStorage.getItem("usrname");
			var preprocesscondition_gid = model.preprocesscondition_gid;
			if (preprocesscondition_gid == "0") {
				preprocesscondition_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			var in_open_flag = model.open_parentheses_flag;
			var in_close_flag = model.close_parentheses_flag;
			var in_join_condition = model.join_condition;
			$.ajax({
				type: "POST",
				url: '../Preprocess/conditiondatasave',
				dataType: 'json',
				data: JSON.stringify({
					in_preprocesscondition_gid: preprocesscondition_gid, in_preprocess_code: in_txtpreprocesscode, in_condition_seqno: condition_seqno, in_returnflag: returnflag,
					in_recon_field: source_field_code, in_extraction_criteria: extraction_criteria, in_extraction_filter: in_extraction_filter,
					in_lookup_field: comparison_field, in_comparison_criteria: comparison_criteria, in_comparison_filter: in_comparison_filter, in_source_field_type: source_field_type,
					in_open_flag: in_open_flag, in_close_flag: in_close_flag, in_join_condition: in_join_condition, in_Ldataset_code: in_Ldataset_code,
					in_action: action, in_action_by: action_by, in_active_status: status, in_Lreturn_field: in_Lreturn_field, in_setrecon_field: in_setrecon_field
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						preprocessfetch($("#txtpreprocesscode").val());
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function myDeleteJslookup() {
		var grid = $("#grid_lookup").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var preprocesscondition_gid = parseInt(model.preprocesscondition_gid);
		if (preprocesscondition_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_txtpreprocesscode = $("#txtpreprocesscode").val();
						var in_Ldataset_code = $("#cmblookupdataset").val();
						var in_Lreturn_field = $("#Cmblookupdatasetfield").val();
						var in_setrecon_field = $("#Cmbreconfield1").val();
						var returnflag = "";
						var comparison_field = model.comparison_field;
						var condition_seqno = model.condition_seqno;
						var source_field_code = model.source_field_code;
						var extraction_criteria = model.extraction_criteria;
						var comparison_criteria = model.comparison_criteria;
						var in_extraction_filter = "0";
						var in_comparison_filter = "0";
						var source_field_type = '';
						var action = "DELETE";
						var action_by = sessionStorage.getItem("usrname");
						var preprocesscondition_gid = model.preprocesscondition_gid;

						var status = "Y";
						var in_open_flag = "";
						if ($('#chk_sels_' + model.preprocesscondition_gid).is(":checked")) {
							in_open_flag = "Y";
						} else {
							in_open_flag = "N";
						}
						var in_close_flag = "";
						if ($('#chk_sels1_' + model.preprocesscondition_gid).is(":checked")) {
							in_close_flag = "Y";
						} else {
							in_close_flag = "N";
						}
						var in_join_condition = model.join_condition;
						$.ajax({
							type: "POST",
							url: '../Preprocess/conditiondatasave',
							dataType: 'json',
							data: JSON.stringify({
								in_preprocesscondition_gid: preprocesscondition_gid, in_preprocess_code: in_txtpreprocesscode, in_condition_seqno: condition_seqno, in_returnflag: returnflag,
								in_recon_field: source_field_code, in_extraction_criteria: extraction_criteria, in_extraction_filter: in_extraction_filter,
								in_lookup_field: comparison_field, in_comparison_criteria: comparison_criteria, in_comparison_filter: in_comparison_filter, in_source_field_type: source_field_type,
								in_open_flag: in_open_flag, in_close_flag: in_close_flag, in_join_condition: in_join_condition, in_Ldataset_code: in_Ldataset_code,
								in_action: action, in_action_by: action_by, in_active_status: status, in_Lreturn_field: in_Lreturn_field, in_setrecon_field: in_setrecon_field
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									preprocessfetch($("#txtpreprocesscode").val());
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	function myDeleteJslookup1() {
		var grid = $("#grid_lookuprecon").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var preprocesscondition_gid = parseInt(model.preprocesscondition_gid);
		if (preprocesscondition_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_txtpreprocesscode = $("#txtpreprocesscode").val();
						var in_Ldataset_code = $("#cmblookupdataset").val();
						var in_Lreturn_field = $("#Cmblookupdatasetfield").val();
						var in_setrecon_field = $("#Cmbreconfield1").val();
						var returnflag = "";
						var comparison_field = model.comparison_field;
						var condition_seqno = model.condition_seqno;
						var source_field_code = model.source_field_code;
						var extraction_criteria = model.extraction_criteria;
						var comparison_criteria = model.comparison_criteria;
						var in_extraction_filter = "0";
						var in_comparison_filter = "0";
						var source_field_type = '';
						var action = "DELETE";
						var action_by = sessionStorage.getItem("usrname");
						var preprocesscondition_gid = model.preprocesscondition_gid;

						var status = "Y";
						var in_open_flag = "";
						if ($('#chk_sels_' + model.preprocesscondition_gid).is(":checked")) {
							in_open_flag = "Y";
						} else {
							in_open_flag = "N";
						}
						var in_close_flag = "";
						if ($('#chk_sels1_' + model.preprocesscondition_gid).is(":checked")) {
							in_close_flag = "Y";
						} else {
							in_close_flag = "N";
						}
						var in_join_condition = model.join_condition;
						$.ajax({
							type: "POST",
							url: '../Preprocess/conditiondatasave',
							dataType: 'json',
							data: JSON.stringify({
								in_preprocesscondition_gid: preprocesscondition_gid, in_preprocess_code: in_txtpreprocesscode, in_condition_seqno: condition_seqno, in_returnflag: returnflag,
								in_recon_field: source_field_code, in_extraction_criteria: extraction_criteria, in_extraction_filter: in_extraction_filter,
								in_lookup_field: comparison_field, in_comparison_criteria: comparison_criteria, in_comparison_filter: in_comparison_filter, in_source_field_type: source_field_type,
								in_open_flag: in_open_flag, in_close_flag: in_close_flag, in_join_condition: in_join_condition, in_Ldataset_code: in_Ldataset_code,
								in_action: action, in_action_by: action_by, in_active_status: status, in_Lreturn_field: in_Lreturn_field, in_setrecon_field: in_setrecon_field
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									preprocessfetch($("#txtpreprocesscode").val());
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	function validatequery1() {
		var in_sql = $("#querydata").val();
		var index = in_sql.toLowerCase().indexOf("where");
		if (index !== -1) {
			in_sql = in_sql + "  and 1=2"
		} else {
			in_sql = in_sql + "  where 1=2"
		}
		var in_action_by = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Preprocess/validatequery',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_sql: in_sql, in_action_by: in_action_by }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != "[]") {
					var result = JSON.parse(response);
					var data = result[0];
					if (data.out_result == "1") {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'green',
						});
						$("#validquery").val("true");
					} else {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'red',
						});
					}
				} else {
					$.alert({
						title: 'Recon',
						content: "failed",
						type: 'red',
					});
					$("#validquery").val("false");
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	function saveheader() {
		var preprocess_clone = $("#Cmbclone").val();
		if (preprocess_clone == '') {
			saveheadernew()
		} else {
			saveclone();
		}
	}
	function saveheadernew() {
		try {
			if ($("#preprocessname").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Name cannot be empty",
					type: 'green',
				});
				return;
			}
			if ($("#preprocessorder").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Order cannot be empty",
					type: 'green',
				});
				return;
			}
			var preprocess_name = $("#preprocessname").val();
			var preprocess_Code = $("#txtpreprocesscode").val();
			var recon_code = $("#cmbrecon").val();
			var process_method = $("#Cmbprocessmethod").val();
			var postprocessflag = $("#postprocessflag").val();
			var returnflag = '';
			var expression = "";
			var get_recon_field = "";
			var set_recon_field = "";
			var process_function = "";
			var lookup_dataset_code = "";
			var lookup_return_field = "";
			var process_query = "";
			var clone_process = "";
			var muti_lookup_flag = "";
			if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
				get_recon_field = $("#cmbgetrecon").val();
				set_recon_field = $("#Cmbreconfield").val();
				process_function = $("#Cmbfunction").val();

			} else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				if ($("#cmblookupdataset").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Look up cannot be empty",
						type: 'green',
					});
					return;
				}
				lookup_dataset_code = $("#cmblookupdataset").val();
				lookup_return_field = $("#Cmblookupdatasetfield").val();
				set_recon_field = $("#Cmbreconfield1").val();
				var checkbox1 = document.getElementById("lookupflag");
				if (checkbox1.checked) {
					lookup_return_field = "";
					set_recon_field = "";
					muti_lookup_flag = 'Y';
				} else {
					if ($("#Cmblookupdatasetfield").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Lookup Return Field cannot be empty",
							type: 'green',
						});
						return;
					}
					if ($("#Cmbreconfield1").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Update Recon Field cannot be empty",
							type: 'green',
						});
						return;
					}
					muti_lookup_flag = '';
				}

				var checkbox = document.getElementById("returnflag");
				if (checkbox.checked) {
					var returnflag = 'Y';
				} else {
					var returnflag = 'N';
				}
			} else if ($("#Cmbprocessmethod").val() == 'QCD_QUERY') {
				process_query = $("#querydata").val();
				//if ($("#validquery").val() == "false") {
				//	$.alert({
				//		title: 'Recon',
				//		content: "Kindly Validate the Query",
				//		type: 'green',
				//	});
				//	return;
				//}
			} else if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
				expression = $("#CmbExpression").val();
				set_recon_field = $("#Cmbreconfield2").val();
			}

			var preprocess_order = $("#preprocessorder").val();
			var action = "";
			var preprocess_gid = $("#preprocessgid").val();

			if (preprocess_gid > 0) {
				preprocess_gid = $("#preprocessgid").val();
				addRow();
				addRowrecon();
				return;
			} else {
				preprocess_gid = 0;
			}
			var holdflag = $("#holdflag").val();
			if ($("#txtmode").val() == "Create") {
				action = "INSERT"
			} else if ($("#txtmode").val() == "Edit") {
				action = "UPDATE"
			}
			var action_by = sessionStorage.getItem("usrname");
			var status = "D"
			$.ajax({
				type: "POST",
				url: '../Preprocess/preprocessheader',
				dataType: 'json',
				data: JSON.stringify({
					preprocess_name: preprocess_name, recon_code: recon_code, get_recon_field: get_recon_field, process_method: process_method, process_query: process_query, in_returnflag: returnflag,
					lookup_dataset_code: lookup_dataset_code, lookup_return_field, clone_process: clone_process, preprocess_order: preprocess_order, preprocess_Code: preprocess_Code, hold_flag: holdflag,
					set_recon_field: set_recon_field, process_function: process_function, in_action: action, lookup_multi_return_flag: muti_lookup_flag,
					in_action_by: action_by, preprocess_gid: preprocess_gid, active_status: status, expression: expression, postprocessflag: postprocessflag
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var result = JSON.parse(response);
					var data = result[0];
					if (data.out_result == "1") {
						$("#preprocessgid").val(data.in_preprocess_gid);
						$("#txtpreprocesscode").val(data.in_preprocess_code);
						addRow();
						//$("#Cmbprocessmethod").prop('disabled', true);
					} else {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'red',
						});
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function saveheaderlookup() {
		try {
			if ($("#preprocessname").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Name cannot be empty",
					type: 'green',
				});
				return;
			}
			if ($("#preprocessorder").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Order cannot be empty",
					type: 'green',
				});
				return;
			}
			var preprocess_name = $("#preprocessname").val();
			var preprocess_Code = $("#txtpreprocesscode").val();
			var recon_code = $("#cmbrecon").val();
			var process_method = $("#Cmbprocessmethod").val();
			var postprocessflag = $("#postprocessflag").val();
			var returnflag = '';
			var expression = "";
			var get_recon_field = "";
			var set_recon_field = "";
			var process_function = "";
			var lookup_dataset_code = "";
			var lookup_return_field = "";
			var process_query = "";
			var clone_process = "";
			var muti_lookup_flag = "";
			if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				if ($("#cmblookupdataset").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Look up cannot be empty",
						type: 'green',
					});
					return;
				}
				var checkbox1 = document.getElementById("lookupflag");
				if (checkbox1.checked) {
					muti_lookup_flag = 'Y';
				} else {
					muti_lookup_flag = '';
				}
				lookup_dataset_code = $("#cmblookupdataset").val();
				lookup_return_field = "";
				set_recon_field = "";
				var checkbox = document.getElementById("returnflag");
				if (checkbox.checked) {
					var returnflag = 'Y';
				} else {
					var returnflag = 'N';
				}
			}
			var preprocess_order = $("#preprocessorder").val();
			var action = "";
			var preprocess_gid = $("#preprocessgid").val();

			if (preprocess_gid > 0) {
				preprocess_gid = $("#preprocessgid").val();
				addRowlookup();
				return;
			} else {
				preprocess_gid = 0;
			}
			var holdflag = $("#holdflag").val();
			if ($("#txtmode").val() == "Create") {
				action = "INSERT"
			} else if ($("#txtmode").val() == "Edit") {
				action = "UPDATE"
			}
			var action_by = sessionStorage.getItem("usrname");
			var status = "D"
			$.ajax({
				type: "POST",
				url: '../Preprocess/preprocessheader',
				dataType: 'json',
				data: JSON.stringify({
					preprocess_name: preprocess_name, recon_code: recon_code, get_recon_field: get_recon_field, process_method: process_method, process_query: process_query, in_returnflag: returnflag,
					lookup_dataset_code: lookup_dataset_code, lookup_return_field, clone_process: clone_process, preprocess_order: preprocess_order, preprocess_Code: preprocess_Code, hold_flag: holdflag,
					set_recon_field: set_recon_field, process_function: process_function, lookup_multi_return_flag: muti_lookup_flag,
					in_action: action, in_action_by: action_by, preprocess_gid: preprocess_gid, active_status: status, expression: expression,
					postprocessflag: postprocessflag
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var result = JSON.parse(response);
					var data = result[0];
					if (data.out_result == "1") {
						$("#preprocessgid").val(data.in_preprocess_gid);
						$("#txtpreprocesscode").val(data.in_preprocess_code);
						addRowlookup();
						//$("#Cmbprocessmethod").prop('disabled', true);
					} else {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'red',
						});
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function savefilterheader() {
		var preprocess_clone = $("#Cmbclone").val();
		if (preprocess_clone == '') {
			savefilterheadernew()
		} else {
			saveclone();
		}
	}
	function savefilterheadernew() {
		try {
			if ($("#preprocessname").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Name cannot be empty",
					type: 'green',
				});
				return;
			}
			if ($("#preprocessorder").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Order cannot be empty",
					type: 'green',
				});
				return;
			}
			var returnflag = '';
			var preprocess_name = $("#preprocessname").val();
			var preprocess_Code = $("#txtpreprocesscode").val();
			var recon_code = $("#cmbrecon").val();
			var process_method = $("#Cmbprocessmethod").val();
			var postprocessflag = $("#postprocessflag").val();
			var get_recon_field = "";
			var expression = "";
			var set_recon_field = "";
			var process_function = "";
			var lookup_dataset_code = "";
			var lookup_return_field = "";
			var process_query = "";
			var clone_process = "";
			var muti_lookup_flag = "";
			if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
				get_recon_field = $("#cmbgetrecon").val();
				set_recon_field = $("#Cmbreconfield").val();
				process_function = $("#Cmbfunction").val();

			} else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				if ($("#cmblookupdataset").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Look up cannot be empty",
						type: 'green',
					});
					return;
				}
				lookup_dataset_code = $("#cmblookupdataset").val();
				lookup_return_field = $("#Cmblookupdatasetfield").val();
				set_recon_field = $("#Cmbreconfield1").val();
				var checkbox1 = document.getElementById("lookupflag");
				if (checkbox1.checked) {
					lookup_return_field = "";
					set_recon_field = "";
					muti_lookup_flag = 'Y';
				} else {
					if ($("#Cmblookupdatasetfield").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Lookup Return Field cannot be empty",
							type: 'green',
						});
						return;
					}
					if ($("#Cmbreconfield1").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Update Recon Field cannot be empty",
							type: 'green',
						});
						return;
					}
					muti_lookup_flag = '';
				}

				var checkbox = document.getElementById("returnflag");
				if (checkbox.checked) {
					var returnflag = 'Y';
				} else {
					var returnflag = 'N';
				}
			} else if ($("#Cmbprocessmethod").val() == 'QCD_QUERY') {
				process_query = $("#querydata").val();
				//if ($("#validquery").val() == "false") {
				//	$.alert({
				//		title: 'Recon',
				//		content: "Kindly Validate the Query",
				//		type: 'green',
				//	});
				//	return;
				//}
			} else if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
				expression = $("#CmbExpression").val();
				set_recon_field = $("#Cmbreconfield2").val();
			}

			var preprocess_order = $("#preprocessorder").val();
			var action = "";
			var preprocess_gid = $("#preprocessgid").val();

			if (preprocess_gid > 0) {
				preprocess_gid = $("#preprocessgid").val();
				addRowfilter();
				return;
			} else {
				preprocess_gid = 0;
			}
			var holdflag = $("#holdflag").val();
			if ($("#txtmode").val() == "Create") {
				action = "INSERT"
			} else if ($("#txtmode").val() == "Edit") {
				action = "UPDATE"
			}
			var action_by = sessionStorage.getItem("usrname");
			var status = "D"
			$.ajax({
				type: "POST",
				url: '../Preprocess/preprocessheader',
				dataType: 'json',
				data: JSON.stringify({
					preprocess_name: preprocess_name, recon_code: recon_code, get_recon_field: get_recon_field, process_method: process_method, process_query: process_query, in_returnflag: returnflag,
					lookup_dataset_code: lookup_dataset_code, lookup_return_field, clone_process: clone_process, preprocess_order: preprocess_order, preprocess_Code: preprocess_Code, hold_flag: holdflag,
					set_recon_field: set_recon_field, process_function: process_function, lookup_multi_return_flag: muti_lookup_flag,
					in_action: action, in_action_by: action_by, preprocess_gid: preprocess_gid, active_status: status, expression: expression,
					postprocessflag: postprocessflag
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var result = JSON.parse(response);
					var data = result[0];
					if (data.out_result == "1") {
						$("#preprocessgid").val(data.in_preprocess_gid);
						$("#txtpreprocesscode").val(data.in_preprocess_code);
						addRowfilter();
					} else {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'red',
						});
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function savefilterheader1() {
		var preprocess_clone = $("#Cmbclone").val();
		if (preprocess_clone == '') {
			savefilterheadernew1()
		} else {
			saveclone();
		}
	}
	function savefilterheadernew1() {
		try {
			if ($("#preprocessname").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Name cannot be empty",
					type: 'green',
				});
				return;
			}
			if ($("#preprocessorder").val() == "") {
				$.alert({
					title: 'Recon',
					content: "Preprocess Order cannot be empty",
					type: 'green',
				});
				return;
			}
			var returnflag = '';
			var preprocess_name = $("#preprocessname").val();
			var preprocess_Code = $("#txtpreprocesscode").val();
			var recon_code = $("#cmbrecon").val();
			var process_method = $("#Cmbprocessmethod").val();
			var postprocessflag = $("#postprocessflag").val();
			var get_recon_field = "";
			var expression = "";
			var set_recon_field = "";
			var process_function = "";
			var lookup_dataset_code = "";
			var lookup_return_field = "";
			var process_query = "";
			var clone_process = "";
			var muti_lookup_flag = "";
			if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
				get_recon_field = $("#cmbgetrecon").val();
				set_recon_field = $("#Cmbreconfield").val();
				process_function = $("#Cmbfunction").val();

			} else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				if ($("#cmblookupdataset").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Look up cannot be empty",
						type: 'green',
					});
					return;
				}
				lookup_dataset_code = $("#cmblookupdataset").val();
				lookup_return_field = $("#Cmblookupdatasetfield").val();
				set_recon_field = $("#Cmbreconfield1").val();
				var checkbox1 = document.getElementById("lookupflag");
				if (checkbox1.checked) {
					lookup_return_field = "";
					set_recon_field = "";
					muti_lookup_flag = 'Y';
				} else {
					if ($("#Cmblookupdatasetfield").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Lookup Return Field cannot be empty",
							type: 'green',
						});
						return;
					}
					if ($("#Cmbreconfield1").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Update Recon Field cannot be empty",
							type: 'green',
						});
						return;
					}
					muti_lookup_flag = '';
				}

				var checkbox = document.getElementById("returnflag");
				if (checkbox.checked) {
					var returnflag = 'Y';
				} else {
					var returnflag = 'N';
				}
			} else if ($("#Cmbprocessmethod").val() == 'QCD_QUERY') {
				process_query = $("#querydata").val();
				//if ($("#validquery").val() == "false") {
				//	$.alert({
				//		title: 'Recon',
				//		content: "Kindly Validate the Query",
				//		type: 'green',
				//	});
				//	return;
				//}
			} else if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
				expression = $("#CmbExpression").val();
				set_recon_field = $("#Cmbreconfield2").val();
			}

			var preprocess_order = $("#preprocessorder").val();
			var action = "";
			var preprocess_gid = $("#preprocessgid").val();

			if (preprocess_gid > 0) {
				preprocess_gid = $("#preprocessgid").val();
				addRowlookupfilter();
				return;
			} else {
				preprocess_gid = 0;
			}
			var holdflag = $("#holdflag").val();
			if ($("#txtmode").val() == "Create") {
				action = "INSERT"
			} else if ($("#txtmode").val() == "Edit") {
				action = "UPDATE"
			}
			var action_by = sessionStorage.getItem("usrname");
			var status = "D"
			$.ajax({
				type: "POST",
				url: '../Preprocess/preprocessheader',
				dataType: 'json',
				data: JSON.stringify({
					preprocess_name: preprocess_name, recon_code: recon_code, get_recon_field: get_recon_field, process_method: process_method, process_query: process_query, in_returnflag: returnflag,
					lookup_dataset_code: lookup_dataset_code, lookup_return_field, clone_process: clone_process, preprocess_order: preprocess_order, preprocess_Code: preprocess_Code, hold_flag: holdflag,
					set_recon_field: set_recon_field, process_function: process_function, lookup_multi_return_flag: muti_lookup_flag,
					in_action: action, in_action_by: action_by, preprocess_gid: preprocess_gid, active_status: status, expression: expression,
					postprocessflag: postprocessflag
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var result = JSON.parse(response);
					var data = result[0];
					if (data.out_result == "1") {
						$("#preprocessgid").val(data.in_preprocess_gid);
						$("#txtpreprocesscode").val(data.in_preprocess_code);
						addRowlookupfilter();
					} else {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'red',
						});
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function saveheadersubmit() {
		var preprocess_clone = $("#Cmbclone").val();
		if (preprocess_clone == '') {
			saveheadersubmitnew()
		} else {
			saveclone();
		}
	}
	function saveheadersubmitnew() {
		try {
			var preprocess_name = $("#preprocessname").val();
			var preprocess_Code = $("#txtpreprocesscode").val();
			var recon_code = $("#cmbrecon").val();
			var process_method = $("#Cmbprocessmethod").val();
			var postprocessflag = $("#postprocessflag").val();
			var get_recon_field = "";
			var set_recon_field = "";
			var expression = "";
			var process_function = "";
			var lookup_dataset_code = "";
			var lookup_return_field = "";
			var process_query = "";
			var clone_process = "";
			var returnflag = '';
			var muti_lookup_flag = "";
			if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
				if ($("#cmbgetrecon").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Lookup Recon Field  cannot be empty",
						type: 'green',
					});
					return;
				}
				if ($("#Cmbreconfield").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Update Recon Field  cannot be empty",
						type: 'green',
					});
					return;
				}
				if ($("#Cmbfunction").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Lookup Function cannot be empty",
						type: 'green',
					});
					return;
				}
				get_recon_field = $("#cmbgetrecon").val();
				set_recon_field = $("#Cmbreconfield").val();
				process_function = $("#Cmbfunction").val();

			} else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				if ($("#cmblookupdataset").val() == "") {
					$.alert({
						title: 'Recon',
						content: "Look up cannot be empty",
						type: 'green',
					});
					return;
				}
				lookup_dataset_code = $("#cmblookupdataset").val();
				lookup_return_field = $("#Cmblookupdatasetfield").val();
				set_recon_field = $("#Cmbreconfield1").val();
				var checkbox1 = document.getElementById("lookupflag");
				if (checkbox1.checked) {
					lookup_return_field = "";
					set_recon_field = "";
					muti_lookup_flag = 'Y';
				} else {
					if ($("#Cmblookupdatasetfield").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Lookup Return Field cannot be empty",
							type: 'green',
						});
						return;
					}
					if ($("#Cmbreconfield1").val() == "") {
						$.alert({
							title: 'Recon',
							content: "Update Recon Field cannot be empty",
							type: 'green',
						});
						return;
					}
					muti_lookup_flag = '';
				}

				var checkbox = document.getElementById("returnflag");
				if (checkbox.checked) {
					var returnflag = 'Y';
				} else {
					var returnflag = 'N';
				}

			} else if ($("#Cmbprocessmethod").val() == 'QCD_QUERY') {
				process_query = $("#querydata").val();
				//if ($("#validquery").val() == "false") {
				//	$.alert({
				//		title: 'Recon',
				//		content: "Kindly Validate the Query",
				//		type: 'green',
				//	});
				//	return;
				//}
			} else if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
				expression = $("#CmbExpression").val();
				set_recon_field = $("#Cmbreconfield2").val();
			}

			var preprocess_order = $("#preprocessorder").val();
			var action = "";
			var preprocess_gid = $("#preprocessgid").val();
			var status = "";

			if (preprocess_gid > 0) {
				preprocess_gid = $("#preprocessgid").val();
				action = "UPDATE"
				status = "Y";
			} else {
				preprocess_gid = 0;
				action = "INSERT"
				status = "D";
			}


			var action_by = sessionStorage.getItem("usrname");

			var holdflag = $("#holdflag").val();
			$.ajax({
				type: "POST",
				url: '../Preprocess/preprocessheader',
				dataType: 'json',
				data: JSON.stringify({
					preprocess_name: preprocess_name, recon_code: recon_code, get_recon_field: get_recon_field, process_method: process_method, process_query: process_query, in_returnflag: returnflag,
					lookup_dataset_code: lookup_dataset_code, lookup_return_field, clone_process: clone_process, preprocess_order: preprocess_order, preprocess_Code: preprocess_Code, hold_flag: holdflag,
					set_recon_field: set_recon_field, process_function: process_function, lookup_multi_return_flag: muti_lookup_flag,
					in_action: action, in_action_by: action_by, preprocess_gid: preprocess_gid, active_status: status, expression: expression,
					postprocessflag: postprocessflag
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var result = JSON.parse(response);
					var data = result[0];
					if (data.out_result == "1") {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'green',
						});
						$("#preprocessgid").val(data.in_preprocess_gid);
						$("#txtpreprocesscode").val(data.in_preprocess_code);
						preprocessfetch($("#txtpreprocesscode").val());
					} else {
						$.alert({
							title: 'Recon',
							content: data.out_msg,
							type: 'red',
						});
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function saveclone() {
		if ($("#Cmbclone").val() == "") {
			$.alert({
				title: 'Recon',
				content: "Clone Preprocess cannot be empty",
				type: 'green',
			});
			return;
		}
		$.confirm({
			icon: 'fa fa-info',
			title: 'Recon',
			theme: 'dark',
			content: 'Are you sure to Clone ?',
			type: 'orange',
			buttons: {
				confirm: function () {
					var newproprecssName = $("#preprocessname").val();
					var selectedpreprocessCode = $("#Cmbclone").val();
					var in_user_code = sessionStorage.getItem("usrname");
					$.ajax({
						type: "POST",
						url: '../Preprocess/preprocessclone',
						dataType: 'json',
						data: JSON.stringify({ in_preprocess_name: newproprecssName, in_clone_preprocess_code: selectedpreprocessCode, in_user_code: in_user_code }),
						contentType: 'application/json; charset=utf-8',
						success: function (response) {
							var result = JSON.parse(response);
							if (result.length > 0) {
								if (result[0].out_result == '1') {
									$.alert({
										title: 'Recon',
										content: result[0].out_msg,
										type: 'green',
									});
									preprocessfetch(result[0].out_preprocess_code);
								} else {
									$.alert({
										title: 'Recon',
										content: result[0].out_msg,
										type: 'red',
									});
								}
							}
						}
					});
					$("#Cmbclone").val("");
				},
				cancel: function () {
					$.alert({
						icon: 'fa fa-success',
						title: 'Recon',
						theme: 'dark',
						content: 'clone Canceled.!',
						type: 'blue',
						animationSpeed: 700,
					});
					$("#Cmbclone").val("");
				},
			},
		});
	}
	function processmethod1() {
		if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
			$("#cmblookupdataset").val('');
			$("#Cmblookupdatasetfield").val('');
			$("#Cmbreconfield1").val('');
			$("#querydata").val('');
			$("#headingquery").hide();
			$("#headinglookup").hide();
			$("#headinglookupdataset").hide();
			$("#headinglookuprecon").hide();
			$("#headinglookupfilter").hide();
			$("#headingexpression").hide();
			$("#headingfunction").show();
			$("#headingfilter").show();
			//$("#check1").prop('checked', true);
			$("#check2").prop('checked', true);

		} else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
			$("#Cmbreconfield").val('');
			$("#Cmbfunction").val('');
			$("#cmbgetrecon").val('');
			$("#cmblookupdataset").val('');
			$("#Cmblookupdatasetfield").val('');
			$("#Cmbreconfield1").val('');
			$("#querydata").val('');
			$("#headingquery").hide();
			$("#headinglookupdataset").show();
			$("#headinglookup").show();
			$("#headinglookuprecon").show();
			$("#headinglookupfilter").show();
			$("#headingfunction").hide();
			$("#headingexpression").hide();
			$("#headingfilter").show();
			$("#check3").prop('checked', true);
			//$("#check4").prop('checked', true);
			//$("#check5").prop('checked', true);
			//$("#check6").prop('checked', true);
			//$("#check7").prop('checked', true);
			$("#lookupgrid").hide();
		} else if ($("#Cmbprocessmethod").val() == 'QCD_QUERY') {
			$("#Cmbreconfield").val('');
			$("#Cmbfunction").val('');
			$("#cmbgetrecon").val('');
			$("#cmblookupdataset").val('');
			$("#Cmblookupdatasetfield").val('');
			$("#Cmbreconfield1").val('');
			$("#headingquery").show();
			$("#headinglookup").hide();
			$("#headinglookupdataset").hide();
			$("#headinglookuprecon").hide();
			$("#headinglookupfilter").hide();
			$("#headingfunction").hide();
			$("#headingexpression").hide();
			$("#headingfilter").hide();
			$("#check6").prop('checked', true);
			$("#validquery").val("false");
		} else if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
			$("#cmblookupdataset").val('');
			$("#Cmblookupdatasetfield").val('');
			$("#Cmbreconfield1").val('');
			$("#querydata").val('');
			$("#headingquery").hide();
			$("#headinglookup").hide();
			$("#headinglookupdataset").hide();
			$("#headinglookuprecon").hide();
			$("#headinglookupfilter").hide();
			$("#headingfunction").hide();
			$("#headingexpression").show();
			$("#headingfilter").show();
			$("#check8").prop('checked', true);
			//$("#check1").prop('checked', true);
		}
	}
	function savelookupfield() {
		var grid = $("#grid_lookupfield").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var in_txtpreprocesscode = $("#txtpreprocesscode").val();
		var in_lookup_seqno = model.lookup_seqno;
		var lookup_return_field = model.lookup_return_field;
		var set_recon_field = model.set_recon_field;
		var action = "";
		var action_by = sessionStorage.getItem("usrname");
		var preprocesslookup_gid = model.preprocesslookup_gid;
		if (preprocesslookup_gid == "0") {
			preprocesslookup_gid = 0;
			action = "INSERT"
		} else {
			action = "UPDATE"
		}
		var status = 'Y';
		$.ajax({
			type: "POST",
			url: '../Preprocess/lookupfieldsave',
			dataType: 'json',
			data: JSON.stringify({
				in_preprocesslookup_gid: preprocesslookup_gid, in_preprocess_code: in_txtpreprocesscode, in_lookup_seqno: in_lookup_seqno, in_lookup_return_field: lookup_return_field,
				in_set_recon_field: set_recon_field, in_action: action, in_user_code: action_by, in_active_status: status
			}),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					$.alert({
						title: 'Recon',
						content: response.out_msg,
						type: 'green',
					});
					preprocessfetch($("#txtpreprocesscode").val());
				}
				else {

				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	function lookupflagjs() {
		var checkbox = document.getElementById("lookupflag");
		if (checkbox.checked) {
			$("#lookupgrid").show();
			$("#Cmblookupdatasetfield").prop('disabled', true);
			$("#Cmbreconfield1").prop('disabled', true);
			$("#luprfield").hide();
			$("#uprfield").hide();
			$("#rflag").hide();
		} else {
			$("#lookupgrid").hide();
			$("#Cmblookupdatasetfield").prop('disabled', false);
			$("#Cmbreconfield1").prop('disabled', false);
			$("#luprfield").show();
			$("#uprfield").show();
			$("#rflag").show();
		}
	}
	function myDeleteJslookupfield() {
		var grid = $("#grid_lookupfield").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var preprocesslookup_gid = parseInt(model.preprocesslookup_gid);
		if (preprocesslookup_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_txtpreprocesscode = $("#txtpreprocesscode").val();
						var in_lookup_seqno = model.lookup_seqno;
						var lookup_return_field = model.lookup_return_field;
						var set_recon_field = model.set_recon_field;
						var action = "DELETE";
						var action_by = sessionStorage.getItem("usrname");
						var preprocesslookup_gid = model.preprocesslookup_gid;						
						var status = 'Y';
						$.ajax({
							type: "POST",
							url: '../Preprocess/lookupfieldsave',
							dataType: 'json',
							data: JSON.stringify({
								in_preprocesslookup_gid: preprocesslookup_gid, in_preprocess_code: in_txtpreprocesscode, in_lookup_seqno: in_lookup_seqno, in_lookup_return_field: lookup_return_field,
								in_set_recon_field: set_recon_field, in_action: action, in_user_code: action_by, in_active_status: status
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response != null) {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'green',
									});
									preprocessfetch($("#txtpreprocesscode").val());
								}
								else {

								}
							},
							error: function (er) {
								alert(er)
								console.log(er)
							}

						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
</script>

