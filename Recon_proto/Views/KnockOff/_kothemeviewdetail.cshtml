
<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.k-state-selected, .k-state-selected:link, .k-state-selected:visited, .k-list > .k-state-selected, .k-list > .k-state-highlight, .k-panel > .k-state-selected, .k-ghost-splitbar-vertical, .k-ghost-splitbar-horizontal, .k-draghandle.k-state-selected:hover, .k-scheduler .k-scheduler-toolbar .k-state-selected, .k-scheduler .k-today.k-state-selected, .k-marquee-color {
			border-color: #872E7B !important;
			color: #e74949 !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid-filter.k-state-active {
			background-color: initial !important;
		}

		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}
	</style>
</head>
<body>
	<form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
		<div class="row" style="margin-top: -17px;">
			<div class="col-sm-6">
				<div class="row">
					<div class="col-sm-4">
						<label for="lbldatasetcode" class="form-label">Theme Code</label>
						<input class="form-control" type="text" id="txtthemecode" disabled>
					</div>
					<div class="col-sm-4">
						<label for="lblmode" class="form-label">Mode</label>
						<input class="form-control" type="text" id="txtmode1" value="Create" disabled>
					</div>
					<div class="col-sm-4">
						<label for="lblstatus" class="form-label">Status</label><br>
						<input class="form-control" type="text" id="txtstatus1" value="" disabled>
					</div>
				</div>
			</div>
			<div class="col-sm-6">
				<div class="col-sm-4">
					<label class="form-label" for="">Theme Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
					<input class="form-control" type="text" id="themename">
					<input class="form-control" type="hidden" id="themegid" value=0>
				</div>				
			</div>
		</div>
		<div class="row" style="margin-bottom:5px;">	
			<div class="col-sm-3">
				<label class="form-label" for="">Recon&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="cmbrecon" class="form-select form-control" onchange="reconchangetheme()" disabled>
				</select>
			</div>
			<div class="col-sm-2" style="width:11%">
				<label class="form-label" style="width: 84px;" for="">Theme Order&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<input class="form-control" type="text" id="theme_order" value="0" onpaste="return false;" maxlength="5" onkeypress='return isNumberKey(event)'>
			</div>
			<div class="col-md-2" style="width:16%">
				<label for="" class="form-label">Theme Type&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="themetype" class="form-select form-control" style=" width:100%;" onchange="fthemetype()" disabled>
				</select>
			</div>
			<div class="col-sm-1" style="width:20%">
				<label id="sourceparentdataset" class="form-label">Source Dataset&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="sourcedatasettheme" class="form-select form-control" style=" width: 100%;" onchange="sourcefieldchange()" disabled>
				</select>
			</div>
			<div class="col-sm-1" style="width:20%">
				<label id=comsupdataset class="form-label">Comparison Dataset</label>
				<select id="comdatasettheme" class="form-select form-control" style=" width: 100%;" disabled>
				</select>
			</div>
		</div>
		<div class="row" style="margin-top:5px">
			<div class="nav-align-top">
				<ul class="nav nav-pills mb-2" role="tablist">
					<li class="nav-item">
						<button type="button" id="themeCondition"
								class="nav-link active"
								role="tab"
								data-bs-toggle="tab"
								data-bs-target="#navs-pills-themecondition"
								aria-controls="navs-pills-themecondition"
								aria-selected="true">
							Theme Condition
						</button>
					</li>
					<li class="nav-item">
						<button type="button" id="sourcefilter"
								class="nav-link"
								role="tab"
								data-bs-toggle="tab"
								data-bs-target="#navs-pills-top-sourcefilter"
								aria-controls="navs-pills-top-sourcefilter"
								aria-selected="true">
							Source Filter
						</button>
					</li>
					<li class="nav-item">
						<button type="button" id="comparisionfilter"
								class="nav-link"
								role="tab"
								data-bs-toggle="tab"
								data-bs-target="#navs-pills-top-comparisionfilter"
								aria-controls="navs-pills-top-comparisionfilter"
								aria-selected="true">
							Comparison Filter
						</button>
					</li>
					<li class="nav-item">
						<button type="button" id="grouping2"
								class="nav-link"
								role="tab"
								data-bs-toggle="tab"
								data-bs-target="#navs-pills-top-grouping2"
								aria-controls="navs-pills-top-grouping2"
								aria-selected="true">
							Additional Grouping Field
						</button>
					</li>
					<li class="nav-item">
						<button type="button" id="aggregatefunction1"
								class="nav-link"
								role="tab"
								data-bs-toggle="tab"
								data-bs-target="#navs-pills-top-aggregatefunction3"
								aria-controls="navs-pills-top-aggregatefunction3"
								aria-selected="true">
							Aggregate Function
						</button>
					</li>
					<li class="nav-item">
						<button type="button" id="aggregatecondition1"
								class="nav-link"
								role="tab"
								data-bs-toggle="tab"
								data-bs-target="#navs-pills-top-aggregatecondition1"
								aria-controls="navs-pills-top-aggregatecondition1"
								aria-selected="true">
							Aggregate Condition
						</button>
					</li>
					<li class="nav-item">
						<button type="button" id="themequery"
								class="nav-link"
								role="tab"
								data-bs-toggle="tab"
								data-bs-target="#navs-pills-top-themequery"
								aria-controls="navs-pills-top-themequery"
								aria-selected="true">
							Query
						</button>
					</li>
				</ul>
				<div class="tab-content">
					<div class="tab-pane fade show active" id="navs-pills-themecondition" role="tabpanel" style="margin-top:-13px;">
						<div class="panel panel-default">
							<div class="panel-body">
								<div class="row" style="padding-bottom:3px;padding-right:5px;">
									<div class="col-xs-12">
										<div class="popup-dialog">
											<div id="gd_themecondition">
												<div id="grid_themecondition">
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="tab-pane fade" id="navs-pills-top-sourcefilter" role="tabpanel" style="margin-top:-19px;">
						<div class="panel panel-default">
							<div class="panel-body">
								<div class="row" style="margin-top:5px;">
									<div class="col-xs-12">
										<div class="popup-dialog">
											<div id="gd_themefilter">
												<div id="grid_themefilterfield">
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="tab-pane fade" id="navs-pills-top-comparisionfilter" role="tabpanel" style="margin-top:-19px;">
						<div class="panel panel-default">
							<div class="panel-body">
								<div class="row" style="margin-top:5px;">
									<div class="col-xs-12">
										<div class="popup-dialog">
											<div id="gd_comparisionfilter">
												<div id="grid_comparisionfilter">
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="tab-pane fade" id="navs-pills-top-grouping2" role="tabpanel" style="margin-top:-19px;">
						<div class="panel panel-default">
							<div class="row" style="padding-bottom:3px;padding-right:5px;">
								<div class="col-xs-12">
									<div class="popup-dialog">
										<div id="gd_grouping">
											<div id="grid_themegrouping">
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="tab-pane fade" id="navs-pills-top-aggregatefunction3" role="tabpanel" style="margin-top:-19px;">
						<div class="panel panel-default">
							<div class="row" style="padding-bottom:3px;padding-right:5px;">
								<div class="col-xs-12">
									<div class="popup-dialog">
										<div id="gd_aggfunction1">
											<div id="grid_aggfunction1">
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="tab-pane fade" id="navs-pills-top-aggregatecondition1" role="tabpanel" style="margin-top:-19px;">
						<div class="panel panel-default">
							<div class="row" style="padding-bottom:3px;padding-right:5px;">
								<div class="col-xs-12">
									<div class="popup-dialog">
										<div id="gd_aggcondition1">
											<div id="grid_aggcondition1">
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
					<div class="tab-pane fade" id="navs-pills-top-themequery" role="tabpanel" style="margin-top:-19px;">
						<div class="panel panel-default">
							<div class="row" style="padding-bottom:3px;padding-right:5px;">
								<div id="collapsequery">
									<textarea id="querydata" name="querydata" rows="4" style="margin-top: 20px;height: 115px;width: 1000px;border-radius: 0.375rem;"></textarea>
									@*<button type="button" id="validatequery" class="btn btn-sm btn btn-primary" onclick="validatequery1()">Validate</button>&nbsp;&nbsp;&nbsp;*@
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-4">
			</div>
			<div class="col-sm-4" style="margin-left:-190px;margin-top: 9px">
				<i class="btn btn-sm cancel_btn me-2" data-bs-dismiss="modal" style="color: #000000;float:right">Cancel</i>
			</div>
			<div class="col-sm-4">
			</div>
		</div>
	</form>

</body>
</html>
<script>

	function getGridthemeComboList() {
		//recon name
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = sessionStorage.getItem("usrname");
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbrecon").empty();
				$("#cmbrecon").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.active_status == 'Y') {
						$("#cmbrecon").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					}
				});
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		var in_master_code = "QCD_RS_ACC_MODE";
		var in_user_code = sessionStorage.getItem("usrname");
		var response = [];
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (data) {
				response = data;
				$("#Cmbdatasetaccmode").empty();
				$("#Cmbdatasetaccmode").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#Cmbdatasetaccmode").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
			}
		});
		// holdflag flag
		var in_master_code = "QCD_YN";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#holdflag").empty();
				$("#holdflag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#holdflag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});
		// theme_type flag
		var in_master_code = "QCD_THEME_TYPE";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#themetype").empty();
				$("#themetype").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#themetype").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});
		themeload();
	}
	function fthemetype() {
		var themetype = $("#themetype").val();
		if (themetype == "QCD_THEME_DIRECT") {
			if ($('#sourcefilter').attr('class') != 'nav-link active') {
				$("#sourcefilter").removeClass('nav-link');
				$("#sourcefilter").toggleClass('nav-link active');
				$("div#navs-pills-top-sourcefilter").removeClass('tab-pane fade');
				$("div#navs-pills-top-sourcefilter").toggleClass('tab-pane fade active show');
			}
			if ($('#comparisionfilter').attr('class') == 'nav-link active') {
				$("#comparisionfilter").removeClass('nav-link active');
				$("#comparisionfilter").toggleClass('nav-link');
				$("div#navs-pills-top-comparisionfilter").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-comparisionfilter").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
				$("div#navs-pills-top-grouping2").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-grouping2").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
			}
			if ($('#aggregatefunction1').attr('class') == 'nav-link active') {
				$("#aggregatefunction1").removeClass('nav-link active');
				$("#aggregatefunction1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatefunction3").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatefunction3").toggleClass('tab-pane fade');
			}
			if ($('#aggregatecondition1').attr('class') == 'nav-link active') {
				$("#aggregatecondition1").removeClass('nav-link active');
				$("#aggregatecondition1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatecondition1").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatecondition1").toggleClass('tab-pane fade');
			}
			if ($('#themequery').attr('class') == 'nav-link active') {
				$("#themequery").removeClass('nav-link active');
				$("#themequery").toggleClass('nav-link');
				$("div#navs-pills-top-themequery").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-themequery").toggleClass('tab-pane fade');
			}
			if ($('#themeCondition').attr('class') == 'nav-link active') {
				$("#themeCondition").removeClass('nav-link');
				$("#themeCondition").toggleClass('nav-link active');
				$("div#navs-pills-themecondition").removeClass('tab-pane fade active show');
				$("div#navs-pills-themecondition").toggleClass('tab-pane fade');
			}
			$("#sourcedataset").prop('disabled', true);
			$("#comdataset").prop('disabled', true);
			$("#themeCondition").hide();
			$("#sourcefilter").show();
			$("#comparisionfilter").hide();
			$("#grouping2").hide();
			$("#aggregatefunction1").hide();
			$("#aggregatecondition1").hide();
			$("#themequery").hide();
			$("#lblsourcedataset").text("Source Dataset").append("&nbsp;");
			$("#lblcomdataset").text("Comparison Dataset").append("&nbsp;");
		} else if (themetype == "QCD_THEME_QUERY") {
			if ($('#sourcefilter').attr('class') == 'nav-link active') {
				$("#sourcefilter").removeClass('nav-link active');
				$("#sourcefilter").toggleClass('nav-link');
				$("div#navs-pills-top-sourcefilter").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-sourcefilter").toggleClass('tab-pane fade');
			}
			if ($('#comparisionfilter').attr('class') == 'nav-link active') {
				$("#comparisionfilter").removeClass('nav-link active');
				$("#comparisionfilter").toggleClass('nav-link');
				$("div#navs-pills-top-comparisionfilter").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-comparisionfilter").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
				$("div#navs-pills-top-grouping2").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-grouping2").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
			}
			if ($('#aggregatefunction1').attr('class') == 'nav-link active') {
				$("#aggregatefunction1").removeClass('nav-link active');
				$("#aggregatefunction1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatefunction3").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatefunction3").toggleClass('tab-pane fade');
			}
			if ($('#aggregatecondition1').attr('class') == 'nav-link active') {
				$("#aggregatecondition1").removeClass('nav-link active');
				$("#aggregatecondition1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatecondition1").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatecondition1").toggleClass('tab-pane fade');
			}
			if ($('#themequery').attr('class') != 'nav-link active') {
				$("#themequery").removeClass('nav-link');
				$("#themequery").toggleClass('nav-link active');
				$("div#navs-pills-top-themequery").removeClass('tab-pane fade');
				$("div#navs-pills-top-themequery").toggleClass('tab-pane fade active show');
			}
			if ($('#themeCondition').attr('class') == 'nav-link active') {
				$("#themeCondition").removeClass('nav-link');
				$("#themeCondition").toggleClass('nav-link active');
				$("div#navs-pills-themecondition").removeClass('tab-pane fade active show');
				$("div#navs-pills-themecondition").toggleClass('tab-pane fade');
			}
			$("#themeCondition").hide();
			$("#sourcefilter").hide();
			$("#comparisionfilter").hide();
			$("#grouping2").hide();
			$("#aggregatefunction1").hide();
			$("#aggregatecondition1").hide();
			$("#themequery").show();
			$("#sourcedataset").prop('disabled', true);
			$("#comdataset").prop('disabled', true);
			$("#lblsourcedataset").text("Source Dataset").append("&nbsp;");
			$("#lblcomdataset").text("Comparison Dataset").append("&nbsp;");
		} else if (themetype == "QCD_THEME_COMPARE") {
			if ($('#sourcefilter').attr('class') == 'nav-link active') {
				$("#sourcefilter").removeClass('nav-link active');
				$("#sourcefilter").toggleClass('nav-link');
				$("div#navs-pills-top-sourcefilter").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-sourcefilter").toggleClass('tab-pane fade');
			}
			if ($('#comparisionfilter').attr('class') == 'nav-link active') {
				$("#comparisionfilter").removeClass('nav-link active');
				$("#comparisionfilter").toggleClass('nav-link');
				$("div#navs-pills-top-comparisionfilter").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-comparisionfilter").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
				$("div#navs-pills-top-grouping2").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-grouping2").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
			}
			if ($('#aggregatefunction1').attr('class') == 'nav-link active') {
				$("#aggregatefunction1").removeClass('nav-link active');
				$("#aggregatefunction1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatefunction3").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatefunction3").toggleClass('tab-pane fade');
			}
			if ($('#aggregatecondition1').attr('class') == 'nav-link active') {
				$("#aggregatecondition1").removeClass('nav-link active');
				$("#aggregatecondition1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatecondition1").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatecondition1").toggleClass('tab-pane fade');
			}
			if ($('#themequery').attr('class') == 'nav-link active') {
				$("#themequery").removeClass('nav-link active');
				$("#themequery").toggleClass('nav-link');
				$("div#navs-pills-top-themequery").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-themequery").toggleClass('tab-pane fade');
			}
			if ($('#themeCondition').attr('class') != 'nav-link active') {
				$("#themeCondition").removeClass('nav-link');
				$("#themeCondition").toggleClass('nav-link active');
				$("div#navs-pills-themecondition").removeClass('tab-pane fade');
				$("div#navs-pills-themecondition").toggleClass('tab-pane fade active show');
			}
			$("#sourcedataset").prop('disabled', false);
			$("#comdataset").prop('disabled', false);
			$("#themeCondition").show();
			$("#comparisionfilter").show();
			$("#themequery").hide();
			$("#grouping2").show();
			$("#aggregatefunction1").hide();
			$("#aggregatecondition1").hide();
			$("#lblsourcedataset").text("Source Dataset").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");
			$("#lblcomdataset").text("Comparison Dataset").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");
		} else {
			if ($('#sourcefilter').attr('class') == 'nav-link active') {
				$("#sourcefilter").removeClass('nav-link active');
				$("#sourcefilter").toggleClass('nav-link');
				$("div#navs-pills-top-sourcefilter").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-sourcefilter").toggleClass('tab-pane fade');
			}
			if ($('#comparisionfilter').attr('class') == 'nav-link active') {
				$("#comparisionfilter").removeClass('nav-link active');
				$("#comparisionfilter").toggleClass('nav-link');
				$("div#navs-pills-top-comparisionfilter").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-comparisionfilter").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
				$("div#navs-pills-top-grouping2").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-grouping2").toggleClass('tab-pane fade');
			}
			if ($('#grouping2').attr('class') == 'nav-link active') {
				$("#grouping2").removeClass('nav-link active');
				$("#grouping2").toggleClass('nav-link');
			}
			if ($('#aggregatefunction1').attr('class') == 'nav-link active') {
				$("#aggregatefunction1").removeClass('nav-link active');
				$("#aggregatefunction1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatefunction3").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatefunction3").toggleClass('tab-pane fade');
			}
			if ($('#aggregatecondition1').attr('class') == 'nav-link active') {
				$("#aggregatecondition1").removeClass('nav-link active');
				$("#aggregatecondition1").toggleClass('nav-link');
				$("div#navs-pills-top-aggregatecondition1").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-aggregatecondition1").toggleClass('tab-pane fade');
			}
			if ($('#themequery').attr('class') == 'nav-link active') {
				$("#themequery").removeClass('nav-link active');
				$("#themequery").toggleClass('nav-link');
				$("div#navs-pills-top-themequery").removeClass('tab-pane fade active show');
				$("div#navs-pills-top-themequery").toggleClass('tab-pane fade');
			}
			if ($('#themeCondition').attr('class') != 'nav-link active') {
				$("#themeCondition").removeClass('nav-link');
				$("#themeCondition").toggleClass('nav-link active');
				$("div#navs-pills-themecondition").removeClass('tab-pane fade');
				$("div#navs-pills-themecondition").toggleClass('tab-pane fade active show');
			}
			$("#sourcedataset").prop('disabled', false);
			$("#comdataset").prop('disabled', false);
			$("#themeCondition").show();
			$("#comparisionfilter").show();
			$("#grouping2").show();
			$("#aggregatefunction1").show();
			$("#aggregatecondition1").show();
			$("#themequery").hide();
			$("#lblsourcedataset").text("Source Dataset").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");
			$("#lblcomdataset").text("Comparison Dataset").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");
		}
	}
	function reconchangetheme() {
		//sorce dataset
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					$("#cmbsourcefield").empty();
					$("#cmbsourcefield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#cmbsourcefield").append($('<option>', {
							value: item.recon_field_desc,
							text: item.recon_field_name
						}).data('code', item.recon_field_type));
					});
				}
				else {
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		//dataset combo
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Theme/themerecondatasetfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#sourcedatasettheme").empty();
				$("#sourcedatasettheme").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					$("#sourcedatasettheme").append($('<option>', {
						value: item.dataset_code,
						text: item.dataset_name
					}));
				});
				$("#comdatasettheme").empty();
				$("#comdatasettheme").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					$("#comdatasettheme").append($('<option>', {
						value: item.dataset_code,
						text: item.dataset_name
					}));
				});
			}
		});

	};
	function themeload() {
		if (getlocalStorage("theme_details") != undefined) {
			var data = getlocalStorage("theme_details");
			var cat = data.dataset_category;
			$("#txtmode1").val("View");
			$("#themename").val(data.theme_desc);
			$("#cmbrecon").val(data.recon_code);
			jQuery('#cmbrecon').trigger("change");
			$("#txtthemecode").val(data.theme_code);
			$("#themegid").val(data.theme_gid);
			$("#theme_order").val(data.theme_order);
			$("#txtstatus1").val(data.active_status_desc);
			$("#theme_order").val(data.theme_order);
			$("#holdflag").val(data.hold_flag);
			detailsfetchtheme(data.theme_code);
			$("#savesubmit").hide();
			$("#adddataset").hide();
			$("#datasetfieldadd").hide();
			$("#grid_themefilterfield .k-grid-toolbar").hide();
			$("#themename").prop('disabled', true);
			$("#theme_order").prop('disabled', true);
			$("#holdflag").prop('disabled', true);
		}
	}


	function detailsfetchtheme(theme_code) {
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Theme/Themedetailfetch',
			dataType: 'json',
			data: JSON.stringify({ theme_code: theme_code, in_user_code: in_user_code }),
			async: false,
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					$("#txtthemecode").val(res.themeHeader[0].theme_code);
					$("#cmbrecon").val(res.themeHeader[0].recon_code);
					$("#themename").val(res.themeHeader[0].theme_name);
					$("#theme_order").val(res.themeHeader[0].theme_order);
					$("#sourcedatasettheme").val(res.themeHeader[0].source_dataset_code);
					$("#comdatasettheme").val(res.themeHeader[0].comparison_dataset_code);
					$("#themetype").val(res.themeHeader[0].theme_type_code);
					$("#txtstatus1").val(res.themeHeader[0].active_status_desc);
					$("#themegid").val(res.themeHeader[0].theme_gid);
					$("#txtmode").val("Edit");
					$("#querydata").val(res.themeHeader[0].theme_query);
					fthemetype();
					if (res.sourceidentifier.length > 0) {
						grid_themefilter(res.sourceidentifier);
					} else {
						grid_themefilter([]);
					}
					if (res.themeCondition.length > 0) {
						grid_themecondition(res.themeCondition);
					} else {
						grid_themecondition([]);
					}
					if (res.comparisionidentifier.length > 0) {
						grid_comparisionfilter(res.comparisionidentifier);
					} else {
						grid_comparisionfilter([]);
					}
					if (res.themeGrouping.length > 0) {
						grid_themegrouping(res.themeGrouping);
					} else {
						grid_themegrouping([]);
					}
					if (res.Aggfunction.length > 0) {
						$("#gd_aggfunction1").empty();
						$("#gd_aggfunction1").append("<div id='grid_aggfunction1'></div>");
						grid_aggfunction1(res.Aggfunction);
					}
					else {
						grid_aggfunction1([]);
					}
					if (res.AggCondition.length > 0) {
						$("#gd_aggcondition1").empty();
						$("#gd_aggcondition1").append("<div id='grid_aggcondition1'></div>");
						grid_aggcondition1(res.AggCondition);
					}
					else {
						grid_aggcondition1([]);
					}
					if ($("#txtthemecode").val() != "") {
						$("#Cmbclone").prop('disabled', true)
						$("#btnclone").prop('disabled', true)
					}

						$("#sourcedatasettheme").prop('disabled', true);
						$("#comdatasettheme").prop('disabled', true);
						$("#themetype").prop('disabled', true);
						$("#grid_themecondition .k-grid-toolbar").hide();
						$("#grid_themefilterfield .k-grid-toolbar").hide();
						$("#grid_comparisionfilter .k-grid-toolbar").hide();
						$("#grid_themegrouping .k-grid-toolbar").hide();
						$("#grid_aggfunction1 .k-grid-toolbar").hide();
						$("#grid_aggcondition1 .k-grid-toolbar").hide();

				}
				else {
					grid_themefilter([]);
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}

	//-----------------------------------------------------   theme condition  ----------------------------------------------------------------
	function grid_themecondition(data) {
		var source_field_desc_list = "";
		var extraction_criteria_list = "";
		var comparison_criteria_list = "";
		$("#grid_themecondition").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "themecondition_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							themecondition_gid: { type: "string", defaultValue: "0" },
							themecondition_seqno: { type: "string", defaultValue: 0 },
							rule_code: { type: "string" },
							source_field_code: { type: "string", defaultValue: "" },
							source_field_desc: { type: "string", defaultValue: "" },
							comparison_field: { type: "string", defaultValue: "" },
							comparison_field_desc: { type: "string" },
							extraction_criteria: { type: "string" },
							extraction_criteria_code: { type: "string" },
							comparison_criteria: { type: "string" },
							comparison_criteria_code: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
							join_condition: { type: "string" },
						}
					}
				}
			},
			height: 185,
			groupable: false,
			//dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_themecondition').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},

			columns: [
				{
					field: "themecondition_seqno",
					title: "Seq No.",
					width: 50,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,
					//template: '#=sel_checkboxtheme(data)#'
					template: function (dataItem) {
						if (dataItem.themecondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1" disabled>';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1" disabled>';
						}
					}
				},
				{
					field: "themecondition_gid",
					title: "themecondition_gid",
					hidden: true,
				},
				{
					field: "source_field_code",
					title: "Source Field",
					width: 100,
					hidden: true,
				},
				{
					field: "source_field_desc",
					title: "Source Field",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_themecondition")
					},
					width: 120,
				},
				{
					field: "extraction_criteria_code",
					title: "Extraction Criteria",
					hidden: true,
				},
				{
					field: "extraction_criteria",
					title: "Extraction Criteria",
					editor: function (container, options) {
						combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_themecondition", "SOURCE")
					},
					editable: true,
					width: 170,
				},
				{
					field: "comparison_field",
					title: "comparison_field",
					width: 100,
					hidden: true,
				},
				{
					field: "comparison_field_desc",
					title: "Comparison Field",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_themecondition")
					},
					width: 120,
				},
				{
					field: "comparison_criteria_code",
					title: "comparison_criteria_code",
					hidden: true,
				},
				{
					field: "comparison_criteria",
					title: "Comparison Criteria",
					editor: function (container, options) {
						combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_themecondition", "COMPARISON")
					},
					width: 170,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,
					//template: '#=sel_checkboxtheme1(data)#'
					template: function (dataItem) {
						if (dataItem.themecondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2" disabled>';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2" disabled>';
						}
					},
				},

				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_themecondition")
					},
					width: 40,
				}],
			editable: true,
		});
		source_field_desc_list = cmbsourcefieldtheme();
		comparison_field_desc_list = cmbsourcefieldtheme();
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
	}
	function OnEdit(e) {
		try {
			setDefaultValues(e);
		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}
	}
	function color() {
		$("#grid_themecondition").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
	}
	function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		debugger;
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.comparison_field_desc;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "extraction_criteria") {
					if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.extraction_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.extraction_criteria_input = undefined;
				}
				if (datafield == "comparison_criteria") {
					if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.comparison_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.comparison_criteria_input = undefined;
				}
			},
		});
	}
	function cmbsourcefieldtheme() {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		return arr1;
	}
	//-----------------------------------------------------   theme condition  ----------------------------------------------------------------

	//-----------------------------------------------------  sourcefilter ----------------------------------------------------------------
	function grid_themefilter(data) {
		try {
			var join_condition_list = "";
			var filter_field_list = "";
			var filter_criteria_list = "";
			$("#grid_themefilterfield").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "theme_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								themefilter_gid: { type: "string", defaultValue: "0" },
								theme_code: { type: "string" },
								filter_field_code: { type: "string", defaultValue: "" },
								filter_field: { type: "string" },
								filter_criteria: { type: "string", defaultValue: "" },
								themefilter_seqno: { type: "string", defaultValue: 0 },
								filter_value: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string", defaultValue: "" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 185,
				groupable: false,
				dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_themefilterfield').data('kendoGrid').tbody.children();
					setColor(rows, resultData);

				},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				pageable: true,
				resizable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},

				columns: [
					{
						field: "themefilter_seqno",
						title: "Seq No.",
						width: 50,
						attributes: { style: "text-align: right;" },
						editor: function (container, options) {
							item_rate(container, options.field, '9', '3');
						},
					},
					{
						field: "open_parentheses_flag",
						title: "(", width: 20,
						//template: '#=sel_checkboxtheme(data)#'
						template: function (dataItem) {
							if (dataItem.themefilter_gid > 0) {
								return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3" disabled>';
							} else {
								return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3" disabled>';
							}
						}
					},
					{
						field: "themefilter_gid",
						title: "themefilter_gid",
						hidden: true,
					},
					{
						field: "theme_code",
						title: "theme_code",
						width: 100,
						hidden: true,
					},

					{
						field: "filter_field_code",
						title: "filter_field_code",
						width: 100,
						hidden: true,
					},
					{
						field: "filter_field",
						title: "Filter Field",
						width: 100,
						editor: function (container, options) {
							combo_editor_man_theme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_themefilterfield")
						},
					},
					{
						field: "filter_criteria",
						title: "Filter Criteria",
						width: 100,
						editor: function (container, options) {
							combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_themefilterfield", "COMPARISON")
						},
					},
					{
						field: "filter_value",
						title: "Filter Value",
						width: 100,
					},
					{
						field: "active_status",
						title: "Status",
						hidden: true
					},
					{
						field: "active_status_desc",
						title: "Status",
						width: 80,
						hidden: true
					},
					{
						field: "close_parentheses_flag",
						title: ")", width: 20,
						//template: '#=sel_checkboxtheme1(data)#'
						template: function (dataItem) {
							if (dataItem.themefilter_gid > 0) {
								return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4" disabled>';
							} else {
								return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4" disabled>';
							}
						},
					},

					{
						field: "join_condition",
						title: "Joins",
						editor: function (container, options) {
							combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_themefilterfield")
						},
						width: 40,
					}],
				editable: true,
			});
			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}

		function OnEdit(e) {
			try {
				setDefaultValues(e);

			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}

	}
	function combo_filter_field(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "COMPARISON") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}
				if (datafield == "ident_criteria") {
					if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.ident_criteria_input = undefined;
				}
			}
		});
	}
	function combo_editor_man_theme(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});

		debugger;
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	//-----------------------------------------------------  sourcefilter ----------------------------------------------------------------

	//-----------------------------------------------------  comparisionfilter ----------------------------------------------------------------
	function grid_comparisionfilter(data) {
		try {
			var join_condition_list = "";
			var filter_field_list = "";
			var filter_criteria_list = "";
			$("#grid_comparisionfilter").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "themefilter_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								themefilter_gid: { type: "string", defaultValue: "0" },
								theme_code: { type: "string" },
								filter_field_code: { type: "string", defaultValue: "" },
								filter_field: { type: "string" },
								filter_criteria: { type: "string", defaultValue: "" },
								themefilter_seqno: { type: "string", defaultValue: 0 },
								filter_value: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string", defaultValue: "" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 185,
				groupable: false,
				dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_comparisionfilter').data('kendoGrid').tbody.children();
					setColor(rows, resultData);


				},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				pageable: true,
				resizable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},

				columns: [
					{
						field: "themefilter_seqno",
						title: "Seq No.",
						width: 50,
						attributes: { style: "text-align: right;" },
						editor: function (container, options) {
							item_rate(container, options.field, '9', '3');
						},
					},
					{
						field: "open_parentheses_flag",
						title: "(", width: 20,
						//template: '#=sel_checkboxtheme(data)#'
						template: function (dataItem) {
							if (dataItem.themefilter_gid > 0) {
								return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx5" disabled>';
							} else {
								return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx5" disabled>';
							}
						}
					},
					{
						field: "themefilter_gid",
						title: "themefilter_gid",
						hidden: true,
					},
					{
						field: "theme_code",
						title: "theme_code",
						width: 100,
						hidden: true,
					},

					{
						field: "filter_field_code",
						title: "filter_field_code",
						width: 100,
						hidden: true,
					},
					{
						field: "filter_field",
						title: "Filter Field",
						width: 100,
						editor: function (container, options) {
							combo_editor_man_comparision(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_comparisionfilter")
						},
					},
					{
						field: "filter_criteria",
						title: "Filter Criteria",
						width: 100,
						editor: function (container, options) {
							combo_filter_field2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_comparisionfilter", "COMPARISON")
						},
					},
					{
						field: "filter_value",
						title: "Filter Value",
						width: 100,
					},
					{
						field: "active_status",
						title: "Status",
						hidden: true
					},
					{
						field: "active_status_desc",
						title: "Status",
						width: 80,
						hidden: true
					},
					{
						field: "close_parentheses_flag",
						title: ")", width: 20,
						//template: '#=sel_checkboxtheme1(data)#'
						template: function (dataItem) {
							if (dataItem.themefilter_gid > 0) {
								return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx6" disabled>';
							} else {
								return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx6" disabled>';
							}
						},
					},

					{
						field: "join_condition",
						title: "Joins",
						editor: function (container, options) {
							combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_comparisionfilter")
						},
						width: 40,
					}],
				editable: true,
			});
			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}

		function OnEdit(e) {
			try {
				setDefaultValues(e);

			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}

	}
	function combo_filter_field2(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "COMPARISON") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}
				if (datafield == "ident_criteria") {
					if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.ident_criteria_input = undefined;
				}
			}
		});
	}
	function combo_editor_man_comparision(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});

		debugger;
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	//-----------------------------------------------------  comparisionfilter ----------------------------------------------------------------

	//-----------------------------------------------------     grouping    ----------------------------------------------------------------
	function grid_themegrouping(data) {
		$("#grid_themegrouping").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "grpfield_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							themegrpfield_gid: { type: "string", defaultValue: "0" },
							grpfield_seqno: { type: "string", defaultValue: "0" },
							grp_field: { type: "string" },
							grpfield_applied_on: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_themegrouping').data('kendoGrid').tbody.children();
				setColor(rows, resultData);

			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},

			columns: [
				{
					field: "themegrpfield_gid",
					title: "themegrpfield_gid",
					hidden: true,
				},
				{
					field: "grpfield_seqno",
					title: "Seq No.",
					width: 30,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "grpfield_applied_on_code",
					title: "grpfield_applied_on_code",
					hidden: true,
				},
				{
					field: "grpfield_applied_on",
					title: "Applied On",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "grpfield_applied_on_code", "grid_themegrouping")
					},
					width: 120,
				},
				{
					field: "grp_field_code",
					title: "recon_field_code",
					hidden: true,
				},
				{
					field: "grp_field",
					title: "Comparison Group Field",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "grp_field_code", "grid_themegrouping")
					},
					width: 120,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true,
				}],
			editable: true,

		});
		grp_field_list = cmbsourcefieldtheme();
		grpfield_applied_on_list = grpfield_applied_on();
	}
	function grpfield_applied_on() {
		var arr1 = [];
		var in_master_code = "QCD_Appiled_on";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (data) {
				var response = data;
				if (response != null) {
					for (i = 0; response.length > i; i++) {
						var list1 = {};
						list1.code = response[i].masterSyscode;
						list1.desc = response[i].masterName;
						arr1.push(list1);
					}
				}
			}
		});
		return arr1;
	}
	//-----------------------------------------------------     grouping    ----------------------------------------------------------------

	//-----------------------------------------------------     Agg function    ----------------------------------------------------------------
	function grid_aggfunction1(data) {
		$("#grid_aggfunction1").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "grpfield_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							themeaggfield_gid: { type: "string", defaultValue: "0" },
							themeaggfield_seqno: { type: "string", defaultValue: "0" },
							themeaggfield_applied_on: { type: "string" },
							themeaggfield_name: { type: "string" },
							recon_field: { type: "string" },
							themeagg_function: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_aggfunction1').data('kendoGrid').tbody.children();
				setColor(rows, resultData);

			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},

			columns: [
				{
					field: "themeaggfield_gid",
					title: "themeaggfield_gid",
					hidden: true,
				},
				{
					field: "themeaggfield_seqno",
					title: "Seq No.",
					width: 40,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "themeaggfield_name",
					title: "Aggregate Function Desc",
					width: 100,
				},
				{
					field: "themeaggfield_applied_on_code",
					title: "themeaggfield_applied_on_code",
					hidden: true,
				},
				{
					field: "themeaggfield_applied_on",
					title: "Applied On",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "themeaggfield_applied_on_code", "grid_aggfunction1")
					},
					width: 100,
				},
				{
					field: "recon_field_code",
					title: "recon_field_code",
					hidden: true,
				},
				{
					field: "recon_field",
					title: "Recon Field",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "recon_field_code", "grid_aggfunction1")
					},
					width: 100,
				},
				{
					field: "themeagg_function",
					title: "Aggregate Function",
					width: 100,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true,
				}],
			editable: true,

		});
		recon_field_list = cmbsourcefieldtheme();
		themeaggfield_applied_on_list = grpfield_applied_on();
		function combo_editor_mantheme(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: datasource,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});

			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
	}

	//-----------------------------------------------------     Agg function    ----------------------------------------------------------------
	//-----------------------------------------------------     Agg condition    ----------------------------------------------------------------
	var join_condition_list = "";
	var themeagg_field_list = "";
	var themeagg_value_list = "";
	var themeagg_criteria_list = "";
	function grid_aggcondition1(data) {
		$("#grid_aggcondition1").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "themeaggcondition_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							themeaggcondition_gid: { type: "string", defaultValue: "0" },
							themeaggcondition_seqno: { type: "string", defaultValue: "0" },
							themeaggfield_applied_on: { type: "string" },
							themeagg_value: { type: "string" },
							themeagg_value_code: { type: "string" },
							themeagg_field_code: { type: "string" },
							themeagg_field: { type: "string" },
							themeagg_criteria: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_aggcondition1').data('kendoGrid').tbody.children();
				setColor(rows, resultData);

			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},

			columns: [
				{
					field: "themeaggcondition_gid",
					title: "themeaggcondition_gid",
					hidden: true,
				},
				{
					field: "themeaggcondition_seqno",
					title: "Seq No.",
					width: 40,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,
					//template: '#=sel_checkboxtheme(data)#'
					template: function (dataItem) {
						if (dataItem.themeaggcondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx7" disabled>';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx7" disabled>';
						}
					}
				},
				{
					field: "themeagg_field_code",
					title: "themeagg_field_code",
					hidden: true,
				},
				{
					field: "themeagg_field",
					title: "Condition Field",
					editor: function (container, options) {
						combo_editor_condition1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "themeagg_field_code", "grid_aggcondition1")
					},
					width: 100,
				},
				{
					field: "themeagg_criteria",
					title: "Condition Criteria",
					width: 100,
					editor: function (container, options) {
						combo_editor_conditionCriteria1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "themeagg_criteria", "grid_aggcondition1")
					},
				},
				{
					field: "themeagg_value_code",
					title: "themeagg_value_code",
					hidden: true,
				},
				{
					field: "themeagg_value",
					title: "Comparison Field/Value",
					width: 100,
					editor: function (container, options) {
						combo_editor_conditionvalue1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "themeagg_value_code", "grid_aggcondition1")
					},
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,
					//template: '#=sel_checkboxtheme1(data)#'
					template: function (dataItem) {
						if (dataItem.themeaggcondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx8" disabled>';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx8" disabled>';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_mantheme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_aggcondition1")
					},
					width: 40,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true,
				}],
			editable: true,

		});
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
	}

	function combo_editor_condition1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr1 = [];
		var theme_code = $("#txtthemecode").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Theme/Themedetailfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ theme_code: theme_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					if (result.Aggfunction.length > 0) {
						for (i = 0; result.Aggfunction.length > i; i++) {
							var list1 = {};
							list1.code = result.Aggfunction[i].themeagg_field;
							list1.desc = result.Aggfunction[i].themeaggfield_name;
							arr1.push(list1);
						}
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_conditionvalue1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr1 = [];
		var theme_code = $("#txtthemecode").val();
		$.ajax({
			type: "POST",
			url: '../Theme/Themedetailfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ theme_code: theme_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					if (result.Aggfunction.length > 0) {
						for (i = 0; result.Aggfunction.length > i; i++) {
							var list1 = {};
							list1.code = result.Aggfunction[i].themeagg_field;
							list1.desc = result.Aggfunction[i].themeaggfield_name;
							arr1.push(list1);
						}
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "themeagg_value") {
					if (datafield == "themeagg_value" && selectedItem.themeagg_value_input != undefined) {
						selectedItem[datafield] = selectedItem.themeagg_value_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_conditionCriteria1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr1 = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var themeagg_code = selectedItem.themeagg_field_code;
		var sourcedata = "COMPARISON";
		var in_theme_code = $("#txtthemecode").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Theme/getconditionfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: themeagg_code, in_theme_code: in_theme_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr1.push(list);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "themeagg_criteria") {
					if (datafield == "themeagg_criteria" && selectedItem.themeagg_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.themeagg_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.themeagg_criteria_input = undefined;
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	//-----------------------------------------------------     Agg condition    ----------------------------------------------------------------

</script>