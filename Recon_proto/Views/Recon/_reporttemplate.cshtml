<!Doctype html>
<html>
<head>
	<title></title>

	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid-filter.k-state-active {
			background-color: initial !important;
		}

		.k-grid.k-widget {
			height: 360px;
		}

		.k-grid-header th.k-header > .k-link {
			width: 100px;
		}

		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}

		.accordion-wrapper {
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 4px 4px -2px rgba(0, 0, 0, 0.5);
			width: 100%;
			margin: 0 auto;
		}

		.accordion {
			width: 100%;
			color: white;
			overflow: hidden;
			margin-bottom: 3px;
		}

			.accordion:last-child {
				margin-bottom: 0;
			}

		.accordion-label {
			display: flex;
			-webkit-box-pack: justify;
			justify-content: space-between;
			padding: 4px;
			background: rgb(135, 46, 123);
			/*background: rgba(4,57,94,.8);*/
			font-weight: bold;
			cursor: pointer;
			font-size: 14px;
			color: white;
		}

			.accordion-label:hover {
				/*background: rgba(4,57,94,1);*/
				background: rgb(135, 46, 123)
			}

			.accordion-label::after {
				content: "\276F";
				width: 16px;
				height: 16px;
				text-align: center;
				-webkit-transition: all 0.3s;
				transition: all 0.3s;
			}

		.accordion-content {
			max-height: 0;
			padding: 0 16px;
			color: rgba(4, 57, 94, 1);
			background: rgb(135 46 123 / 14%);
			-webkit-transition: all 0.3s;
			transition: all 0.3s;
		}

			.accordion-content p {
				margin: 0;
				color: rgba(4,57,94,.7);
				font-size: 18px;
			}

		input:checked + .accordion-label {
			background: rgba(4,57,94,1);
		}

			input:checked + .accordion-label::after {
				-webkit-transform: rotate(90deg);
				transform: rotate(90deg);
			}

		input:checked ~ .accordion-content {
			max-height: 100vh;
			padding: 16px;
		}

		.validated1 {
			background-color: green; /* Change to desired color */
			color: white; /* Change to desired text color */
		}

		.validated {
			background-color: red; /* Change to desired color */
			color: white; /* Change to desired text color */
		}

	</style>
</head>
<body>
	<form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
		<div class="row" style="margin-top: -18px;margin-bottom: 10px;">
			<div class="col-sm-6">
				<div class="row">
					<div class="col-sm-4">
						<label for="organization" class="form-label">Custom Template code</label>
						<input class="form-control" type="text" id="reporttemplate_code" value="" disabled>
					</div>
					<div class="col-sm-4">
						<label for="organization" class="form-label">Mode</label>
						<input class="form-control" type="text" id="txtmode5" disabled>
					</div>
					<div class="col-sm-4">
						<label for="organization" class="form-label">Status</label><br>
						<input class="form-control" type="text" id="txtstatus5" disabled>
					</div>
				</div>
			</div>
			<div class="col-sm-5"></div>
		</div>
		<div class="col-md-12">
			<div class="box box-orange" style="height:auto;">
				<div class="row" style="padding-bottom:5px;padding-left:5px;padding-right:5px">
					<div class="col-sm-3">
						<label for="" class="form-label">Custom Template Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<input class="form-control" id="rt_name" name="ReportTemplate" type="text">
						<input class="form-control" type="hidden" id="reporttemplate_gid" value=0>
					</div>
					<div class="col-sm-3">
						<label for="" class="form-label">Report Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<select id="cmbreporttype" class="form-select form-control">
						</select>
					</div>
					<div class="col-sm-3">
						<label for="" class="form-label">Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<input hidden class="form-control" id="cmbreconname_desc" name="reconName" type="text">
						<select id="cmbreconname1" class="form-select form-control" disabled>
						</select>
					</div>
					
				</div>

				<div class="row">
					<div class="nav-align-top mb-3">
						<ul class="nav nav-pills mb-2" role="tablist" style="margin-right: 13px;margin-left: 10px;">
							<li class="nav-item">
								<button type="button"
										class="nav-link active"
										role="tab"
										data-bs-toggle="tab"
										data-bs-target="#navs-pills-top-ReportFilter"
										aria-controls="navs-pills-top-ReportFilter"
										aria-selected="true">
									Row Filter
								</button>
							</li>

							<li class="nav-item">
								<button type="button"
										class="nav-link"
										role="tab"
										data-bs-toggle="tab"
										data-bs-target="#navs-pills-top-ColumnFilter"
										aria-controls="navs-pills-top-ColumnFilter"
										aria-selected="true">
									Column Filter
								</button>
							</li>

							<li class="nav-item">
								<button type="button"
										class="nav-link"
										role="tab"
										data-bs-toggle="tab"
										data-bs-target="#navs-pills-top-sorting"
										aria-controls="navs-pills-top-sorting"
										aria-selected="true">
									Sorting
								</button>
							</li>
						</ul>
						<div class="tab-content">
							@*Report Filter*@
							<div class="tab-pane fade show active" id="navs-pills-top-ReportFilter" role="tabpanel" style="margin-top:-14px;">
								<div class="panel panel-default">
									<div class="panel-body">
										<div class="col-xs-12">
											<div id="gd_tempfilter">
												<div id="grid_tempfilter">
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>

							@*Column Filter*@
							<div class="tab-pane fade" id="navs-pills-top-ColumnFilter" role="tabpanel" style="margin-top:-14px;">
								<div class="panel panel-default">
									<div class="panel-body">										
										<div class="col-xs-12">
											<div id="gd_colfilter">
												<div id="grid_colfilter">
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>

							@*Sorting*@
							<div class="tab-pane fade" id="navs-pills-top-sorting" role="tabpanel" style="margin-top:-16px;">
								<div class="panel panel-default">
									<div class="panel-body">
										<div class="col-xs-12">
											<label for="" class="form-label">Sorting Order&nbsp;</label>
											<span style="margin-left:2px;margin-top:5px">
												<input type="radio" id="sort1" name="sortOrder" value="asc" onclick="onpartial()" checked>&nbsp;Ascending &nbsp;
												<input type="radio" id="sort2" name="sortOrder" value="desc" onclick="onpartial()" style="margin-left: 10px;">&nbsp;Descending&nbsp;
											</span>
										</div>
										<div class="col-xs-12">
											<div id="gd_sorting">
												<div id="grid_sorting">
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>

						</div>
					</div>
				</div>
			</div>
		</div>
	</form>
</body>
</html>

<script type="text/javascript">

	function filechange(val) {
		var fileInput = val;
		if (fileInput.files.length > 0) {
			$("#fetch_filename").val(fileInput.files[0].name);
			// document.getElementById("fetch_filename").textContent = fileInput.files[0].name;
		}
	}

	function rpttempdetailfetch() {
		//report list
		var getTemp_gid = getlocalStorage("temp_gid");
		$("#reporttemplate_gid").val(getTemp_gid);
		var data = {};
		var reconcode = getlocalStorage("rpttemplatedetails");
		$("#cmbreconname1").val(reconcode.recon_code);
		$("#cmbreporttype").prop("disabled", true);
		data.in_recon_code = reconcode.recon_code;
		data.in_action_by = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Reports/reportTempletelist',
			dataType: 'json',
			contentType: 'application/json; charset=utf-8',
			data: JSON.stringify(data),
			success: function (response) {
				if (response != " " && response != null && response != "{}" && response != "[]") {
					var res = JSON.parse(response)
					$("#clonereport").empty();
					$("#clonereport").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						if (item.active_status == 'Y') {
							$("#clonereport").append($('<option>', {
								value: item.reporttemplate_code,
								text: item.reporttemplate_name,
							}));
						}
					});
				} else {
					$.alert({
						title: 'Recon',
						content: 'Something went wrong .!',
						type: 'red',
					});
				}

				// system flag
				var in_master_code = "QCD_YN";
				var in_user_code = sessionStorage.getItem("usrname");
				$.ajax({
					type: "POST",
					url: '../Common/Qcdmaster',
					dataType: 'json',
					async: false,
					data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
					contentType: 'application/json; charset=utf-8',
					success: function (response) {
						$("#sys_flag").empty();
						$("#sys_flag").append($('<option>', {
							value: "",
							text: "  Select  "
						}));
						$.each(response, function (index, item) {
							$("#sys_flag").append($('<option>', {
								value: item.masterSyscode,
								text: item.masterName
							}));
						});

					}
				});

			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});

		var data = getlocalStorage("rpttemplatedetails");
		var action_by = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Reports/ReportList',
			dataType: 'json',
			data: JSON.stringify({ in_action_by: action_by }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#cmbreporttype").empty();
				$("#cmbreporttype").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#cmbreporttype").append($('<option>', {
						value: item.report_code,
						text: item.report_desc
					}));
				});
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		// system flag
		var in_master_code = "QCD_YN";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#sys_flag").empty();
				$("#sys_flag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#sys_flag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});

		// recon list

		var data = {};		
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = sessionStorage.getItem("usrname");
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != " " && response != null && response != "{}" && response != "[]") {
					var res = JSON.parse(response);
					$("#cmbreconname1").empty();
					$("#cmbreconname1").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#cmbreconname1").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					});
				} else {
					$.alert({
						title: 'Recon',
						content: 'Something went wrong .!',
						type: 'red',
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		var data = getlocalStorage("rpttemplatedetails");
		$("#cmbreconname1").val(data.recon_code);
		var gettext = $("#cmbreconname1").find(":selected").text();
		$("#cmbreconname_desc").val(gettext);
		$("#cmbreporttype").prop("disabled", true);
		var reconcode = $("#cmbreconname1").val();

		var getselectedTemplate = getlocalStorage("rpttemplatedetails");
		var jsondata = {};
		jsondata.in_reporttemplate_code = getselectedTemplate.reporttemplate_code;
		jsondata.in_recon_code = getselectedTemplate.recon_code;
		jsondata.in_report_code = getselectedTemplate.report_code;
		jsondata.in_action_by = sessionStorage.getItem("usrname");
		//detail fetch
		$.ajax({
			type: "POST",
			url: '../Reports/reporttemplatefetch',
			dataType: 'json',
			data: JSON.stringify(jsondata),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != " " && response != null && response != "{}" && response != "[]") {
					var res = JSON.parse(response);
					$("#reporttemplate_code").val(res.Table[0].reporttemplate_code);
					// $("#txtmode").val(getlocalStorage('btn_clk_val'));
					$("#txtstatus5").val("Active");
					$("#txtmode5").val("View");
					$("#reporttemplate_gid").val(res.Table[0].reporttemplate_gid);
					$("#rt_name").val(res.Table[0].reporttemplate_name);
					$("#cmbreporttype").val(res.Table[0].report_code);
					$("#sys_flag").val(res.Table[0].system_flag);
					$("#cmbreconname1").val(res.Table[0].recon_code);
					$("#rt_name").prop("disabled", true);
					$("#cmbreporttype").prop("disabled", true);
					$("#clonereport").prop('disabled', true);
					$("#cmbreconname1").prop('disabled', true);
					$("#btnclone").prop('disabled', true);
					$("#btncolgrid").prop('disabled', false);
					$("#btn_upload").prop('disabled', false);
					if (res.Table[0].sortby_code == "desc") {
						$("#sort2").prop("checked", true);
					} else {
						$("#sort1").prop("checked", true);
					}
					grid_tempfilter(res.Table1);
					grid_columfilter(res.Table2);
					grid_sorting(res.Table3);
				}
				else {
					grid_tempfilter([]);
					grid_columfilter([]);
					grid_sorting([]);
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}

	// Row filter
	function grid_tempfilter(data) {
		var filter_criteria_desc_list = "";
		var join_condition_list = "";
		var reportparam_value_list = "";
		$("#grid_tempfilter").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 10,
				schema: {
					model: {
						fields: {
							reporttemplatefilter_gid: { type: "string", defaultValue: "0" },
							reporttemplate_code: { type: "string" },
							filter_seqno: { type: "string" },
							report_field: { type: "string" },
							reportparam_value: { type: "string" },
							filter_criteria: { type: "string" },
							filter_criteria_desc: { type: "string" },
							filter_value: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
							join_condition: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							system_flag: { type: "string" }
						}
					}
				}
			},
			height: 220,
			groupable: false,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_tempfilter').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			pageable: true,
			resizable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			
			columns: [
			{
				field: "filter_seqno",
				title: "Filter Seq No",
				width: 50,
			},
			{
				title: "(", width: 20,
				template: '#=sel_checkbox(data)#'
			},
			{
				field: "reporttemplatefilter_gid",
				title: "reporttemplatefilter_gid",
				hidden: true,
			},
			{
				field: "reporttemplate_code",
				title: "reporttemplate_code",
				hidden: true,
			},
			{
				field: "report_field",
				title: "report_field",
				width: 120,
				hidden: true
			},
			{
				field: "reportparam_value",
				title: "Filter Field",
				editor: function (container, options) {
					combo_editor_reportfiled(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "report_field", "grid_tempfilter")
				},
				width: 120,
			},
			{
				field: "filter_criteria",
				title: "Filter Criteria",
				width: 120,
				hidden: true
			},
			{
				field: "filter_criteria_desc",
				title: "Filter Criteria",
				editor: function (container, options) {
					combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_tempfilter", "SOURCE")
				},
				editable: true,
				width: 120
			},
			{
				field: "filter_value",
				title: "Filter Value",
				width: 120
			},
			{
				field: "close_parentheses_flag",
				title: ")",
				template: '#=sel_checkbox1(data)#',
				width: 20
			},
			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_tempfilter")
				},
				width: 60
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,
		});

		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

	}

	function OnEdit(e) {
		try {
			if (e.model.system_flag == 'Y') {
				e.sender.closeCell();
			}
			//setDefaultValues(e);
		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}
	}


	var gridRowID = -1;
	function sel_checkbox(data) {
		gridRowID++;
		var isChecked = data.open_parentheses_flag;
		var con = "";
		if (isChecked == "Y") {
			con = 'checked';
		}
		if (data.system_flag == 'Y') {
			return '<input id="chk_sel_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' disabled /> ';

		} else {
			return '<input id="chk_sel_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' /> ';

		}
	}
	var gridRowID1 = -1;
	function sel_checkbox1(data) {
		gridRowID1++;
		var isChecked1 = data.close_parentheses_flag;
		var con = "";
		if (isChecked1 == "Y") {
			con = 'checked';
		}
		if (data.system_flag == 'Y') {
			return '<input id="chk_sel1_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' disabled /> ';

		} else {
			return '<input id="chk_sel1_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' /> ';

		}
	}

	function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {		
		var arr = [];
		var in_master_code = "QCD_RP_CONSTRAINT";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response.length > 0) {
					for (i = 0; response.length > i; i++) {
						var list = {};
						list.code = response[i].masterCode;
						list.desc = response[i].masterName;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}

	function combo_editor_reportfiled(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var data = {};
		data.in_reportparam_gid = 0;
		data.in_report_code = $("#cmbreporttype").val();
		data.in_recon_code = $("#cmbreconname1").val();
		data.in_action = '';
		data.in_action_by = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: "../Reports/getreportparamrecon",
			dataType: "json",
			data: JSON.stringify({ in_reportparam_gid: data.in_reportparam_gid, in_report_code: data.in_report_code, in_action: data.in_action, in_recon_code: data.in_recon_code, in_action_by: data.in_action_by }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				if (res.length > 0) {
					for (i = 0; res.length > i; i++) {
						var list = {};
						if (res[i].reportparam_code != "") {
							list.code = res[i].reportparam_code;
							list.desc = res[i].reportparam_desc;
							arr1.push(list);
						}
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}

	//Column filter

	function grid_columfilter(data) {
		$("#grid_colfilter").kendoGrid({
			dataSource: {
				data: data,
				schema: {
					model: {
						fields: {
							report_field: { type: "string" },
							report_field_desc: { type: "string", editable: false },
							display_desc: { type: "string" },
							display_order: { type: "number" },
							display_flag: { type: "string", editable: false }
						}
					}
				}
			},
			height: 220,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_colfilter').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			pageable: false,
			resizable: true,
			editable: true,

			columns: [
				{
					field: "report_field",
					title: "report_field",
					hidden: true,
				},
				{
					field: "report_field_desc",
					title: "Report Field",
					width: 100
				},
				{
					field: "display_desc",
					title: "Display Description",
					width: 100
				},
				{
					field: "display_order",
					title: "Display Order",
					width: 50,
					//template: '<input type="number" style="width: 88%;height: 10px" class= "form-control" /> ',
				},
				{
					field: "display_flag",
					title: "Display Flag",
					attributes: { style: "text-align: center" },
					width: 50,
					template: '#=display_checkbox1(data)#'
				}],
		});
	}

	function display_checkbox1(data) {
		gridRowID1++;
		var isChecked1 = data.display_flag;
		var con = "";
		if (isChecked1 == "Y") {
			con = 'checked';
		}
		if (data.system_flag == 'Y') {
			return '<input id="display_sel" class="checkbox" type="checkbox" ' + con + ' disabled /> ';
		} else {
			return '<input id="display_sel" class="checkbox" type="checkbox" ' + con + ' /> ';
		}

	}

	// Sorting

	function grid_sorting(data) {

		var reportparam_value_list = "";
		$("#grid_sorting").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 10,
				schema: {
					model: {
						fields: {
							active_status: { type: "string" },
							report_field: { type: "string" },
							sort_order: { type: "number" },
							reportparam_value: { type: "string" },
							reporttemplate_code: { type: "string" },
							reporttemplatesorting_gid: { type: "number" },
						}
					}
				}
			},
			height: 205,
			groupable: false,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_sorting').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			pageable: true,
			resizable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			columns: [
			{
				field: "reporttemplatesorting_gid",
				title: "reporttemplatesorting_gid",
				width: 100,
				hidden: true
			},
			{
				field: "report_field",
				title: "Report Field",
				width: 100,
				hidden: true
			},
			{
				field: "reportparam_value",
				title: "Filter Field",
				editor: function (container, options) {
					combo_editor_sortfiled(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "report_field", "grid_sorting")
				},
				width: 120,
			},
			{
				field: "sorting_order",
				title: "Sort Order",
				width: 50
			}],
			editable: true,
		});
	}

	function combo_editor_sortfiled(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var data = {};
		data.in_reportparam_gid = 0;
		data.in_report_code = $("#cmbreporttype").val();
		data.in_recon_code = $("#cmbreconname1").val();
		data.in_action = '';
		data.in_action_by = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: "../Reports/getreportparamrecon",
			dataType: "json",
			data: JSON.stringify({ in_reportparam_gid: data.in_reportparam_gid, in_report_code: data.in_report_code, in_action: data.in_action, in_recon_code: data.in_recon_code, in_action_by: data.in_action_by }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != " " && response != null && response != "{}" && response != "[]") {
					var res = JSON.parse(response);
					if (res.length > 0) {
						for (i = 0; res.length > i; i++) {
							var list = {};
							if (res[i].reportparam_code != "") {
								list.code = res[i].reportparam_code;
								list.desc = res[i].reportparam_desc;
								arr1.push(list);
							}
						}
					}
				} else {
					$.alert({
						title: 'Recon',
						content: 'Something went wrong .!',
						type: 'red',
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}

	function upload() {		
		var data = {};
		var formData = new FormData();
		data.in_reporttemplate_code = $("#reporttemplate_code").val();
		data.in_action_by = sessionStorage.getItem("usrname");
		var fileInput = '';
		var filepath = $("#File_Import").val();
		fileInput = document.getElementById('File_Import');
		if (fileInput.files.length > 0) {
			formData.append('file', fileInput.files[0]);
			data.in_file_name = fileInput.files[0].name;
			getFirstSheetNameFromFile(fileInput.files[0])
				.then(firstSheetName => {
					if (firstSheetName === "Report") {
						formData.append('in_reporttemplate_code', data.in_reporttemplate_code);
						formData.append('in_action_by', data.in_action_by);
						formData.append('in_file_name', data.in_file_name);
						if (data.in_file_name && data.in_reporttemplate_code) {
							$.ajax({
								url: '@Url.Action("uploadreporttempletefile", "Reports")',
								type: "post",
								data: formData,
								processData: false,
								contentType: false,
								async: true,
								success: function (res) {
									if (res != '') {
										var response = JSON.parse(res);
										if (response[0].out_result == 1 || response[0].out_result == "1") {
											$.alert({
												title: 'Recon',
												content: response[0].out_msg,
												type: 'green',
											});
											$("#txtmode").val("Edit");
											detailfetch();
										} else {
											$.alert({
												title: 'Recon',
												content: response[0].out_msg,
												type: 'red',
											});
										}
									} else {
										$.alert({
											title: 'Recon',
											content: 'Something went wrong',
											type: 'red',
										});
									}
								}, error: function (er) {
									$.alert({
										title: 'Recon',
										content: 'Failed, Please try again.!',
										type: 'green',
									});
								}
							});
						}
						else if (!data.in_file_name) {
							$.alert({
								title: 'Recon',
								content: 'File Name is missing.!',
								type: 'green',
							});
						}
						else if (!data.in_reporttemplate_code) {
							$.alert({
								title: 'Recon',
								content: 'Custom Template code is missing.!',
								type: 'green',
							});
						}

					} else {
						$.alert({
							title: 'Recon',
							content: 'First sheet name should be "Report", Please rename it as "Report"',
							type: 'red',
						});
						return;
					}
				})
				.catch(error => {
					console.error("Error reading file:", error);
				});

		}
	}

	function getFirstSheetNameFromFile(file) {
		var reader = new FileReader();

		reader.readAsArrayBuffer(file);

		return new Promise((resolve, reject) => {
			reader.onload = function (e) {
				var data = new Uint8Array(e.target.result);

				if (file.name.endsWith('.xlsx') || file.name.endsWith('.xls')) {
					// Read XLSX and XLS files
					var workbook = XLSX.read(data, { type: 'array' });
					var firstSheetName = workbook.SheetNames[0];
					resolve(firstSheetName);
				} else if (file.name.endsWith('.csv')) {
					// Read CSV files
					Papa.parse(file, {
						complete: function (result) {
							var firstSheetName = result.meta.fields;
							var headers = firstSheetName[0]// Assuming the first row contains headers
							resolve(headers);
						},
						error: function (error) {
							reject(error);
						}
					});
				} else {
					reject("Unsupported file format.");
				}
			};

			reader.onerror = function (error) {
				reject(error);
			};
		});
	}
</script>