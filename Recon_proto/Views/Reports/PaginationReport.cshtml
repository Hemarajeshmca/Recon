@{
    ViewBag.title = "Pagination Report";
	Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
    <title></title>
 @*   <style>
        .btn-danger {
            color: #fff;
            background-color: #d9534f;
            border-color: #d43f3a;
        }

        .box box-orange {
            margin-left: -10%;
            overflow-y: auto !important;
            height: 2500px;
        }

        .k-popup.k-list-container {
            width: 210px !important;
        }

        .accordion_container {
            width: 100%;
        }

        .accordion_head {
            background-color: #337ab7;
            color: white;
            cursor: pointer;
            /*font-family: arial;*/
            font-size: 14px;
            margin: 0 0 1px 0;
            padding: 1px 3px;
            /*font-weight: normal;*/
        }

        .accordion_footer {
            background-color: #337ab7;
            color: white;
            cursor: pointer;
            font-family: arial;
            font-size: 14px;
            margin: 0 0 1px 0;
            padding: 1px 3px;
            font-weight: bold;
        }

        .accordion_body p {
            padding: 18px 5px;
            margin: 0px;
        }

        .plusminus {
            float: right;
        }

        .ioniconplus {
            width: 15px;
            background-image: url('../images/minus-circled.png');
            background-repeat: no-repeat;
            background-position: -50px -128px;
            display: inline-block;
            cursor: pointer;
        }

        /*.ob-right {
                    text-align: right;
                }*/
        .gj-unselectable {
            margin-left: -10%;
            overflow-y: auto !important;
            height: 500px;
        }
    </style>

    <style>
        label {
            display: inline-block;
            max-width: 100%;
            margin-bottom: 5px;
        }

        div.k-window {
            display: inline-block;
            position: absolute;
            z-index: 10001;
            border-style: solid;
            border-width: 1px;
            padding-top: 1em;
            width: 60%;
            font-weight: normal;
        }

        .k-edit-form-container {
            position: relative;
            width: 120%;
            background: transparent;
            border-color: transparent;
        }

        .k-grid-content {
            overflow-x: scroll;
        }

        .k-window > div.k-popup-edit-form {
            padding: 1em 0;
            overflow: hidden;
        }

        a.k-button.k-button-icontext.k-grid-edit, a.k-button.k-button-icontext.k-grid-View, a.k-button.k-button-icontext.k-grid-Delete {
            background: transparent;
            border-color: transparent;
        }

        span.k-icon.k-edit {
            display: none;
        }
    </style>
    <style>
        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-state-active {
            display: none;
        }

        a.k-button.k-button-icontext.k-grid-Edit, a.k-button.k-button-icontext.k-grid-View, a.k-button.k-button-icontext.k-grid-Delete, a.k-button.k-button-icontext.k-grid-edit {
            background: transparent;
            border-color: transparent;
            color: #357ab8;
        }

        span.k-icon.k-edit {
            display: none;
        }
    </style>
    <style>
        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-state-active {
            display: none;
        }

        .k-grid-content {
            overflow-x: scroll;
        }

        label {
            display: inline-block;
            max-width: 100%;
            margin-bottom: 5px;
        }

        span.k-link {
            color: #fff !important;
            position: relative;
        }

        a.k-button.k-button-icontext.k-grid-Edit, a.k-button.k-button-icontext.k-grid-View, a.k-button.k-button-icontext.k-grid-Delete, a.k-button.k-button-icontext.k-grid-edit {
            background: transparent;
            border-color: transparent;
        }

        span.k-icon.k-edit {
            display: none;
        }

        .k-grouping-header {
            color: #ffffff;
        }

        .k-grid-filter.k-state-active {
            background-color: rgb(51, 122, 183);
        }

        .k-state-active {
            display: block;
        }
    </style>*@

    @*Pagination*@
    <style>
      /*  a {
            text-decoration: none;
            display: inline-block;
            padding: 8px 16px;
        }
*/
            a:hover {
                background-color: #ddd;
                color: black;
            }

        .previous {
            background-color: #84b6e1;
            color: black;
        }

        .next {
            background-color: #367fa9;
            color: white;
        }

        .round {
            border-radius: 50%;
            padding: 8px 16px;
            text-decoration: none;
            display: inline-block;
        }

        .page_bg {
            width: 100%;
            background-color: #E7E9EB;
        }
    </style>
    @*pagination end*@
@*    <style>
        label {
            display: inline-block;
            max-width: 100%;
            margin-bottom: 5px;
        }

        div.k-window {
            display: inline-block;
            position: absolute;
            z-index: 10001;
            border-style: solid;
            border-width: 1px;
            padding-top: 1em;
            width: 60%;
            font-weight: normal;
        }

        .k-edit-form-container {
            position: relative;
            width: 120%;
        }

        .k-grid-content {
            overflow-x: scroll;
        }

        .k-window > div.k-popup-edit-form {
            padding: 1em 0;
            overflow: hidden;
        }

        a.k-button.k-button-icontext.k-grid-edit, a.k-button.k-button-icontext.k-grid-View, a.k-button.k-button-icontext.k-grid-Delete {
            background: transparent;
            border-color: transparent;
        }
        }

        span.k-icon.k-edit {
            display: none;
        }
    </style>

    <style>
        .btnsubmit {
            color: #fff;
            border-radius: 5px;
            padding: 8px 25px;
            border: 0 none;
            background-color: #337ab7;
        }

        .k-grid-content {
            overflow-x: scroll;
        }

        .k-state-active {
            display: none;
        }

        .k-grouping-header {
            color: #ffffff;
        }

        /*.k-header {
                        font-weight: bold;
                    }*/

        .k-grid-filter.k-state-active {
            background-color: rgb(51, 122, 183);
        }

        .k-state-active {
            display: block;
        }
    </style>

    <style>
        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-state-active {
            display: none;
        }

        div.k-window {
            display: inline-block;
            position: absolute;
            z-index: 10001;
            border-style: solid;
            border-width: 1px;
            padding-top: 1em;
            width: 40%;
            font-weight: normal;
        }

        .k-grid-header th.k-with-icon .k-link {
            margin-right: -11px;
        }

        .k-edit-form-container {
            position: relative;
            width: 100%;
        }

        .k-grid-header th.k-with-icon .k-link {
            margin-right: -11px;
            color: #fff !important;
        }

        a.k-button.k-button-icontext.k-grid-Edit {
            background: rgb(51, 122, 183);
            border-color: rgb(51, 122, 183);
        }

        .k-grid-filter.k-state-active {
            background-color: rgb(51, 122, 183);
        }

        .k-state-active {
            display: block;
        }

        .k-link {
            color: #fff !important;
        }
    </style>

    <style>
        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-state-active {
            display: none;
        }

        div.k-window {
            display: inline-block;
            position: absolute;
            z-index: 10001;
            border-style: solid;
            border-width: 1px;
            padding-top: 1em;
            width: 40%;
            font-weight: normal;
        }

        .k-grid-header th.k-with-icon .k-link {
            margin-right: -11px;
        }

        .k-edit-form-container {
            position: relative;
            width: 100%;
        }

        .k-grid-header th.k-with-icon .k-link {
            margin-right: -11px;
            color: #fff !important;
        }

        a.k-button.k-button-icontext.k-grid-Edit, a.k-button.k-button-icontext.k-grid-edit, a.k-button.k-button-icontext.k-grid-View, a.k-button.k-button-icontext.k-grid-Delete {
            background: transparent;
            border-color: transparent;
        }

        .k-grid-filter.k-state-active {
            background-color: rgb(51, 122, 183);
        }

        .k-state-active {
            display: block;
        }

        .k-webkit {
            overflow: hidden !important;
        }

        .k-grouping-header {
            display: none;
        }

        .k-input {
            background-color: #e3e3e3 !important;
        }

        .k-grid-content {
            height: 260px !important;
        }
    </style>*@
    <style>
        .plusminus {
            float: right;
            font-weight: 900;
            font-size: 16px;
            margin-top: -2px;
        }

        .ioniconplus {
            width: 15px;
            background-image: url('../images/minus-circled.png');
            background-repeat: no-repeat;
            background-position: -50px -128px;
            display: inline-block;
            cursor: pointer;
        }

        .k-grouping-header {
            color: #fff !important;
        }

        .k-link:link, .k-link:visited, .k-nav-current.k-state-hover .k-link {
            color: #fff !important;
        }
    </style>

</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
    <div class="content-wrapper">
        <div class="card-body" style="margin: 2%; margin-top: -1%;height: 84%;">
        <section class="content">
            <div class="row">
                <div class="col-md-12">
                    <div class="box box-orange" style="height:auto;padding:10px;">
                       
                        <div class="row" style="padding-bottom:20px;margin-left:-28px;">
                              <div class="col-sm-3">
                                    <label for="filetype" class="title">Recon Name </label>&nbsp;
                                    <input class="form-control" type="text" id="recon_gid" hidden>
                                    <select id="reconname" onchange="changeRecon()" class="form-select form-control"> </select>
                                </div>
                                <div class="col-sm-4" style="margin-top:22px;">
                                    <button type="button" value="Refresh" onclick="OnRefresh()" id="btn_submit" class="btn btn-sm save_btn me-2"><i class="fa fa-filter" aria-hidden="true"></i>&nbsp;Refresh</button>&nbsp;
                                    <button type="button" id="run" class="btn btn-sm save_btn me-2" onclick="Runprogress()" style="padding: 4px 10px; background-color:#5490ff;border: 1px solid #5490ff;"><i class="fa fa-eye" aria-hidden="true"></i>&nbsp;Show</button>&nbsp;
                                </div>


                        </div>
                            <div class="row" style="padding-bottom:7px;margin-left:-28px;">
                            <div class="col-md-12">
                                <div class="accordion_container">
                                    <div class=" panel panel-primary" style="margin-bottom:5px;">
                                        <div class="accordion_head">Attribute Search <span class="plusminus">+</span> </div>
                                        <div class="accordion_body">
                                            <div class="panel-body" style="padding-right:50px;width:100%;max-height:100%">
                                                <div id="Partialone" style="margin:auto;height:200px;overflow:auto;width:104%;">
                                                    @await Html.PartialAsync("_paginationreport_partialview")
                                                </div>
                                            </div>
                                        </div>
                                        <div class="accordion_footer">
                                            <div class="row">
                                                <div class="col-sm-10">
                                                        @Html.TextArea("Message", new { rows = 1, columns = 40, id = "framevalue", style = "width:90%;background-color:rgb(135,46,123);border:none;color:white;font-size:smaller;resize: none;" })
                                                </div>
                                                </div>

                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row" id="Dynamic_grid">
                            <div class="col-md-12" style="padding:0px; margin:0px;">
                                <div id="Maingrid" style="margin:auto;height:auto;top:-2px;width:100%;margin-left:0%;"> </div>
                                <div class="page_bg" style="display:none;margin-top:1%;">
                                    <a href="#" onclick="pagination('first')" class="previous round">&#171;</a>
                                        &nbsp;<a href="#" onclick="pagination('previous')" class="previous round">&#8249;</a>&nbsp; <input type="text" id="gotoPage" style="padding: 5px; border: 1px solid #b1a6a6; border-radius: 5px; width:30px;">
                                    &nbsp;<a href="#" onclick="pagination('next')" class="next round">&#8250;</a>
                                    &nbsp;<a href="#" onclick="pagination('last')" class="next round">&#187;</a>
                                        &nbsp;<select name="items" id="items" style="padding: 5px; border: 1px solid #b1a6a6; border-radius: 5px" onchange="gridpage()">
                                        <option value="100">100</option>
                                        <option value="500">500</option>
                                        <option value="1000">1000</option>
                                        <option value="2000">2000</option>
                                    </select>
                                    &nbsp;<label>items per page </label>
                                    &nbsp; &nbsp; &nbsp; &nbsp;<label style="margin-left:109px;">Total No Of Records : </label>
                                        <span id="total" style="width:20%;border:none;margin-left:0px;color:#000"></span>
@*                                    <input type="text" readonly id="total" style="width:20%;border:none;background-color:#fff;margin-left:0px;">
*@                                    &nbsp;<label style="margin-left:4px;">Total pages : </label>
                                        <span id="totalpage" style="width:20%;border:none;margin-left:-1px; color:#000;"></span>
    @*<input type="text" readonly id="totalpage" style="width:20%;border:none;background-color:#fff;margin-left:-1px;">
*@                                </div>
                            </div>
                        </div>
                    </div>

                </div>
            </div>
        </section>
    </div>
    </div>
</body>
</html>
<script type="text/javascript">
    var trangid;
    var count;
    var result = 0;
    var orgindata = "";
    var radiochecked;
    var Rec_id;
    var getreconid = [];
    $(document).ready(function () {
        debugger;
        $("#navhead").text("Pagination Report");
        kendodate_format();
        getreconlist();
        getreportlist();
        var mindate = '1999-01-01';
        $("#period_from").kendoDatePicker({
            value: mindate,// sets max date
            format: "dd-MM-yyyy"
        });
        $("#period_to").kendoDatePicker({
            value: new Date(),// sets max date
            format: "dd-MM-yyyy"
        });
        $("#gotoPage").val(1);
        $("#Process").hide();
        $("#exportExcel").hide();
        $("#exportExcel1").hide();
        $("#dialog1").hide();
        debugger;
        //var dropdown_valuefreeze = $("#report_gid").data("kendoDropDownList").dataSource.read();

    })


    function cancel_btn() {
        debugger;
        var wnd1 = $("#dialog1").data("kendoWindow");
        wnd1.close();
    }


    function exportExcel() {
        $("#processGrid").getKendoGrid().saveAsExcel();
    }
    function getslno() {
        var grid = $("#processGrid").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var ReconName_id = $("#ReconName_id").val();
        if (ReconName_id == "") {
            ReconName_id = 0;
        }
        var period_from = $('#period_from').val();
        var period_to = $("#period_to").val();

        if (period_from == "") {
            var formatted_period_from = null;
        } else {
            formatted_period_from = period_from.split("-").reverse().join("-");
        }
        if (period_to == "") {
            var formatted_period_to = null;
        } else {
            formatted_period_to = period_to.split("-").reverse().join("-");
        }
        return { recongid: ReconName_id, periodfrom: formatted_period_from, periodto: formatted_period_to }
    }
    function Runprogress() {
        debugger;
        if (result == 0) {
            $.alert({
                title: 'Impact',
                content: "Please Generate the report",
                type: 'blue',


            });
            return false;
        }
        $("#Dynamic_grid").show();
        debugger;

       // $("#total").val(result);
        document.getElementById('total').innerHTML = result;
        var Actpageno = parseInt(parseInt(result) / parseInt(pagesize));
       // $('#totalpage').val(Actpageno);
        document.getElementById('totalpage').innerHTML = Actpageno;
        var data = {};
        data.in_rptsession_gid = count;
        data.in_page_no = pageno;
        data.in_page_size = pagesize;
        data.in_tot_records = result;
        data.in_recon_code = $("#reconname").val();
        // $("#processGrid").data("kendoGrid").dataSource.read();
        debugger;
        $.ajax({
            type: "POST",
           // url: '@Url.Action("ReportmatchoffGridRead", "Report")',
            url: '../Reports/getPageNoReport',
            dataType: "json",
            data: JSON.stringify(data),
           // data: '{outresult:' + result + ',_count:' + count + ',_pageno:' + pageno + ',_pagesize:' + pagesize + ',table_name:"' + Table_Name + '",condition:"' + orgindata + '",radio_checked:"' + radiochecked + '",recon_id:' + Rec_id + '}',
            contentType: 'application/json; charset=utf-8',
            success: function (Data1) {
                debugger;
                if(Data1 != '') {
                var columns = [];
                var chkval = JSON.parse(Data1);
                var arr = [];
                $.each(chkval, function (i, e) {

                    $.each(e, function (key, val) {
                        arr.push(val);
                    });

                });

                var data = JSON.parse(Data1);
                // var data2 = JSON.parse(result.Data2);
                var i = 0;

                var entryIndex = "entries[" + i + "]";

                for (var key in data[0]) {

                    var propType = typeof data[0][key];
                    //alert(key);
                    if (key != "") {
                        columns.push({
                            field: entryIndex,
                            title: key,
                            type: propType,
                            width: 150,
                            //attributes: key == "Row Labels" ? { style: "font-weight:bold;text-align:left;" } : { style: "font-weight:bold;text-align:right;" }
                        });
                    }
                    i = i + 1;
                    entryIndex = "entries[" + i + "]";
                }
                var rows = [];
                var data1 = JSON.parse(Data1);

                $.each(data1, function (i, e) {
                    var entryArray = [];
                    $.each(e, function (key, val) {

                        entryArray.push(val);
                    });

                    rows.push(kendo.observable({
                        entries: entryArray

                    }));



                });

                var viewModel = kendo.observable({
                    gridRows: rows
                });

                var configuration = {
                    //dataBound: onDataBound,
                    height: 280,
                    navigatable: true,
                    groupable: false,
                    editable: false,
                    sortable: true,
                    Scrollable: true,
                    filterable: true,
                    pagable: false,
                    resizable: true,
                    persistSelection: true,
                    selectable: "false",
                    columns: columns,
                    rows: viewModel,
                    //  dataBound: OnGridDataBound,
                };
                $("#example").remove();
                $('#Maingrid').append('<div id="example" style="position:relative" class="k-content"><table id="grid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                $("#grid").kendoGrid(configuration).data("kendoGrid");
                kendo.bind($("#grid"), viewModel);
                $(".page_bg").show();
                //OnGridDataBound();
                // generateGrid(Data1);
            }
            }
        });



        $("#exportExcel").show();
        if ($('.accordion_body').is(':visible')) {
            $(".accordion_body").slideUp(300);
            $(".plusminus").text('+');
        }
    }
    var currentpage = 0;
    var pageno = 1;
    var pagesize = 100;
    var currentpage = 0;
    function pagination(data) {
        debugger;
        if (data == "next") {
            currentpage = $("#gotoPage").val();
            pageno = parseInt(currentpage) + 1;
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
            //$("#processGrid").data("kendoGrid").dataSource.read();

        } else if (data == "last") {
            pageno = parseInt(parseInt(result) / parseInt(pagesize));
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
            //$("#processGrid").data("kendoGrid").dataSource.read();
        } else if (data == "first") {
            pageno = 1;
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
            //$("#processGrid").data("kendoGrid").dataSource.read();
        }
        else {
            currentpage = $("#gotoPage").val();
            pageno = currentpage - 1;
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
            //$("#processGrid").data("kendoGrid").dataSource.read();
        }

    }


    function gridpage() {
        debugger;
        pagesize = $('#items').val();
        var Actpageno = parseInt(parseInt(count) / parseInt(pagesize));
        $('#totalpage').val(Actpageno);
    }
 
    
    function OnRefresh() {
        debugger;
        var rflag = "";

        parcheck = 0;
        parchecksec = 0;

        $.confirm({
            icon: 'fa fa-warnings',
            title: 'Report Generation',
            autoClose: 'cancel|10000',
            //theme: 'dark',
            animationSpeed: 700,
            content: 'Are you sure you want to genearte?',
            type: 'blue',
            buttons: {
                confirm: function () {
                    debugger;
                    confirm()
                    debugger;
                },
                cancel: function () {
                    $.alert({
                        icon: 'fa fa-success',
                        title: 'Apply filter',
                        content: 'Cancelled.!',
                        type: 'blue',
                        animationSpeed: 700,
                    });

                }
            },
        });
    }

    function confirm() {
        debugger;
        var checkflag = "";
        var reportcondition = "";
        var reportgid = 0;
        var Transaction_Rpt = {};
        var Recon_gid = $("#recon_gid").val();
        //Rec_id = '2';
        //Rec_id = $("#report_gid").data("kendoDropDownList").value();//report_gid
        var str1 = "and";
        var str2 = "tran_date>="
        var str3 = "tran_date<="
        radiochecked = false;
       
        dataresponse = "";
        orgindata = "";
        getdata(reportcondition);
        orgindata = dataresponse;
        //getdata(orgindata);
        var data = {};
        data.in_report_code = $("#report_name").val();
        data.in_recon_code = $("#reconname").val();
        data.in_report_condition = 'AND' + orgindata;
        Transaction_Rpt.Report_condition = 'AND' + orgindata;

        if (ran == "emptyvalue") {
            $.alert({
                title: 'Impact',
                content: "please fill the value",
                type: 'blue',
            });

        }
        else if (Recon_gid == "0" || Recon_gid == undefined || Recon_gid == "") {
            $.alert({
                title: 'Impact',
                content: "Recon name should not be Empty",
                type: 'blue',
            });
        }
        else if (orgindata == "" || orgindata == undefined) {
            $.alert({
                title: 'Impact',
                content: "Minimum one filter need to be Add.",
                type: 'blue',
                animationSpeed: 700,
            });
        }
        else if (parcheck != parchecksec) {
            $.alert({
                title: 'Impact',
                content: "Open and close paranthesis mismatch",
                type: 'blue',
                animationSpeed: 700,
            });
        } else {
            if (radiochecked == true) { }
          else {
                debugger;
                $.ajax({
                    type: "POST",
                    data: JSON.stringify(data),
                    //data: '{table_name: "' + Table_Name + '",condition:  "' + orgindata + '",radio_checked:"' + radiochecked + '",recon_id:"' + Rec_id + '",Recon_gid:' + Recon_gid + '}',
                    url: '../Reports/Report_Runpagereport',
                    dataType: "json",
                    contentType: 'application/json; charset=utf-8',
                    success: function (Data1) {
                        debugger;
                        if(Data1 != '') {
                            res = JSON.parse(Data1);
                            result = res[0].out_rec_count;
                            count = res[0].out_result;
                            if (res[0].out_rec_count > 0) {
                                Runprogress();
                            } else {
                                $.alert({
                                    icon: 'fa fa-warning',
                                    title: 'Impact',
                                    content: res[0].out_msg,
                                    type: 'red',
                                    animationSpeed: 700,
                                });
                            }
                        }                                            
                    },
                    error: function (result) {
                        console.log(result);
                        $.alert({
                            icon: 'fa fa-success',
                            title: 'Impact',
                            content: 'Something went wrong',
                            type: 'red',
                            animationSpeed: 700,
                        });
                    }
                });
            }
        }
    }

    function CloseQcdpopup() {
        debugger;
        $("#processGrid").data("kendoGrid").dataSource.read();
    }

    function additionalinfo() {
        debugger;
        var r = Table_Name;
        //$("#total").val(count);
        document.getElementById('total').innerHTML = result;
        var Actpageno = parseInt(parseInt(count) / parseInt(pagesize));
       // $('#totalpage').val(Actpageno);
        document.getElementById('totalpage').innerHTML = Actpageno;
        return {
            outresult: result,
            _count: count,
            _pageno: pageno,
            _pagesize: pagesize,
            table_name: Table_Name,
            condition: orgindata,
            radio_checked: radiochecked,
            recon_id: Rec_id
        }

    }
  
    function onRequestEnd(e) {
        debugger;
    }
    function editDetails() {
        debugger;
        var grid = $("#processGrid").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var tranrecon_gid = $("#tranrecon_gid").val();
        var remark1 = $("#remark_desc").data("kendoDropDownList").value();
        $.ajax({
            type: "POST",
            data: '{remark1: "' + remark1 + '",tran_gid:  "' + trangid + '" }',
            url: '@Url.Action("RemarkReason", "SetUp")',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                debugger;
                if (data[1] > 0) {
                    $.dialog({
                        title: 'Imapct',
                        content: data[0],
                        type: 'green',

                    });
                    $("#tabs1").show();
                    $("#applyruledtl_gid").val(data[1]).trigger("change");
                    var wnd1 = $("#dialog1").data("kendoWindow");
                    if (wnd1) {
                        wnd1.close();
                    }
                }
                else {
                    $.dialog({
                        title: 'Impact',
                        content: data[0],
                        type: 'green',
                    });
                    //event.container.data("kendoWindow").one("close", onEditorTemplateClosing);
                }
            },

        });
    }
    function Reason(e) {
        window_open1();
    }
    function window_open1() {
        var grid = $("#processGrid").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var tranrecon_gid = model.tranrecon_gid;
        trangid = (model.tran_gid);
        $("#tranrecon_gid").val(tranrecon_gid);
        $("#dialog1").kendoWindow();
        var dialog1 = $("#dialog1").data("kendoWindow");
        dialog1.open().element.closest(".k-window").css({
            top: 143,
            left: 424, height: 144, width: 351
        });
        dialog1.title("Remark");
        dialog1.bind("open", window_open);
    }
    function viewDetails(e) {
        var grid = this,
            selectedRow = $(e.target).closest("tr")[0];
        grid.editRow(selectedRow);
        $(".k-grid-update").hide();
        $(".k-window-title").text("View");
        // window_open();
    }
    function window_open() {
        debugger
        var table_name = "recon_trn_vtranrecon"
        var grid = $("#processGrid").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));

        var filetype = model.filetype;
        var tranrecon_gid = model.tranrecon_gid;
        var reportcondition = "and tranrecon_gid = " + tranrecon_gid
        $.ajax({
            type: "POST",
            data: '{table_name: "' + table_name + '",condition:  "' + reportcondition + '" }',
            // url: "/Report/ReportExpenceGrid_Read",
            url: '@Url.Action("ReportExpenceGrid_Read", "Report")',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (Data1) {
                $("#dialog").kendoWindow();
                var dialog = $("#dialog").data("kendoWindow");
                dialog.open().element.closest(".k-window").css({
                    top: 121,
                    left: 300, height: 400, width: 900
                });
                dialog.title("Manual Match - Rule Based");
                dialog.bind("open", window_open);
                debugger
                $("#exportExcel1").show();
                var columns = [];
                var chkval = JSON.parse(Data1);
                var arr = [];
                $.each(chkval, function (i, e) {
                    debugger;
                    $.each(e, function (key, val) {
                        arr.push(val);
                    });

                });
                if (arr == "No Records Found!" || arr == "Error in Data!") {
                    alert("No Records found..!");
                    return false;
                }
                var data = JSON.parse(Data1);
                var i = 0;
                var entryIndex = "entries[" + i + "]";
                for (var val in data[0]) {
                    if (val == "Collection Center Name") {
                        columns.push({
                            field: entryIndex,
                            title: key,
                            attributes: { style: "text-align: left;" }
                        });
                    }
                    else {
                        if (val != "Collection Center Name")
                            columns.push({
                                field: entryIndex,
                                title: val,
                            });
                    }
                    i = i + 1;
                    entryIndex = "entries[" + i + "]";
                }
                var rows = [];
                var data1 = JSON.parse(Data1);

                $.each(data1, function (i, e) {
                    var entryArray = [];
                    $.each(e, function (key, val) {

                        entryArray.push(val);
                    });
                    rows.push(kendo.observable({
                        entries: entryArray
                    }));

                });

                var viewModel = kendo.observable({
                    gridRows: rows
                });

                var configuration = {
                    //dataBound: onDataBound,
                    height: 350,
                    navigatable: true,
                    groupable: false,
                    editable: false,
                    sortable: true,
                    Scrollable: true,
                    filterable: false,
                    pagable: false,
                    resizable: false,
                    persistSelection: true,
                    selectable: "false",
                    columns: columns,
                    rows: viewModel,
                    excel: {
                        fileName: "Manual Match.xlsx",
                        filterable: true,
                        allPages: false
                    },
                };
                $("#example").remove();
                $('#Maingrid').append('<div id="example" style="position:relative" class="k-content"><table id="grid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                var timeEditGrid = $("#grid").kendoGrid(configuration).data("kendoGrid");
                kendo.bind($("#grid"), viewModel);

                var grid = $("#grid").data("kendoGrid");
                for (var i = 0; i < grid.columns.length; i++) {
                    if (i != grid.columns.length) {
                        grid.autoFitColumn(i);  //autofit each column.
                    }
                }
            },
            error: function (result) {
                console.log(result);
            }
        });
    }
    $(".accordion_head").click(function () {
        debugger;
        if ($('.accordion_body').is(':visible')) {
            $(".accordion_body").slideUp(300);
            $(".plusminus").text('+');
        }
        if ($(this).next(".accordion_body").is(':visible')) {
            $(this).next(".accordion_body").slideUp(300);
            $(this).children(".plusminus").text('+');
            $("#Dynamic_grid").show();
        } else {
            $(this).next(".accordion_body").slideDown(300);
            $(this).children(".plusminus").text('-');
            $("#Dynamic_grid").hide();
        }

    });


    function getreportparamlist(report_code) {
        var data = {};
        data.in_reportparam_gid = 0;
        data.in_report_code = report_code;
        data.in_action = '';
        $.ajax({
            type: "POST",
            url: "../Reports/getreportparam",
            dataType: "json",
            data: JSON.stringify({ in_reportparam_gid: data.in_reportparam_gid, in_report_code: data.in_report_code, in_action: data.in_action }),
            contentType: 'application/json; charset=utf-8',
            success: function (data) {
                debugger;
                $("#report_param").empty();
                $("#report_param").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(data, function (index, item) {
                    $("#report_param").append($('<option>', {
                        value: item.reportparam_code,
                        text: item.reportparam_value
                    }));
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
    }

    function getreportlist() {
        debugger;
        var data = {};
        data.in_user_gid = 0;
        data.in_active_status = '';
        var Context = data;
        $.ajax({
            type: "POST",
            url: '../Reports/ReportList',
            dataType: 'json',
            data: JSON.stringify({}),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                debugger;
                $("#report_name").empty();
                $("#report_name").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(response, function (index, item) {
                    $("#report_name").append($('<option>', {
                        value: item.report_code,
                        text: item.report_desc
                    }));
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
    }


    function getreconlist() {
        var data = {};
        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        data.in_user_gid = 0;
        data.in_active_status = '';
        data.in_user_code = txtusername.user_name;
        var Context = data;
        $.ajax({
            type: "POST",
            url: '../Recon/Reconlistfetch',
            dataType: 'json',
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                debugger;
                $("#reconname").empty();
                $("#reconname").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(response, function (index, item) {
                    if (item.active_status == 'Y') {
                        getreconid.push(item);
                        $("#reconname").append($('<option>', {
                            value: item.recon_code,
                            text: item.recon_name
                        }));
                    }
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
    }

    function changeRecon(){
        debugger;
        var selectedrecon = getreconid.find(ele => ele.recon_code == $("#reconname").val());
        $("#recon_gid").val(selectedrecon.recon_gid);
    }

</script>
