@{
    ViewData["Title"] = "Report Generation";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
    <title></title>
    <style>

        .comboBox .k-dropdown-wrap.k-state-default {
            width: 58px !important;
        }

        .editable-dropdown {
            position: relative;
        }

        .form-select1 {
            display: block;
            width: 75%;
            background-clip: padding-box;
            padding: 0.4375rem 1.875rem 0.4375rem 0.875rem;
            -moz-padding-start: calc(0.875rem - 3px);
            font-size: 0.7375rem;
            font-weight: 400;
            line-height: 1.53;
            color: #697a8d;
            background-color: #fff;
            background-image: url(data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='rgba%2867, 89, 113, 0.6%29' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e);
            background-repeat: no-repeat;
            background-position: right 0.875rem center;
            background-size: 17px 12px;
            border: 1px solid #d9dee3;
            border-radius: 0.375rem;
            transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
            -webkit-appearance: none;
            -moz-appearance: none;
            appearance: none;
        }

        #dropdown-list {
            list-style: none;
            display: none;
            position: absolute;
            top: 100%;
            left: 0;
            width: 100%;
            border: 1px solid #ccc;
            background-color: #fff;
            z-index: 1;
        }

            #dropdown-list li {
                padding: 5px;
                cursor: pointer;
            }

        #editable-input {
            width: 100%;
        }

        .nav-item.me-2.me-xl-50 {
            margin-right: 33rem !important;
        }

        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-grid.k-widget {
            //height: 360px;
            height:160px;
        }


        .k-grid-header {
            font-weight: bold;
        }

        .k-content {
            font-weight: normal;
            font-size: 13px;
        }

        .k-widget.k-window {
            padding-top: 35px;
            min-width: 90px;
            min-height: 50px;
            width: 700px !important;
            height: 300px !important;
            top: 180.766px !important;
            /*left: 120px !important;*/
            z-index: 10003;
            left: 300px !important;
        }

        .action-button {
            width: 120px;
            background: #673AB7;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 0px 10px 5px;
            float: right;
            border-radius: 20px;
        }

        .action-button-previous {
            width: 100px;
            background: #616161;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 5px 10px 0px;
            float: right;
            border-radius: 20px;
        }

        div.k-header.k-grid-toolbar {
            background-image: none;
        }

        .k-link:link, .k-link:visited, .k-nav-current.k-state-hover .k-link {
            color: white !important;
        }

        .control-label.required:after {
            content: "*";
            color: red;
        }

        .k-block, .k-header, .k-grid-header, .k-toolbar, .k-grouping-header, .k-pager-wrap, .k-button, .k-draghandle, .k-treemap-tile, html .km-pane-wrapper .k-header {
            background-color: rgb(135, 46, 123) !important;
        }

        span.k-tooltip {
            white-space: pre-line;
        }

        span.k-tooltip {
            position: fixed;
            display: -webkit-box;
            border-width: 1px;
            padding: 2px 5px 1px 6px;
        }

        .tab-content {
            padding: 0.9rem;
            border-radius: 0.375rem;
        }

        .k-grid .k-grouping-header {
            height: 32px;
            font-size: 12px;
        }

        .k-grid .k-i-arrow-n, .k-grid .k-i-arrow-s {
            float: left;
        }

        .k-grid-header {
            background-color: #FEE7D5;
            color: black;
            font-size: 12px;
        }

            .k-grid-header th.k-header.k-filter-row th {
                text-align: center;
            }

        .k-grid td {
            padding: 0.3em 0.3em;
            font-size: 12px;
        }

 /*       .k-grid .k-grouping-header {
            height: 20px;
            font-size: 12px;
        }*/

        .k-grouping-header .k-group-indicator, .k-pivot-toolbar .k-button {
            height: 20px !important;
        }

        .k-state-selected, .k-state-selected:link, .k-state-selected:visited, .k-list > .k-state-selected, .k-list > .k-state-highlight, .k-panel > .k-state-selected, .k-ghost-splitbar-vertical, .k-ghost-splitbar-horizontal, .k-draghandle.k-state-selected:hover, .k-scheduler .k-scheduler-toolbar .k-state-selected, .k-scheduler .k-today.k-state-selected, .k-marquee-color {
            border-color: #872E7B !important;
            color: #e74949 !important;
        }

        .k-grid-content > table > tbody > .k-alt {
            /*background: #E0E6F8;*/
            line-height: 1px;
        }

        .form-horizontal .control-label {
            text-align: left;
        }

        div.k-grid tbody .k-button {
            min-width: 0;
        }

        .form-horizontal .control-label {
            font-weight: 400;
        }

        .k-grid .k-autocomplete.k-state-default, .k-grid .k-picker-wrap.k-state-default, .k-grid .k-numeric-wrap.k-state-default {
            height: 18px;
        }

        .content-wrapper, .right-side {
            background-color: #e7e7e7;
        }

        .info-box-icon {
            background: white;
        }

        div.k-window-content {
            overflow-y: auto;
            overflow-x: hidden;
        }

        .info-label {
            display: inline-block;
            cursor: pointer;
            color: blue;
        }

        .info-content {
            display: none;
            position: absolute;
            background-color: #f9f9f9;
            border: 1px solid #ccc;
            padding: 10px;
            z-index: 1;
        }

        .info-label:hover .info-content,
        .info-label.active .info-content {
            display: block;
        }

        .nav-align-top > .tab-content, .nav-align-right > .tab-content, .nav-align-bottom > .tab-content, .nav-align-left > .tab-content {
            box-shadow: none !important;
            margin-top: 18px !important;
        }

        .nav-align-top > .tab-content, .nav-align-right > .tab-content, .nav-align-bottom > .tab-content, .nav-align-left > .tab-content {
            box-shadow: none !important;
            margin-top: 18px;
        }

        .plusminus {
            float: right;
        }

        .ioniconplus {
            width: 15px;
            background-image: url('../images/minus-circled.png');
            background-repeat: no-repeat;
            background-position: -50px -128px;
            display: inline-block;
            cursor: pointer;
        }

        .k-grouping-header {
            color: #fff !important;
        }

        .k-link:link, .k-link:visited, .k-nav-current.k-state-hover .k-link {
            color: #fff !important;
        }

        .previous {
            /*background-color: #84b6e1;*/
            border: 1px solid #fff;
            color: white;
            text-decoration: none;
            display: inline-block;
            padding: 9px 11px 7px 10px;
            font-size: 9px;
           /* padding: 2px 10px;*/
        }

        .next {
            /*            background-color: #367fa9;
                */
            border: 1px solid #fff;
            color: white;
            text-decoration: none;
            display: inline-block;
            padding: 9px 11px 7px 10px;
            font-size: 9px;
            /*padding: 2px 10px;*/
        }

        .round {
            border-radius: 50%;
        }

        .page_bg {
            width: 100%;
            background-color: rgb(135, 46, 123);
        }

        .accordion_head {
            background-color: rgb(135, 46, 123);
            color: white;
            cursor: pointer;
            font-size: 14px;
            margin: 10px 6px 6px 0px;
            padding: 1px 3px;
        }
    </style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <div class="card-body" style="margin-top:-1%;height: 84%;">
                <form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
                    <div class="col-md-12">
                        <div class="box box-orange" style="height:auto;">
                            <div class="row">
                                <div class="col-sm-3">
                                    <label for="" class="form-label">Report Templete Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                    <input class="form-control" id="rt_name" name="ReportTemplete" type="text" disabled>
                                    <input class="form-control" type="hidden" id="reporttemplate_gid" value=0>
                                </div>
                                <div class="col-sm-4">
                                    <label for="" class="form-label">Report&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                                    <select id="cmbreporttype" class="form-select form-control">
                                    </select>
                                </div>
                                <div class="col-md-3">
                                    <label for="organization" class="form-label">Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label><br>
                                    <select id="reconname" class="form-select form-control"> </select>
                                </div>
                                <div class="col-sm-2" style="text-align: right;">
                                    <img onclick="generateReport()" style="cursor:pointer;margin-top: 20%;height: 23px;width: 27px;" src="~/Assets/images/excel.png" title="Generate Report">&nbsp;&nbsp;&nbsp;&nbsp;
                                    <img onclick="generateXlsx()" style="cursor:pointer;margin-top: 20%;height: 23px;width: 27px;" src="~/Assets/images/xlsx.jpg" title="Xlxs Report">&nbsp;&nbsp;&nbsp;&nbsp;
                                    <img onclick="preview()" style="cursor:pointer;margin-top: 20%;height: 23px;width: 27px;" src="~/Assets/images/preview.png" title="Preview Report">&nbsp;&nbsp;&nbsp;&nbsp;
                                    <a href="../Reports/ReportGeneration_newlist"><img style="cursor:pointer;margin-top: 20%;" src="~/Content/images/toplist.png" title="Back"></a>&nbsp;&nbsp;&nbsp;&nbsp;
                                </div>
                            </div>

                            <div class="col-md-12">
                                <div class="accordion_container">
                                    <div class=" panel panel-primary" style="margin-bottom:5px;">
                                        <div class="accordion_head">Attribute Search <span class="plusminus">+</span> </div>
                                        <div class="accordion_body">
                                            <div class="panel-body" style="padding-right:50px;width:100%;max-height:100%">
                                                <div id="Partialone" style="margin:auto;height:200px;width:104%;">
                                                    <div id="gd_tempfilter">
                                                        <div id="grid_tempfilter">
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="accordion_footer">
                                            <div class="row">
                                                <div class="col-sm-10">
                                                    @Html.TextArea("Message", new { rows = 1, columns = 40, id = "framevalue", style = "width:90%;background-color:rgb(135,46,123);border:none;color:white;font-size:smaller;pointer-events: none;" })
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-12" style="padding:0px; margin:0px;" id="Dynamic_grid">
                                <div id="Maingrid" style="margin:auto;height:auto;top:-2px;width:100%;margin-left:0%;"> </div>
                                <div class="page_bg" style="display:none;padding: 5px 2px;">
                                    <a href="#" onclick="pagination('first')" class="previous round"><span>|&#x25C0;</span></a>
                                    &nbsp;<a href="#" onclick="pagination('previous')" class="previous round"><span>&#x25C0;</span></a>
                                    &nbsp; <input type="text" onkeydown="pageChange(event)" onfocusout="pageChange(event)" id="gotoPage" style="text-align:center; border: 1px solid #b1a6a6; border-radius: 5px; width:36px;padding: 2px 5px 5px 2px;">
                                    &nbsp;<a href="#" onclick="pagination('next')" class="next round"><span>&#x25B6;</span></a>
                                    &nbsp;<a href="#" onclick="pagination('last')" class="next round"><span>&#x25B6;|</span></a>
                                    &nbsp;<select hidden name="items" id="items" style="padding: 5px; border: 1px solid #b1a6a6; border-radius: 5px" onchange="gridpage1()">
                                        <option value="100">100</option>
                                        <option value="500">500</option>
                                        <option value="1000">1000</option>
                                        <option value="2000">2000</option>
                                    </select>
                                    &nbsp;
                                        <input id="comboBox" style="width:90px !important;" />                                   
                                    &nbsp;<label style="color: #fff">items per page </label>
                                    &nbsp; &nbsp; &nbsp; &nbsp;<label style="margin-left:109px;color: #fff;">Total No Of Records : </label>
                                    <span id="total" style="width:20%;border:none;margin-left:0px;color:#fff"></span>
                                    &nbsp;<label style="margin-left:4px; color: #fff;">Total pages : </label>
                                    <span id="totalpage" style="width:20%;border:none;margin-left:-1px; color:#fff;"></span>
                                </div>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
</body>
</html>

<script type="text/javascript">
    var trangid;
    var count;
    var result = 0;
    var orgindata = "";
    var radiochecked;
    var Rec_id;
    var getreconid = [];
    $(document).ready(function () {
        var gridcopy = [];
        $("#navhead").text("Report Generation");
        kendodate_format();
        getreconlist();
        detailfetch();
        $("#cmbreporttype").prop("disabled", false);
        $("#framevalue").hide();
        $("#gotoPage").val(1);
        $("#comboBox").kendoComboBox({
            dataSource: ["100", "200", "300"],
            filter: "contains",
            value: "100",
            suggest: true,
            editable: true, // Enable editable option
            change: function (e) {
                debugger;
                var inputValue = this.value();
                if (inputValue != "") {
                    gridpage(inputValue);
                } else {
                    $("#comboBox").data("kendoComboBox").value("100")
                }          
            },
            blur: function () {
                debugger;
               // var comboBoxValue = comboBox.data("kendoComboBox").value();
                var comboBoxValue = this.value();
                gridpage(comboBoxValue);
            }
        }).data("kendoComboBox");
    });

    function getreconlist() {
        var data = {};
        var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
        data.in_user_gid = 0;
        data.in_active_status = '';
        data.in_user_code = txtusername.user_name;
        var Context = data;
        $.ajax({
            type: "POST",
            url: '../Recon/Reconlistfetch',
            dataType: 'json',
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var res = JSON.parse(response);
                $("#reconname").empty();
                $("#reconname").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(res, function (index, item) {
                    if (item.active_status == 'Y') {
                        $("#reconname").append($('<option>', {
                            value: item.recon_code,
                            text: item.recon_name
                        }));
                    }
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
    }

    function detailfetch() {
        var data = getlocalStorage("ls_pageList");
        $.ajax({
            type: "POST",
            url: '../Reports/ReportList',
            dataType: 'json',
            data: JSON.stringify({}),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                $("#cmbreporttype").empty();
                $("#cmbreporttype").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(response, function (index, item) {
                    $("#cmbreporttype").append($('<option>', {
                        value: item.report_code,
                        text: item.report_desc
                    }));
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
        if (getlocalStorage('btn_clk_val') == "Create") {
            $("#txtstatus").val("Active");
            $("#reporttemplate_gid").val("0");
            $("#reporttemplate_code").val("");
            $("#txtmode").val(getlocalStorage('btn_clk_val'));
            grid_tempfilter([]);
        }
        else if (getlocalStorage('btn_clk_val') == "View" || getlocalStorage('btn_clk_val') == "Edit") {
            if (getlocalStorage("ls_pageList") != undefined) {
                //detail fetch
                $.ajax({
                    type: "POST",
                    url: '../Reports/reporttemplatefetch',
                    dataType: 'json',
                    data: JSON.stringify({ in_reporttemplate_code: data }),
                    contentType: 'application/json; charset=utf-8',
                    success: function (response) {
                        if (response != " ") {
                            var res = JSON.parse(response);
                            $("#reporttemplate_code").val(res.Table[0].reporttemplate_code);
                            $("#txtmode").val(getlocalStorage('btn_clk_val'));
                            $("#txtstatus").val("Active");
                            $("#reporttemplate_gid").val(res.Table[0].reporttemplate_gid);
                            $("#rt_name").val(res.Table[0].reporttemplate_name);
                            $("#cmbreporttype").val(res.Table[0].report_code);
                            $("#cmbreporttype").prop("disabled", true);
                            gridcopy = res.Table1;
                            grid_tempfilter(gridcopy);
                        }
                        else {
                            grid_tempfilter([])
                        }
                    },
                    error: function (er) {
                        alert(er)
                        console.log(er)
                    }

                });
            }
        }
    }

    function grid_tempfilter(data) {
        var filter_criteria_desc_list = "";
        var join_condition_list = "";
        var reportparam_value_list = "";
        $("#grid_tempfilter").kendoGrid({
            dataSource: {
                data: data,
                pageSize: 10,
                sort: [{ field: "filter_seqno", dir: "asc" }],
                schema: {
                    model: {
                        fields: {
                            reporttemplatefilter_gid: { type: "number", defaultValue: 0 },
                            reporttemplate_code: { type: "string" },
                            filter_seqno: { type: "number", defaultValue: "0" },
                            report_field: { type: "string" },
                            reportparam_value: { type: "string" },
                            filter_criteria: { type: "string" },
                            filter_criteria_desc: { type: "string" },
                            filter_value: { type: "string" },
                            open_parentheses_flag: { type: "string", editable: false },
                            close_parentheses_flag: { type: "string", editable: false },
                            join_condition: { type: "string" },
                            active_status: { type: "string" },
                            active_status_desc: { type: "string" },
                        }
                    }
                }
            },
            height: 280,
            groupable: false,
            edit: OnEdit,
            sortable: false,
            dataBound: function (e) {
                resultData = e.sender._data;
                var rows = $('#grid_tempfilter').data('kendoGrid').tbody.children();
                setColor(rows, resultData);               
            },

            filterable: false,
            selectable: "row",
            navigatable: true,
            pageable: true,
            resizable: true,
            pageable: {
                refresh: false,
                pageSizes: true,
                buttonCount: 5
            },
            toolbar: "<a  href='javascript:void(0)' onclick='addRow()' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
            columns: [{
                command: [
                    {
                        name: "Delete",
                        id: "Delete",
                        template: "<a href='' onclick='myDeleteJs()' data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
                    },
                ], title: "Action&nbsp;", width: "40px",
            },
            {
                field: "filter_seqno",
                title: "Seq No",
                width: 50,
            },
            {
                field: "open_parentheses_flag",
                title: "(", width: 20,              
                template: function (dataItem) {                  
                    if (dataItem.reporttemplatefilter_gid > 0) {
                        return '<input type="checkbox" disabled="disabled" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
                    } else {
                        return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
                    }
                }              
            },
            {
                field: "reporttemplatefilter_gid",
                title: "reporttemplatefilter_gid",
                hidden: true,
            },
            {
                field: "reporttemplate_code",
                title: "reporttemplate_code",
                hidden: true,
            },
            {
                field: "report_field",
                title: "report_field",
                width: 120,
                hidden: true
            },
            {
                field: "reportparam_value",
                title: "Filter Field",
                editor: function (container, options) {
                    combo_editor_reportfiled(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "report_field", "grid_tempfilter")
                },
                width: 120,
            },
            {
                field: "filter_criteria",
                title: "Filter Criteria",
                width: 120,
                hidden: true
            },
            {
                field: "filter_criteria_desc",
                title: "Filter criteria",
                editor: function (container, options) {
                    combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_tempfilter", "SOURCE")
                },
                editable: true,
                width: 120
            },
            {
                field: "filter_value",
                title: "Filter Value",
                width: 120
            },
            {
                field: "close_parentheses_flag",
                title: ")",
                template: function (dataItem) {
                    if (dataItem.reporttemplatefilter_gid > 0) {
                        return '<input type="checkbox" disabled="disabled" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
                    } else {
                        return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
                    }
                } ,                
                width: 20,
            },
            {
                field: "join_condition",
                title: "Joins",
                editor: function (container, options) {
                    combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_tempfilter")
                },
                width: 60
            },
            {
                field: "active_status",
                title: "Status",
                hidden: true
            },
            {
                field: "active_status_desc",
                title: "Status",
                width: 80,
                hidden: true
            }],
            editable: true,
        });
        join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
    }

    function addRow() {
        var grid = $("#grid_tempfilter").data("kendoGrid");
        var dataSource = grid.dataSource;

        // Get the last sequence number and increment it
        var lastSeqNo = grid.dataSource._data.length;
        var newSeqNo = parseInt(lastSeqNo) + 1;

        // Add a new row with the incremented sequence number
        dataSource.add({ filter_seqno: newSeqNo, open_parentheses_flag: "N", close_parentheses_flag: "N" });
    }


    function OnEdit(e) {
        try {
            if (e.model.reporttemplatefilter_gid > 0) {
                e.sender.closeCell();
            }
            //setDefaultValues(e);
        }
        catch (err) {
            javascript_log4j_root(arguments.callee.name, err);
        }
    }
    $(function () {
        $('#grid_tempfilter').on('click', '.chkbx1', function () {
            var checked = $(this).is(':checked');
            var grid = $('#grid_tempfilter').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            var row = $(this).closest('tr');
            if (checked == true) {
                dataItem._set('open_parentheses_flag', 'Y');
            }
            else {
                dataItem._set('open_parentheses_flag', 'N');
            }
        })
    })
    $(function () {
        $('#grid_tempfilter').on('click', '.chkbx2', function () {
            var checked = $(this).is(':checked');
            var grid = $('#grid_tempfilter').data().kendoGrid;
            var dataItem = grid.dataItem($(this).closest('tr'));
            var row = $(this).closest('tr');
            if (checked == true) {
                dataItem._set('close_parentheses_flag', 'Y');
            }
            else {
                dataItem._set('close_parentheses_flag', 'N');
            }
        })
    })
    //var gridRowID = -1;
    //function sel_checkbox(data) {
    //    gridRowID++;
    //    var isChecked = data.open_parentheses_flag;
    //    var con = "";
    //    var dis = "disabled";
    //    if (isChecked == "Y") {
    //        con = 'checked';
    //    }
    //    if (data.reporttemplatefilter_gid > 0) {
    //        return '<input id="chk_sel_' + data.reporttemplatefilter_gid + '" disabled class="checkbox" type="checkbox" ' + con + ' /> ';
    //    }         
    //    else {
    //        return '<input id="chk_sel_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' /> ';
    //    }
    //}
    //var gridRowID1 = -1;
    //function sel_checkbox1(data) {
    //    gridRowID1++;
    //    var isChecked1 = data.close_parentheses_flag;
    //    var con = "";
    //    if (isChecked1 == "Y") {
    //        con = 'checked';
    //    }
    //    if (data.reporttemplatefilter_gid > 0) {
    //        return '<input id="chk_sel1_' + data.reporttemplatefilter_gid + '" disabled class="checkbox" type="checkbox" ' + con + ' /> ';
    //    } else {
    //        return '<input id="chk_sel1_' + data.reporttemplatefilter_gid + '" class="checkbox" type="checkbox" ' + con + ' /> ';
    //    }
    //}

    function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {

        var arr = [];
        var in_master_code = "QCD_RP_CONSTRAINT";
        var in_user_code = "";
        $.ajax({
            type: "POST",
            url: '../Common/Qcdmaster',
            dataType: 'json',
            data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {

                if (response.length > 0) {
                    for (i = 0; response.length > i; i++) {
                        var list = {};
                        list.code = response[i].masterCode;
                        list.desc = response[i].masterName;
                        arr.push(list);
                    }
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });

        $('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
            autoBind: false,
            filter: "contains",
            dataSource: arr,
            change: function (e) {

                var cmb_value = this.value();
                if (cmb_value && this.selectedIndex == -1) {
                    this.value("");
                }
                //else{FF
                var cmb_var = $("#" + grid_id).data("kendoGrid");
                var selectedItem = cmb_var.dataItem(cmb_var.select());
                var combobox_data = $("#" + cmbid).data("kendoComboBox");
                if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
                    selectedItem[datafield] = "";
                    selectedItem[code_datafield] = "";
                }
                else {
                    selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
                    selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
                }
            }
        });

        $("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
    }

    function combo_editor_reportfiled(container, cmbid, datasource, datafield, code_datafield, grid_id) {
        var arr1 = [];
        var data = {};
        data.in_reportparam_gid = 0;
        data.in_report_code = $("#cmbreporttype").val();
        data.in_recon_code = $("#reconname").val()
        data.in_action = '';
        $.ajax({
            type: "POST",
            url: "../Reports/getreportparamrecon",
            dataType: "json",
            async: false,
            data: JSON.stringify({ in_reportparam_gid: data.in_reportparam_gid, in_report_code: data.in_report_code, in_action: data.in_action, in_recon_code: data.in_recon_code }),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var res = JSON.parse(response);
                if (res.length > 0) {
                    for (i = 0; res.length > i; i++) {
                        var list = {};
                        list.code = res[i].reportparam_code;
                        list.desc = res[i].reportparam_desc;
                        arr1.push(list);
                    }
                }
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });

        $('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
            autoBind: false,
            filter: "contains",
            dataSource: arr1,
            change: function (e) {
                var cmb_value = this.value();
                if (cmb_value && this.selectedIndex == -1) {
                    this.value("");
                }
                //else{FF
                var cmb_var = $("#" + grid_id).data("kendoGrid");
                var selectedItem = cmb_var.dataItem(cmb_var.select());
                var combobox_data = $("#" + cmbid).data("kendoComboBox");
                if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
                    selectedItem[datafield] = "";
                    selectedItem[code_datafield] = "";
                }
                else {
                    selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
                    selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
                }
            }
        });
        $("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
    }

    function myDeleteJs() {
        var grid = $("#grid_tempfilter").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var rep_reporttemplatefilter_gid = parseInt(model.reporttemplatefilter_gid);
        if (rep_reporttemplatefilter_gid > 0) {
            debugger
            if (model.reporttemplatefilter_gid) {
                $.alert({
                    title: 'Recon',
                    content: 'Don not have Option to delete this report Templete filter',
                    type: 'red',
                });
            }
        }else{
            grid.dataSource.remove(model);
        }        
    }
    
    function generateReport() {
        showProgress();
        var grid = $("#grid_tempfilter").data("kendoGrid");
        var objpplmapupdlist = [];
        var rpt_cond = "";
        var value = "";
        var open_braces = "";
        var close_braces = "";
        var joins = "";
        var joins1 = "";

        for (var i = 0; i < grid._data.length; i++) {
            value = "";
            open_braces = "";
            close_braces = "";
            joins = "";
            joins1 = "";

            if (i == 0) {
                joins1 = 'AND ';
            }

            if (i == grid._data.length - 1) {
                joins = " ";
            }
            else {
                if (grid._data[i].join_condition) {
                    joins = grid._data[i].join_condition + " ";
                } else {
                    joins = 'AND '
                }
            }

            // close braces assigning
            if ($('#chk_sel1_' + grid._data[i].reporttemplatefilter_gid).is(":checked")) {
                close_braces = " ) ";
            }

            // open braces assigning
            if ($('#chk_sel_' + grid._data[i].reporttemplatefilter_gid).is(":checked")) {
                open_braces = "(";
            }

            // Condition based value assigning
            if (grid._data[i].filter_criteria == "QCD_ISNOT_EQUAL_TO") {
                value = " != '" + grid._data[i].filter_value + "'";
            }
            else if (grid._data[i].filter_criteria == "QCD_ENDS_WITH") {
                value = " like '%" + grid._data[i].filter_value + "'";
            }
            else if (grid._data[i].filter_criteria == "QCD_BEGINS_WITH") {
                value = " like '" + grid._data[i].filter_value + "%'";
            }
            else if (grid._data[i].filter_criteria == "QCD_IS_EQUAL_TO") {
                value = " = '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_CONTAINS") {
                value = " like '%'" + grid._data[i].filter_value + "%'";
            } else if (grid._data[i].filter_criteria == "QCD_IS_GREATER_THAN") {
                value = " > '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_IS_LESS_THAN") {
                value = " < '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_LESSTHAN_EQUALTO") {
                value = " <= '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_GREATERTHAN_EQUALTO") {
                value = " >= '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_DOESNOT_CONTAINT") {
                value = " not like '%'" + grid._data[i].filter_value + "%'";
            }

            rpt_cond += joins1 + " " + open_braces + grid._data[i].report_field + value + " " + close_braces + joins;
        }

        var data = {
            "in_recon_code": $("#reconname").val(), "in_report_code": $("#cmbreporttype").val(), "in_report_param": $("#cmbreporttype").find(":selected").text(),
            "reportcondition": rpt_cond,
            "in_ip_addr": "localhost", "in_outputfile_flag": true, "in_user_code": "Hema"
        };

        if ($("#reconname").val() && $("#cmbreporttype").val() && rpt_cond) {
            $.alert({
                title: 'Recon',
                content: "Report Generated, Please check the Job Status in Utility",
                type: 'green',
            });
            hideProgress();
            $.ajax({
                type: "POST",
                url: '../Reports/generateReport',
                dataType: 'json',
                async: false,
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8',
                //success: function (response) {
                //    var res = JSON.parse(response);

                //    if (res.length > 0) {
                //        var data = res[0];
                //        if (data.out_result != '0') {
                //            $.alert({
                //                title: 'Recon',
                //                content: data.out_msg,
                //                type: 'green',
                //            });

                //        } else {
                //            $.alert({
                //                title: 'Recon',
                //                content: data.out_msg,
                //                type: 'red',
                //            });
                //        }
                //    } else {
                //        $.alert({
                //            title: 'Recon',
                //            content: "Something Went Wrong ..!",
                //            type: 'red',
                //        });
                //    }
                //},
                //error: function (er) {
                //
                //    alert(er)
                //    console.log(er)
                //}
            });
        }
        else if (!$("#reconname").val()) {
            $.alert({
                title: 'Recon',
                content: "Please select Recon Name ..!",
                type: 'red',
            });
            hideProgress();
        } else if (!$("#cmbreporttype").val()) {
            $.alert({
                title: 'Recon',
                content: "Please select Report..!",
                type: 'red',
            });
            hideProgress();
        }
    }

    function preview() {
        var grid = $("#grid_tempfilter").data("kendoGrid");
        var objpplmapupdlist = [];
        var rpt_cond = "";
        var value = "";
        var open_braces = "";
        var close_braces = "";
        var joins = "";
        var joins1 = "";

        for (var i = 0; i < grid._data.length; i++) {
            value = "";
            open_braces = "";
            close_braces = "";
            joins = "";
            joins1 = "";

            if (i == 0) {
                joins1 = 'AND ';
            }

            if (i == grid._data.length - 1) {
                joins = " ";
            }
            else {
                if (grid._data[i].join_condition) {
                    joins = grid._data[i].join_condition + " ";
                } else {
                    joins = 'AND '
                }
            }

            // close braces assigning
            if (grid._data[i].close_parentheses_flag == 'Y') {
                close_braces = " ) ";
            }

            // open braces assigning
            if (grid._data[i].open_parentheses_flag == 'Y') {
                open_braces = "(";
            }

            // Condition based value assigning
            if (grid._data[i].filter_criteria == "QCD_ISNOT_EQUAL_TO") {
                value = " != '" + grid._data[i].filter_value + "'";
            }
            else if (grid._data[i].filter_criteria == "QCD_ENDS_WITH") {
                value = " like '%" + grid._data[i].filter_value + "'";
            }
            else if (grid._data[i].filter_criteria == "QCD_BEGINS_WITH") {
                value = " like '" + grid._data[i].filter_value + "%'";
            }
            else if (grid._data[i].filter_criteria == "QCD_IS_EQUAL_TO") {
                value = " = '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_CONTAINS") {
                value = " like '%'" + grid._data[i].filter_value + "%'";
            } else if (grid._data[i].filter_criteria == "QCD_IS_GREATER_THAN") {
                value = " > '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_IS_LESS_THAN") {
                value = " < '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_LESSTHAN_EQUALTO") {
                value = " <= '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_GREATERTHAN_EQUALTO") {
                value = " >= '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_DOESNOT_CONTAINT") {
                value = " not like '%'" + grid._data[i].filter_value + "%'";
            }

            rpt_cond += joins1 + " " + open_braces + grid._data[i].report_field + value + " " + close_braces + joins;
        }

        var data = {
            "in_recon_code": $("#reconname").val(),
            "in_report_code": $("#cmbreporttype").val(),
            "in_report_condition": rpt_cond,
        };

        if ($("#reconname").val() && $("#cmbreporttype").val() && rpt_cond) {
            $.ajax({
                type: "POST",
                url: '../Reports/Report_Runpagereport',
                dataType: 'json',
                async: false,
                data: JSON.stringify(data),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    var res = JSON.parse(response);
                    if (res.length > 0) {
                        var data = res[0];
                        if (data.out_result != '0') {
                            result = res[0].out_rec_count;
                            count = res[0].out_result;
                            if (res[0].out_rec_count > 0) {
                                $('#framevalue').text(rpt_cond.slice(3));
                                $("#framevalue").show();
                                Runprogress();
                            } else {
                                $.alert({
                                    title: 'Recon',
                                    content: 'No Records Found',
                                    type: 'red',
                                });
                                $(this).next(".accordion_body").slideDown(300);
                                $(".plusminus").text('+');
                                $("#Dynamic_grid").hide();
                            }
                        } else {
                            $.alert({
                                title: 'Recon',
                                content: data.out_msg,
                                type: 'red',
                            });
                        }
                    } else {
                        $.alert({
                            title: 'Recon',
                            content: "Something Went Wrong ..!",
                            type: 'red',
                        });
                    }
                },
                error: function (er) {
                    hideProgress();
                    alert(er)
                    console.log(er)
                }
            });
        }
        else if (!$("#reconname").val()) {
            $.alert({
                title: 'Recon',
                content: "Please Select Recon Name..!",
                type: 'red',
            });
            hideProgress();
        } else if (!$("#cmbreporttype").val()) {
            $.alert({
                title: 'Recon',
                content: "Please Select Report..!",
                type: 'red',
            });
            hideProgress();
        }
    }

    function Runprogress() {
        if (result == 0) {
            $.alert({
                title: 'Impact',
                content: "Please Generate the report",
                type: 'blue',


            });
            return false;
        }
        $("#Dynamic_grid").show();
        document.getElementById('total').innerHTML = result;
        var Actpageno = parseInt(parseInt(result) / parseInt(pagesize));
        document.getElementById('totalpage').innerHTML = Actpageno;
        var data = {};
        data.in_rptsession_gid = count;
        data.in_page_no = pageno;
        data.in_page_size = pagesize;
        data.in_tot_records = result;
        data.in_recon_code = $("#reconname").val();
        $.ajax({
            type: "POST",
            url: '../Reports/getPageNoReport',
            dataType: "json",
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (Data1) {

                if (Data1 != '') {
                    var columns = [];
                    var chkval = JSON.parse(Data1);
                    var arr = [];
                    $.each(chkval, function (i, e) {
                        $.each(e, function (key, val) {
                            arr.push(val);
                        });
                    });

                    var data = JSON.parse(Data1);
                    var i = 0;

                    var entryIndex = "entries[" + i + "]";

                    for (var key in data[0]) {

                        var propType = typeof data[0][key];
                        //alert(key);
                        if (key != "") {
                            columns.push({
                                field: entryIndex,
                                title: key,
                                type: propType,
                                width: 150,
                            });
                        }
                        i = i + 1;
                        entryIndex = "entries[" + i + "]";
                    }
                    var rows = [];
                    var data1 = JSON.parse(Data1);

                    $.each(data1, function (i, e) {
                        var entryArray = [];
                        $.each(e, function (key, val) {

                            entryArray.push(val);
                        });

                        rows.push(kendo.observable({
                            entries: entryArray
                        }));
                    });

                    var viewModel = kendo.observable({
                        gridRows: rows
                    });

                    var configuration = {
                        height: 300,
                        navigatable: true,
                        groupable: true,
                        editable: false,
                        sortable: true,
                        Scrollable: true,
                        filterable: true,
                        pagable: false,
                        resizable: true,
                        persistSelection: true,
                        selectable: "false",
                        columns: columns,
                        rows: viewModel,
                    };
                    $("#example").remove();
                    $('#Maingrid').append('<div id="example" style="position:relative" class="k-content"><table id="grid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                    $("#grid").kendoGrid(configuration).data("kendoGrid");
                    kendo.bind($("#grid"), viewModel);
                    $(".page_bg").show();
                }
            }
        });

        $("#exportExcel").show();
        if ($('.accordion_body').is(':visible')) {
            $(".accordion_body").slideUp(300);
            $(".plusminus").text('+');
        }
    }
    var currentpage = 0;
    var pageno = 1;
    var pagesize = 100;

    function pageChange(event) {
        if (event.keyCode === 13) {
            pageno = $("#gotoPage").val();
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
        } else if (event.type === 'focusout') {
            pageno = $("#gotoPage").val();
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
        }
    }

    function pagination(data) {

        if (data == "next") {
            currentpage = $("#gotoPage").val();
            pageno = parseInt(currentpage) + 1;
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();

        } else if (data == "last") {
            pageno = parseInt(parseInt(result) / parseInt(pagesize));
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
        } else if (data == "first") {
            pageno = 1;
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
        }
        else {
            currentpage = $("#gotoPage").val();
            pageno = currentpage - 1;
            pagesize = $("#items").val();
            $("#gotoPage").val(pageno);
            Runprogress();
        }

    }


    function gridpage1() {
        debugger;
        pagesize = $('#items').val();
        var Actpageno = parseInt(parseInt(count) / parseInt(pagesize));
        $('#totalpage').val(Actpageno);
    }

    function gridpage(itemsPerPage) {
        debugger;
        console.log(`count`, count);
        console.log(`pagesize`, pagesize);
        console.log(`result`, result);
        pagesize = itemsPerPage;
        var Actpageno = parseInt(parseInt(count) / parseInt(pagesize));
        $('#totalpage').val(Actpageno);
        Runprogress();
    }


    function CloseQcdpopup() {
        $("#processGrid").data("kendoGrid").dataSource.read();
    }

    function additionalinfo() {

        var r = Table_Name;
        //$("#total").val(count);
        document.getElementById('total').innerHTML = result;
        var Actpageno = parseInt(parseInt(count) / parseInt(pagesize));
        // $('#totalpage').val(Actpageno);
        document.getElementById('totalpage').innerHTML = Actpageno;
        debugger;
        return {
            outresult: result,
            _count: count,
            _pageno: pageno,
            _pagesize: pagesize,
            table_name: Table_Name,
            condition: orgindata,
            radio_checked: radiochecked,
            recon_id: Rec_id
        }

    }

    function onRequestEnd(e) {

    }
    function editDetails() {

        var grid = $("#processGrid").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var tranrecon_gid = $("#tranrecon_gid").val();
        var remark1 = $("#remark_desc").data("kendoDropDownList").value();
        $.ajax({
            type: "POST",
            data: '{remark1: "' + remark1 + '",tran_gid:  "' + trangid + '" }',
            url: '@Url.Action("RemarkReason", "SetUp")',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (data) {

                if (data[1] > 0) {
                    $.dialog({
                        title: 'Imapct',
                        content: data[0],
                        type: 'green',

                    });
                    $("#tabs1").show();
                    $("#applyruledtl_gid").val(data[1]).trigger("change");
                    var wnd1 = $("#dialog1").data("kendoWindow");
                    if (wnd1) {
                        wnd1.close();
                    }
                }
                else {
                    $.dialog({
                        title: 'Impact',
                        content: data[0],
                        type: 'green',
                    });
                    //event.container.data("kendoWindow").one("close", onEditorTemplateClosing);
                }
            },

        });
    }

    function Reason(e) {
        window_open1();
    }
    function window_open1() {
        var grid = $("#processGrid").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));
        var tranrecon_gid = model.tranrecon_gid;
        trangid = (model.tran_gid);
        $("#tranrecon_gid").val(tranrecon_gid);
        $("#dialog1").kendoWindow();
        var dialog1 = $("#dialog1").data("kendoWindow");
        dialog1.open().element.closest(".k-window").css({
            top: 143,
            left: 424, height: 144, width: 351
        });
        dialog1.title("Remark");
        dialog1.bind("open", window_open);
    }
    function viewDetails(e) {
        var grid = this,
            selectedRow = $(e.target).closest("tr")[0];
        grid.editRow(selectedRow);
        $(".k-grid-update").hide();
        $(".k-window-title").text("View");
        // window_open();
    }
    function window_open() {
        debugger
        var table_name = "recon_trn_vtranrecon"
        var grid = $("#processGrid").data("kendoGrid");
        var model = grid.dataItem($(event.target).closest("tr"));

        var filetype = model.filetype;
        var tranrecon_gid = model.tranrecon_gid;
        var reportcondition = "and tranrecon_gid = " + tranrecon_gid
        $.ajax({
            type: "POST",
            data: '{table_name: "' + table_name + '",condition:  "' + reportcondition + '" }',
            // url: "/Report/ReportExpenceGrid_Read",
            url: '@Url.Action("ReportExpenceGrid_Read", "Report")',
            dataType: "json",
            contentType: 'application/json; charset=utf-8',
            success: function (Data1) {
                $("#dialog").kendoWindow();
                var dialog = $("#dialog").data("kendoWindow");
                dialog.open().element.closest(".k-window").css({
                    top: 121,
                    left: 300, height: 400, width: 900
                });
                dialog.title("Manual Match - Rule Based");
                dialog.bind("open", window_open);
                debugger
                $("#exportExcel1").show();
                var columns = [];
                var chkval = JSON.parse(Data1);
                var arr = [];
                $.each(chkval, function (i, e) {

                    $.each(e, function (key, val) {
                        arr.push(val);
                    });

                });
                if (arr == "No Records Found!" || arr == "Error in Data!") {
                    alert("No Records found..!");
                    return false;
                }
                var data = JSON.parse(Data1);
                var i = 0;
                var entryIndex = "entries[" + i + "]";
                for (var val in data[0]) {
                    if (val == "Collection Center Name") {
                        columns.push({
                            field: entryIndex,
                            title: key,
                            attributes: { style: "text-align: left;" }
                        });
                    }
                    else {
                        if (val != "Collection Center Name")
                            columns.push({
                                field: entryIndex,
                                title: val,
                            });
                    }
                    i = i + 1;
                    entryIndex = "entries[" + i + "]";
                }
                var rows = [];
                var data1 = JSON.parse(Data1);

                $.each(data1, function (i, e) {
                    var entryArray = [];
                    $.each(e, function (key, val) {

                        entryArray.push(val);
                    });
                    rows.push(kendo.observable({
                        entries: entryArray
                    }));

                });

                var viewModel = kendo.observable({
                    gridRows: rows
                });

                var configuration = {
                    //dataBound: onDataBound,
                    height: 330,
                    navigatable: true,
                    groupable: true,
                    editable: false,
                    sortable: true,
                    Scrollable: true,
                    filterable: false,
                    pagable: false,
                    resizable: false,
                    persistSelection: true,
                    selectable: "false",
                    columns: columns,
                    rows: viewModel,
                    excel: {
                        fileName: "Manual Match.xlsx",
                        filterable: true,
                        allPages: false
                    },
                };
                $("#example").remove();
                $('#Maingrid').append('<div id="example" style="position:relative" class="k-content"><table id="grid" data-bind="source: gridRows" style="position:relative;overflow:scroll;width:100%"></table></div>');
                var timeEditGrid = $("#grid").kendoGrid(configuration).data("kendoGrid");
                kendo.bind($("#grid"), viewModel);

                var grid = $("#grid").data("kendoGrid");
                for (var i = 0; i < grid.columns.length; i++) {
                    if (i != grid.columns.length) {
                        grid.autoFitColumn(i);  //autofit each column.
                    }
                }
            },
            error: function (result) {
                console.log(result);
            }
        });
    }
    $(".accordion_head").click(function () {

        if ($('.accordion_body').is(':visible')) {
            $(".accordion_body").slideUp(300);
            $(".plusminus").text('+');
        }
        if ($(this).next(".accordion_body").is(':visible')) {
            $(this).next(".accordion_body").slideUp(300);
            $(this).children(".plusminus").text('+');
            $("#Dynamic_grid").show();
        } else {
            $(this).next(".accordion_body").slideDown(300);
            $(this).children(".plusminus").text('-');
            $("#Dynamic_grid").hide();
        }

    });

    function generateXlsx() {
        var grid = $("#grid_tempfilter").data("kendoGrid");
        var objpplmapupdlist = [];
        var rpt_cond = "";
        var value = "";
        var open_braces = "";
        var close_braces = "";
        var joins = "";
        var joins1 = "";
        for (var i = 0; i < grid._data.length; i++) {
            value = "";
            open_braces = "";
            close_braces = "";
            joins = "";
            joins1 = "";
            if (i == 0) {
                joins1 = 'AND ';
            }
            if (i == grid._data.length - 1) {
                joins = " ";
            }
            else {
                if (grid._data[i].join_condition) {
                    joins = grid._data[i].join_condition + " ";
                } else {
                    joins = 'AND '
                }
            }
            // close braces assigning
            if ($('#chk_sel1_' + grid._data[i].reporttemplatefilter_gid).is(":checked")) {
                close_braces = " ) ";
            }
            // open braces assigning
            if ($('#chk_sel_' + grid._data[i].reporttemplatefilter_gid).is(":checked")) {
                open_braces = "(";
            }
            // Condition based value assigning
            if (grid._data[i].filter_criteria == "QCD_ISNOT_EQUAL_TO") {
                value = " != '" + grid._data[i].filter_value + "'";
            }
            else if (grid._data[i].filter_criteria == "QCD_ENDS_WITH") {
                value = " like '%" + grid._data[i].filter_value + "'";
            }
            else if (grid._data[i].filter_criteria == "QCD_BEGINS_WITH") {
                value = " like '" + grid._data[i].filter_value + "%'";
            }
            else if (grid._data[i].filter_criteria == "QCD_IS_EQUAL_TO") {
                value = " = '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_CONTAINS") {
                value = " like '%'" + grid._data[i].filter_value + "%'";
            } else if (grid._data[i].filter_criteria == "QCD_IS_GREATER_THAN") {
                value = " > '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_IS_LESS_THAN") {
                value = " < '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_LESSTHAN_EQUALTO") {
                value = " <= '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_GREATERTHAN_EQUALTO") {
                value = " >= '" + grid._data[i].filter_value + "'";
            } else if (grid._data[i].filter_criteria == "QCD_DOESNOT_CONTAINT") {
                value = " not like '%'" + grid._data[i].filter_value + "%'";
            }
            rpt_cond += joins1 + " " + open_braces + grid._data[i].report_field + value + " " + close_braces + joins;
        }
        var data = {
            "in_recon_code": $("#reconname").val(), "in_report_code": $("#cmbreporttype").val(), "in_report_param": $("#cmbreporttype").find(":selected").text(),
            "reportcondition": rpt_cond,
            "in_ip_addr": "localhost", "in_outputfile_flag": false, "in_user_code": "Hema"
        };
        if ($("#reconname").val() && $("#cmbreporttype").val() && rpt_cond) {
            window.location.href = '@Url.Action("generateReportXLSX", "Reports")?in_recon_code=' + data.in_recon_code + '&in_report_code=' + data.in_report_code + '&in_report_param=' + data.in_report_param + '&reportcondition=' + data.reportcondition + '&in_ip_addr=' + data.in_ip_addr + '&in_outputfile_flag=' + data.in_outputfile_flag + '&in_user_code=' + data.in_user_code + '';
            //$.ajax({
            //    type: "POST",
            //    url: '../Reports/generateReport',
            //    dataType: 'json',
            //    async: false,
            //    data: JSON.stringify(data),
            //    contentType: 'application/json; charset=utf-8',
            //    success: function (response) {
            //        alert("Success");
            //        //var res = JSON.parse(response);
            //        //if (res.length > 0) {
            //        //    var data = res[0];
            //        //    if (data.out_result != '0') {

            //        //    } else {
            //        //        $.alert({
            //        //            title: 'Recon',
            //        //            content: data.out_msg,
            //        //            type: 'red',
            //        //        });
            //        //    }
            //        //} else {
            //        //    $.alert({
            //        //        title: 'Recon',
            //        //        content: "Something Went Wrong ..!",
            //        //        type: 'red',
            //        //    });
            //        //}
            //    },
            //    error: function (er) {
            //        alert(er)
            //        console.log(er)
            //    }
            //});
        }
        else if (!$("#reconname").val()) {
            $.alert({
                title: 'Recon',
                content: "Please select Recon Name ..!",
                type: 'red',
            });
        } else if (!$("#cmbreporttype").val()) {
            $.alert({
                title: 'Recon',
                content: "Please select Report..!",
                type: 'red',
            });
        }
    }

</script>