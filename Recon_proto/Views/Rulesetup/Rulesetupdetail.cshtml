@{
	ViewBag.title = "Rule Setup";
	Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.editable-dropdown {
			position: relative;
		}

		.mb-3 {
			margin-bottom: 0.5rem !important;
		}

		.form-select1 {
			display: block;
			width: 75%;
			background-clip: padding-box;
			padding: 0.4375rem 1.875rem 0.4375rem 0.875rem;
			-moz-padding-start: calc(0.875rem - 3px);
			font-size: 0.7375rem;
			font-weight: 400;
			line-height: 1.53;
			color: #697a8d;
			background-color: #fff;
			background-image: url(data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16'%3e%3cpath fill='none' stroke='rgba%2867, 89, 113, 0.6%29' stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M2 5l6 6 6-6'/%3e%3c/svg%3e);
			background-repeat: no-repeat;
			background-position: right 0.875rem center;
			background-size: 17px 12px;
			border: 1px solid #d9dee3;
			border-radius: 0.375rem;
			transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
			-webkit-appearance: none;
			-moz-appearance: none;
			appearance: none;
		}

		#dropdown-list {
			list-style: none;
			display: none;
			position: absolute;
			top: 100%;
			left: 0;
			width: 100%;
			border: 1px solid #ccc;
			background-color: #fff;
			z-index: 1;
		}

			#dropdown-list li {
				padding: 5px;
				cursor: pointer;
			}

		#editable-input {
			width: 100%;
		}

		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid.k-widget {
			height: 360px;
		}


		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}

		.action-button {
			width: 120px;
			background: #673AB7;
			font-weight: bold;
			color: white;
			border: 0 none;
			border-radius: 0px;
			cursor: pointer;
			padding: 10px 5px;
			margin: 10px 0px 10px 5px;
			float: right;
			border-radius: 20px;
		}

		.action-button-previous {
			width: 100px;
			background: #616161;
			font-weight: bold;
			color: white;
			border: 0 none;
			border-radius: 0px;
			cursor: pointer;
			padding: 10px 5px;
			margin: 10px 5px 10px 0px;
			float: right;
			border-radius: 20px;
		}

		div.k-header.k-grid-toolbar {
			background-image: none, -webkit-linear-gradient(top, rgb(135, 46, 123) 0, rgb(135, 46, 123) 100%);
			color: white;
		}

		/*.k-link:link, .k-link:visited, .k-nav-current.k-state-hover .k-link {
											color: white !important;
										}*/

		.control-label.required:after {
			content: "*";
			color: red;
		}

		span.k-tooltip {
			white-space: pre-line;
		}

		span.k-tooltip {
			position: fixed;
			display: -webkit-box;
			border-width: 1px;
			padding: 2px 5px 1px 6px;
		}

		.tab-content {
			padding: 0.9rem;
			border-radius: 0.375rem;
		}

		.k-grid .k-grouping-header {
			height: 20px;
			font-size: 12px;
		}

		.k-grid .k-i-arrow-n, .k-grid .k-i-arrow-s {
			float: left;
		}

		.k-grid-header {
			background-color: #FEE7D5;
			color: black;
			font-size: 12px;
		}

			.k-grid-header th.k-header.k-filter-row th {
				text-align: center;
			}

		.k-grid td {
			padding: 0.3em 0.3em;
			font-size: 12px;
		}

		.k-grid .k-grouping-header {
			height: 20px;
			font-size: 12px;
		}

		.k-grouping-header .k-group-indicator, .k-pivot-toolbar .k-button {
			height: 20px !important;
		}

		.k-state-selected, .k-state-selected:link, .k-state-selected:visited, .k-list > .k-state-selected, .k-list > .k-state-highlight, .k-panel > .k-state-selected, .k-ghost-splitbar-vertical, .k-ghost-splitbar-horizontal, .k-draghandle.k-state-selected:hover, .k-scheduler .k-scheduler-toolbar .k-state-selected, .k-scheduler .k-today.k-state-selected, .k-marquee-color {
			border-color: #872E7B !important;
			color: #e74949 !important;
		}

		.k-grid-content > table > tbody > .k-alt {
			/*background: #E0E6F8;*/
			line-height: 1px;
		}

		.form-horizontal .control-label {
			text-align: left;
		}

		div.k-grid tbody .k-button {
			min-width: 0;
		}

		.form-horizontal .control-label {
			font-weight: 400;
		}

		.k-grid .k-autocomplete.k-state-default, .k-grid .k-picker-wrap.k-state-default, .k-grid .k-numeric-wrap.k-state-default {
			height: 18px;
		}

		/*.content-wrapper, .right-side {
											background-color: #e7e7e7;
										}*/

		.info-box-icon {
			background: white;
		}

		div.k-window-content {
			overflow-y: auto;
			overflow-x: hidden;
		}

		.info-label {
			display: inline-block;
			cursor: pointer;
			color: blue;
		}

		.info-content {
			display: none;
			position: absolute;
			background-color: #f9f9f9;
			border: 1px solid #ccc;
			padding: 10px;
			z-index: 1;
		}

		.info-label:hover .info-content,
		.info-label.active .info-content {
			display: block;
		}
	</style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
	<div class="content-wrapper">
		<div class="container-xxl flex-grow-1 container-p-y">
			<div class="card-body" style="margin-top:-12px;height: 84%;">
				<form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
					<div class="row" style="margin-top: -18px;margin-bottom: 10px;">
						<div class="col-sm-6">
							<div class="row">
								<div class="col-sm-4">
									<label for="organization" class="form-label">Rule Code</label>
									<input class="form-control" type="text" id="txtrulecode" value="" disabled>
								</div>
								<div class="col-sm-4">
									<label for="organization" class="form-label">Mode</label>
									<input class="form-control" type="text" id="txtmode" value="Create" disabled>
								</div>
								<div class="col-sm-4">
									<label for="organization" class="form-label">Status</label><br>
									<input class="form-control" type="text" id="txtstatus" value="Active" disabled>
								</div>
							</div>
						</div>
						<div class="col-sm-5">
						</div>
						<div class="col-sm-1" style="margin-top:20px;">
							<center>
								<a href="../Rulesetup/Rulesetup"><img style="cursor:pointer;" src="~/Content/images/toplist.png"></a>&nbsp;&nbsp;&nbsp;&nbsp;
							</center>
						</div>
					</div>
					<div class="box box-orange" style="height:auto">
						<div class="row" style="padding-bottom:5px;margin-top:5px;padding-right:5px">
							<div class="col-sm-3">
								<label for="" class="form-label">Rule Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<input class="form-control" id="ruleName" type="text">
								<input class="form-control" type="hidden" id="rulegid">
								<input class="form-control" type="hidden" id="recontype">
							</div>
							<div class="col-sm-3">
								<label for="" class="form-label">Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span>&nbsp;&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;" class="info-label" onclick="openInfoModel(this)" data-bs-toggle="modal"><img src='../images/info.png' style="width: 39%;"></span></label>
								<select id="cmbreconname" class="form-select form-control" disabled>
								</select>
							</div>
							<div class="col-md-2">
								<label for="" class="form-label">Period From&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<div>
									<input class="cusDate" data-role='datepicker' id="period_from" name="period_from" data-value="2022-12-21" onclick="Dateformat()" style="width:80%" />
									<span data-for='valid' class='k-invalid-msg'></span>
								</div>
							</div>
							<div class="col-sm-2" style="margin-left:-39px;">
								<label for="organization" class="form-label">
									<span>Period To</span>&nbsp;&nbsp;&nbsp;&nbsp;
									<input class="form-check-input" style="margin: 0px;" type="checkbox" value="false" name="untillactive" onclick="checkactive()" id="untillactive" />&nbsp;&nbsp;
									<span style="font-size:12px;">Until Active</span>
								</label>
								<div>
									<input class="cusDate" data-role='datepicker' id="period_to" onclick="Dateformat()" style="height:25px;width: 100%;" data-bind="" onkeypress="return date_validate(event)" /><span data-for='valid' class='k-invalid-msg'></span>
								</div>
							</div>
							<div class="col-md-1">
								<label for="" class="form-label">Rule Order&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<input class="form-control" id="ruleorder" type="number" value="0">
							</div>
							<div class="col-md-1" style="padding-left:0;margin-left: 15px;">
								<label for="" class="form-label">Probable Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<select id="probableflag" class="form-select form-control" style=" width:120%;">
								</select>
							</div>
						</div>
						<div class="row" style="margin-top:5px;padding-right:5px">
							<div class="col-sm-2">
								<label for="" class="form-label">Rule Applied On&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<select id="RuleAppliedOn" class="form-select form-control" style=" width: 80%;" onchange="RuleApplied()">
								</select>
							</div>
							<div class="col-sm-1" style="margin-left: -54px;">
								<label for="" class="form-label">Group Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<select id="cmbgroupflag" class="form-select form-control" style=" width: 177%;" onchange="groupflagchange()">
								</select>
							</div>
							<div class="col-sm-3" style="margin-left: 54px;margin-right: 28px;">
								<label id="sourceparentdataset" class="form-label">Source Dataset&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<select id="sourcedataset" class="form-select form-control" style=" width: 100%;" onchange="sourcefieldchange()">
								</select>
							</div>
							<div class="col-sm-2" style="margin-left:-27px;">
								<label id="" class="form-label">Source Account Mode&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<select id="souaccmode" class="form-select form-control" style=" width: 80%;" onchange="Sourcemodechange()">
								</select>
							</div>
							<div class="col-sm-2" style="margin-left:-39px;">
								<label id=comsupdataset class="form-label">Target Dataset</label>
								<select id="comdataset" class="form-select form-control" style=" width: 100%;">
								</select>
							</div>
							<div class="col-sm-2" style="margin-right: -38px;">
								<label id="lblcomaccmode" class="form-label">Target Account Mode</label>
								<select id="comaccmode" class="form-select form-control" style=" width: 120%;">
								</select>
							</div>
						</div>
						<div class="row">
							<div class="nav-align-top mb-3 mt-3">
								<ul class="nav nav-pills mb-2" role="tablist">
									<li class="nav-item">
										<button type="button" id="ruleCondition"
												class="nav-link active"
												role="tab"
												data-bs-toggle="tab"
												data-bs-target="#navs-pills-FiedConfig"
												aria-controls="navs-pills-FiedConfig"
												aria-selected="true">
											Rule Condition
										</button>
									</li>
									<li class="nav-item">
										<button type="button" id="sourceidentifier"
												class="nav-link"
												role="tab"
												data-bs-toggle="tab"
												data-bs-target="#navs-pills-top-sourceidentifier"
												aria-controls="navs-pills-top-sourceidentifier"
												aria-selected="true">
											Source Identifier
										</button>
									</li>
									<li class="nav-item">
										<button type="button" id="comparisionidentifier"
												class="nav-link"
												role="tab"
												data-bs-toggle="tab"
												data-bs-target="#navs-pills-top-comparisionidentifier"
												aria-controls="navs-pills-top-comparisionidentifier"
												aria-selected="true">
											Target Identifier
										</button>
									</li>
									<li class="nav-item">
										<button type="button" id="grouping"
												class="nav-link"
												role="tab"
												data-bs-toggle="tab"
												data-bs-target="#navs-pills-top-grouping"
												aria-controls="navs-pills-top-grouping"
												aria-selected="false">
											Additional Grouping
											@*Grouping*@
										</button>
									</li>
									<li class="nav-item">
										<button type="button" id="sourceorder"
												class="nav-link"
												role="tab"
												data-bs-toggle="tab"
												data-bs-target="#navs-pills-top-sourceorder"
												aria-controls="navs-pills-top-sourceorder"
												aria-selected="true">
											Source Processing Order
										</button>
									</li>
									<li class="nav-item">
										<button type="button" id="Comparisonorder"
												class="nav-link"
												role="tab"
												data-bs-toggle="tab"
												data-bs-target="#navs-pills-top-comparisonorder"
												aria-controls="navs-pills-top-comparisonorder"
												aria-selected="true">
											Target Processing Order
										</button>
									</li>
								</ul>
								<div class="tab-content">
									<div class="tab-pane fade show active" id="navs-pills-FiedConfig" role="tabpanel" style="margin-top:-13px;">
										<div class="panel panel-default">
											<div class="panel-body">
												<div class="row" style="padding-bottom:3px;padding-right:5px;padding-top:10px;">
													@*<i data-bs-toggle="modal" onclick='getrulecondition(this)' value='create' class="fa fa-plus cursor-pointer" aria-hidden="true" style="color:green"></i>*@
													<div class="col-xs-12">
														<div id="gd_rulecondition">
															<div id="grid_rulecondition">
															</div>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="tab-pane fade" id="navs-pills-top-sourceidentifier" role="tabpanel" style="margin-top:-13px;">
										<div class="panel panel-default">
											<div class="panel-body">
												<div class="row" style="padding-bottom:3px;padding-right:5px;padding-top:10px;">
													@*<i data-bs-toggle="modal" onclick='getidentifier(this)' value='create' class="fa fa-plus cursor-pointer" aria-hidden="true" style="color:green"></i>*@
													<div class="col-xs-12">
														<div id="gd_sourceidentifier">
															<div id="grid_sourceidentifier">
															</div>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="tab-pane fade" id="navs-pills-top-comparisionidentifier" role="tabpanel" style="margin-top:-13px;">
										<div class="panel panel-default">
											<div class="panel-body">
												<div class="row" style="padding-bottom:3px;padding-right:5px;padding-top:10px;">
													@*<i data-bs-toggle="modal" onclick='getidentifier(this)' value='create' class="fa fa-plus cursor-pointer" aria-hidden="true" style="color:green"></i>*@
													<div class="col-xs-12">
														<div id="gd_comparisionidentifier">
															<div id="grid_comparisionidentifier">
															</div>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="tab-pane fade" id="navs-pills-top-grouping" role="tabpanel" style="margin-top:-13px;">
										<div class="panel panel-default">
											<div class="row" style="padding-bottom:3px;padding-right:5px;padding-top:10px;">
												<div class="col-xs-12">
													<div id="gd_grouping">
														<div id="grid_grouping">
														</div>
													</div>
												</div>
											</div>
										</div>

									</div>
									<div class="tab-pane fade" id="navs-pills-top-sourceorder" role="tabpanel" style="margin-top:-13px;">
										<div class="panel panel-default">
											<div class="panel-body">
												<div class="row" style="padding-bottom:3px;padding-right:5px;padding-top:10px;">
													@*<i data-bs-toggle="modal" onclick='getidentifier(this)' value='create' class="fa fa-plus cursor-pointer" aria-hidden="true" style="color:green"></i>*@
													<div class="col-xs-12">
														<div id="gd_sourceorder">
															<div id="grid_sourceorder">
															</div>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
									<div class="tab-pane fade" id="navs-pills-top-comparisonorder" role="tabpanel" style="margin-top:-13px;">
										<div class="panel panel-default">
											<div class="panel-body">
												<div class="row" style="padding-bottom:3px;padding-right:5px;padding-top:10px;">
													@*<i data-bs-toggle="modal" onclick='getidentifier(this)' value='create' class="fa fa-plus cursor-pointer" aria-hidden="true" style="color:green"></i>*@
													<div class="col-xs-12">
														<div id="gd_comparisonorder">
															<div id="grid_comparisonorder">
															</div>
														</div>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
							<div class="row" style="padding-bottom:3px;padding-left:5px;padding-right:5px">
								<div class="col-sm-4"></div>
								<div class="col-sm-4" style="text-align:center">
									<button type="button" class="btn btn-sm save_btn me-2" id="btnsubmit" onclick="saveheadersubmit()">Submit</button>&nbsp;&nbsp;&nbsp;
									<a href="../Rulesetup/Rulesetup" class="btn btn-sm cancel_btn me-2">Cancel</a>
								</div>
								<div class="col-sm-4"></div>
							</div>
							<div class="modal fade" id="infomodal" tabindex="-1" aria-hidden="true">
								<div class="modal-dialog modal-lg" role="document">
									<div class="modal-content">
										<div class="modal-header">
										</div>
										<div class="modal-body" style="margin-top: -26px;">
											<div class="row">
												<div class="col-sm-4">
												</div>
												<div class="col-sm-4">
													<h4 style="font-size: 15px;text-align: center;color: #1a9950;font-weight: 600;">Info</h4>
												</div>
												<div class="col-sm-4">
													<i class="bx bx-x cursor-pointer" data-bs-dismiss="modal" style="color: #000000;float:right"></i>
												</div>
											</div>
											<hr style="margin-top:-1px; width:100%;">
											<div class="container">
												<div class="row">
													<div class="col-sm-4">
														<label class="form-label">Recon Name&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="recon_name"></span>
													</div>
													<div class="col-sm-4">
														<label class="form-label">Recon Type&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="recon_type"></span>
													</div>
													<div class="col-sm-4">
														<label class="form-label">Period From&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="rperiod_from"></span>
													</div>

												</div>
												<div class="row">
													<div class="col-sm-4">
														<label class="form-label">Period To&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="rperiod_to"></span>
													</div>
													<div class="col-sm-4">
														<label class="form-label">Partial Match&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="partial_match"></span>
													</div>
													<div class="col-sm-4">
														<label class="form-label">Threshold + Value&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="thersholdplus"></span>
													</div>

												</div>
												<div class="row">
													<div class="col-sm-4">
														<label class="form-label">Threshold - Value&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="thersholdminus"></span>
													</div>
													<div class="col-sm-4">
														<label class="form-label">Recon Date Flag&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="recondateflag"></span>
													</div>
													<div class="col-sm-4">
														<label class="form-label">Recon Date Field&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="cmbrecondatefield"></span>
													</div>

												</div>
												<div class="row">
													<div class="col-sm-4">
														<label class="form-label">Recon Value Flag&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="reconvalueflag"></span>
													</div>
													<div class="col-sm-4">
														<label class="form-label">Recon Value Field&nbsp;&nbsp;:&nbsp;&nbsp</label><span style="font-size:13px" id="cmbreconvaluefield"></span>
													</div>
												</div>
											</div>
										</div>
									</div>
								</div>
							</div>
						</div>
					</div>
				</form>
			</div>
		</div>
	</div>
</body>
</html>
<script type="text/javascript">
	$(document).ready(function () {
		$("#navhead").text("Rule Setup");
		kendodate_format();
		getGridComboList();
		cmbsourcefield();

	});
	function load() {
		if (getlocalStorage('btn_clk_val') == "Create") {
			$("#txtmode").val(getlocalStorage('btn_clk_val'));
			$("#txtstatus").val("Active");
			$("#groupflag2").prop("checked", true);
			$("#Reversal3").prop("checked", true);
			$("#GM1").prop("checked", true);
			$("#GMM2").prop("checked", true);
			var data = getlocalStorage("ls_pageList");
			$("#cmbreconname").val(data);
			var reconcode = $("#cmbreconname").val();
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulereconfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var res = JSON.parse(response);
					document.getElementById('recon_name').innerHTML = res[0].recon_name;
					document.getElementById('recon_type').innerHTML = res[0].recontype_desc;
					document.getElementById('rperiod_from').innerHTML = res[0].period_from;
					document.getElementById('rperiod_to').innerHTML = res[0].period_to;
					document.getElementById('thersholdplus').innerHTML = res[0].threshold_plus_value;
					document.getElementById('thersholdminus').innerHTML = res[0].threshold_minus_value;
					document.getElementById('recondateflag').innerHTML = res[0].recon_date_flag;
					document.getElementById('cmbrecondatefield').innerHTML = res[0].recon_date_field;
					document.getElementById('reconvalueflag').innerHTML = res[0].recon_value_flag;
					document.getElementById('cmbreconvaluefield').innerHTML = res[0].recon_value_field;
					document.getElementById('partial_match').innerHTML = res[0].recon_automatch_partial;

					$("#recontype").val(res[0].recontype_code);
					recontypecondition();
				}
			});
			//dataset combo
			var reconcode = $("#cmbreconname").val();
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulerecondatasetfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var res = JSON.parse(response);
					$("#sourcedataset").empty();
					$("#sourcedataset").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						if (item.dataset_type != "S") {
							$("#sourcedataset").append($('<option>', {
								value: item.dataset_code,
								text: item.dataset_name
							}));
						}
					});
					$("#comdataset").empty();
					$("#comdataset").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						if (item.dataset_type != "S") {
							$("#comdataset").append($('<option>', {
								value: item.dataset_code,
								text: item.dataset_name
							}));
						}
					});
				}
			});
			$("#txtstatus").val("Draft");
			grid_rulecondition([]);
			grid_grouping([]);
			grid_sourceidentifier([]);
			grid_comparisionidentifier([]);
			grid_sourceorder([]);
			grid_comparisonorder([]);
		}
		else if (getlocalStorage('btn_clk_val') == "View" || getlocalStorage('btn_clk_val') == "Edit") {
			if (getlocalStorage("ls_pageList") != undefined) {
				var data = getlocalStorage("ls_pageList");
				var cat = data.dataset_category;
				$("#txtmode").val(getlocalStorage('btn_clk_val'));
				$("#txtrulecode").val(data.rule_code);
				$("#ruleName").val(data.rule_name);
				$("#cmbreconname").val(data.recon_code);
				jQuery('#cmbreconname').trigger("change");
				var reconcode = $("#cmbreconname").val();
				$.ajax({
					type: "POST",
					url: '../Rulesetup/rulereconfetch',
					dataType: 'json',
					async: false,
					data: JSON.stringify({ in_recon_code: reconcode }),
					contentType: 'application/json; charset=utf-8',
					success: function (response) {
						var res = JSON.parse(response);
						document.getElementById('recon_name').innerHTML = res[0].recon_name;
						document.getElementById('recon_type').innerHTML = res[0].recontype_desc;
						document.getElementById('rperiod_from').innerHTML = res[0].period_from;
						document.getElementById('rperiod_to').innerHTML = res[0].period_to;
						document.getElementById('thersholdplus').innerHTML = res[0].threshold_plus_value;
						document.getElementById('thersholdminus').innerHTML = res[0].threshold_minus_value;
						document.getElementById('recondateflag').innerHTML = res[0].recon_date_flag;
						document.getElementById('cmbrecondatefield').innerHTML = res[0].recon_date_field;
						document.getElementById('reconvalueflag').innerHTML = res[0].recon_value_flag;
						document.getElementById('cmbreconvaluefield').innerHTML = res[0].recon_value_field;
						document.getElementById('partial_match').innerHTML = res[0].recon_automatch_partial;

						$("#recontype").val(res[0].recontype_code);
						recontypecondition();
					}
				});
				//dataset combo
				var reconcode = $("#cmbreconname").val();
				$.ajax({
					type: "POST",
					url: '../Rulesetup/rulerecondatasetfetch',
					dataType: 'json',
					async: false,
					data: JSON.stringify({ in_recon_code: reconcode }),
					contentType: 'application/json; charset=utf-8',
					success: function (response) {
						var res = JSON.parse(response);
						$("#sourcedataset").empty();
						$("#sourcedataset").append($('<option>', {
							value: "",
							text: "  Select  "
						}));
						$.each(res, function (index, item) {
							if (item.dataset_type != "S") {
								$("#sourcedataset").append($('<option>', {
									value: item.dataset_code,
									text: item.dataset_name
								}));
							}
						});
						$("#comdataset").empty();
						$("#comdataset").append($('<option>', {
							value: "",
							text: "  Select  "
						}));
						$.each(res, function (index, item) {
							if (item.dataset_type != "S") {
								$("#comdataset").append($('<option>', {
									value: item.dataset_code,
									text: item.dataset_name
								}));
							}
						});
					}
				});
				$("#txtstatus").val(data.active_status_desc);
				$("#rulegid").val(data.rule_gid);
				$.ajax({
					type: "POST",
					url: '../Rulesetup/rulefetch',
					dataType: 'json',
					async: false,
					data: JSON.stringify({ in_rule_gid: data.rule_gid }),
					contentType: 'application/json; charset=utf-8',
					success: function (response) {
						if (response != null) {
							var res = JSON.parse(response);
							$("#RuleAppliedOn").val(res.RuleHeader[0].rule_apply_on);
							$("#sourcedataset").val(res.RuleHeader[0].source_dataset_code);
							RuleApplied();
							$("#comdataset").val(res.RuleHeader[0].comparison_dataset_code);
							$("#souaccmode").val(res.RuleHeader[0].source_acc_mode);
							$("#comaccmode").val(res.RuleHeader[0].comparison_acc_mode);
							$("#cmbgroupflag").val(res.RuleHeader[0].group_flag);
							$("#ruleorder").val(res.RuleHeader[0].ruleorder);
							$("#period_from").val(res.RuleHeader[0].period_from);
							$("#period_to").val(res.RuleHeader[0].period_to);
							$("#probableflag").val(res.RuleHeader[0].probable_match_flag);
							if (res.RuleHeader[0].until_active_flag == "Y") {
								$('#untillactive').attr('checked', true);
							}
							if (res.RuleCondition.length > 0) {
								$("#gd_rulecondition").empty();
								$("#gd_rulecondition").append("<div id='grid_rulecondition'></div>");
								grid_rulecondition(res.RuleCondition);
							}
							else {
								grid_rulecondition([]);
							}
							if (res.RuleGrouping.length > 0) {
								$("#gd_grouping").empty();
								$("#gd_grouping").append("<div id='grid_grouping'></div>");
								grid_grouping(res.RuleGrouping);
							}
							else {
								grid_grouping([]);
							}
							if (res.sourceidentifier.length > 0) {
								$("#gd_sourceidentifier").empty();
								$("#gd_sourceidentifier").append("<div id='grid_sourceidentifier'></div>");
								grid_sourceidentifier(res.sourceidentifier);
							}
							else {
								grid_sourceidentifier([]);
							}
							if (res.comparisionidentifier.length > 0) {
								$("#gd_comparisionidentifier").empty();
								$("#gd_comparisionidentifier").append("<div id='grid_comparisionidentifier'></div>");
								grid_comparisionidentifier(res.comparisionidentifier);
							}
							else {
								grid_comparisionidentifier([]);
							}
							if (res.RulefieldorderSource.length > 0) {
								$("#gd_sourceorder").empty();
								$("#gd_sourceorder").append("<div id='grid_sourceorder'></div>");
								grid_sourceorder(res.RulefieldorderSource);
							} else {
								grid_sourceorder([]);
							}
							if (res.Rulefieldordercomparison.length > 0) {
								$("#gd_comparisonorder").empty();
								$("#gd_comparisonorder").append("<div id='grid_comparisonorder'></div>");
								grid_comparisonorder(res.Rulefieldordercomparison);
							} else {
								grid_comparisonorder([]);
							}
						}
						else {

						}
					},
					error: function (er) {
						console.log(er)
					}

				});
			}
		}
		if ($("#txtmode").val() == "View") {
			$("#ruleName").prop('disabled', true);
			$("#cmbreconname").prop('disabled', true);
			$("#ruleorder").prop('disabled', true);
			$("#period_from").prop('disabled', true);
			$("#period_to").prop('disabled', true);
			$('#untillactive').prop('disabled', true);
			$('#RuleAppliedOn').prop('disabled', true);
			$('#cmbgroupflag').prop('disabled', true);
			$('#sourcedataset').prop('disabled', true);
			$('#souaccmode').prop('disabled', true);
			$('#comdataset').prop('disabled', true);
			$('#comaccmode').prop('disabled', true);
			$("#btn_new_dataset").hide();
			$("#btn_new_datasetmap").hide();
			$("#btnsubmit").hide();
		}
	}
	function RuleApplied() {
		if ($("#RuleAppliedOn").val() == 'T') {
			$("#lblcomaccmode").text("Target Account mode").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");
			$("#comsupdataset").text("Target Dataset").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");

		} else if ($("#RuleAppliedOn").val() == 'S') {
			$("#comsupdataset").text("Supporting Dataset").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");
			$("#lblcomaccmode").text("Supporting Account mode").append("&nbsp;<span style='font - size: 12px; color: red; font - weight: bold; '>*</span>");
			//dataset combo
			var reconcode = $("#cmbreconname").val();
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulerecondatasetfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var res = JSON.parse(response);
					var sodata = $("#sourcedataset").val();
					$("#comdataset").empty();
					$("#comdataset").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						if (item.dataset_type == "S") {
							$("#comdataset").append($('<option>', {
								value: item.dataset_code,
								text: item.dataset_name
							}));
						}
					});
				}
			});
		}
	}
	function groupflagchange() {
		$("#souaccmode").val("");
		$("#comaccmode").val("");
	}
	function recontypecondition() {
		var recontype = $("#recontype").val();
		if (recontype == "W" || recontype == 'B' || recontype == 'I') {
			// Source account mode
			var in_master_code = "QCD_RS_ACC_MODE";
			var in_user_code = "";
			$.ajax({
				type: "POST",
				url: '../Common/Qcdmaster',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					$("#souaccmode").empty();
					$("#souaccmode").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(response, function (index, item) {
						if (item.masterShortCode == "S") {
							$("#souaccmode").append($('<option>', {
								value: item.masterSyscode,
								text: item.masterName
							}));
						}
					});
					$("#comaccmode").empty();
					$("#comaccmode").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(response, function (index, item) {
						if (item.masterSyscode != "NA") {
							$("#comaccmode").append($('<option>', {
								value: item.masterSyscode,
								text: item.masterName
							}));
						}
					});
				}
			});
		} else {
			var in_master_code = "QCD_RS_ACC_MODE";
			var in_user_code = "";
			$.ajax({
				type: "POST",
				url: '../Common/Qcdmaster',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					$("#souaccmode").empty();
					$("#souaccmode").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(response, function (index, item) {
						if (item.masterSyscode == "NA") {
							$("#souaccmode").append($('<option>', {
								value: item.masterSyscode,
								text: item.masterName
							}));
						}
					});
					$("#comaccmode").empty();
					$("#comaccmode").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(response, function (index, item) {
						if (item.masterSyscode == "NA") {
							$("#comaccmode").append($('<option>', {
								value: item.masterSyscode,
								text: item.masterName
							}));
						}
					});
				}
			});
		}
	}
	function Sourcemodechange() {
		var groupflag = $("#cmbgroupflag").val();
		var sourceAccmode = $("#souaccmode").val();
		var ruleappliedon = $("#RuleAppliedOn").val();
		var in_master_code = "QCD_RS_ACC_MODE";
		var in_user_code = "";
		var response = [];
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (data) {
				response = data;
			}
		});
		//-----Transaction-----
		if (groupflag == "OTO" && sourceAccmode == "D" && ruleappliedon == "T") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			$.each(response, function (index, item) {
				if (item.masterSyscode == "C") {
					$("#comaccmode").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				}
			});
			$("#comaccmode").val("C")
		} else if (groupflag != "OTO" && sourceAccmode == "D" && ruleappliedon == "T") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			var arr = [];
			for (i = 0; i < response.length; i++) {
				var syscode = response[i].masterCode;
				if (syscode != "NA") {
					var list = {};
					list.code = response[i].masterCode;
					list.desc = response[i].masterName;
					arr.push(list);
				}
			}
			$.each(arr, function (index, item) {
				if (item.code != "D") {
					$("#comaccmode").append($('<option>', {
						value: item.code,
						text: item.desc
					}));
				}
			});
		}
		if (groupflag == "OTO" && sourceAccmode == "C" && ruleappliedon == "T") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			$.each(response, function (index, item) {
				if (item.masterSyscode == "D") {
					$("#comaccmode").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				}
			});
			$("#comaccmode").val("D")
		} else if (groupflag != "OTO" && sourceAccmode == "C" && ruleappliedon == "T") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			var arr = [];
			for (i = 0; i < response.length; i++) {
				var syscode = response[i].masterCode;
				if (syscode != "NA") {
					var list = {};
					list.code = response[i].masterCode;
					list.desc = response[i].masterName;
					arr.push(list);
				}
			}

			$.each(arr, function (index, item) {
				if (item.code != "C") {
					$("#comaccmode").append($('<option>', {
						value: item.code,
						text: item.desc
					}));
				}
			});
		}
		//----tranction----
		//----Support----

		if (groupflag == "OTO" && sourceAccmode == "D" && ruleappliedon == "S") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			$.each(response, function (index, item) {
				if (item.masterSyscode == "D") {
					$("#comaccmode").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				}
			});
			$("#comaccmode").val("D")
		} else if (groupflag != "OTO" && sourceAccmode == "D" && ruleappliedon == "S") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			var arr = [];
			for (i = 0; i < response.length; i++) {
				var syscode = response[i].masterCode;
				if (syscode != "NA") {
					var list = {};
					list.code = response[i].masterCode;
					list.desc = response[i].masterName;
					arr.push(list);
				}
			}
			$.each(arr, function (index, item) {
				if (item.code != "C") {
					$("#comaccmode").append($('<option>', {
						value: item.code,
						text: item.desc
					}));
				}
			});
		}
		if (groupflag == "OTO" && sourceAccmode == "C" && ruleappliedon == "S") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			$.each(response, function (index, item) {
				if (item.masterSyscode == "C") {
					$("#comaccmode").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				}
			});
			$("#comaccmode").val("C")
		} else if (groupflag != "OTO" && sourceAccmode == "C" && ruleappliedon == "S") {
			$("#comaccmode").empty();
			$("#comaccmode").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			var arr = [];
			for (i = 0; i < response.length; i++) {
				var syscode = response[i].masterCode;
				if (syscode != "NA") {
					var list = {};
					list.code = response[i].masterCode;
					list.desc = response[i].masterName;
					arr.push(list);
				}
			}

			$.each(arr, function (index, item) {
				if (item.code != "D") {
					$("#comaccmode").append($('<option>', {
						value: item.code,
						text: item.desc
					}));
				}
			});
		}
	}
	function checkactive() {
		debugger;
		if ($("input:checkbox[id='untillactive']").is(":checked") == true) {
			$("#period_to").val('');
			//$("#period_to").removeAttr('disabled', true);
			$("#period_to").prop("disabled", true);
			$('#period_to').unbind('click');
		}
		else {

			$("#period_to").removeAttr('disabled', false);
		}
	}
	function getfetch(rulecode, screen) {
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefetch',
			dataType: 'json',
			data: JSON.stringify({ in_rule_gid: rulecode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					if (screen == "Header") {
						$("#RuleAppliedOn").val(res.RuleHeader[0].rule_apply_on);
						$("#sourcedataset").val(res.RuleHeader[0].source_dataset_code);
						$("#comdataset").val(res.RuleHeader[0].comparison_dataset_code);
						$("#souaccmode").val(res.RuleHeader[0].source_acc_mode);
						$("#comaccmode").val(res.RuleHeader[0].comparison_acc_mode);
						$("#cmbgroupflag").val(res.RuleHeader[0].group_flag);
						$("#ruleorder").val(res.RuleHeader[0].ruleorder);
						$("#txtrulecode").val(res.RuleHeader[0].rule_code);
						$("#ruleName").val(res.RuleHeader[0].rule_name);
						$("#cmbreconname").val(res.RuleHeader[0].recon_code);
						jQuery('#cmbreconname').trigger("change");
						$("#txtstatus").val(res.RuleHeader[0].active_status_desc);
						$("#rulegid").val(res.RuleHeader[0].rule_gid);
						$("#period_from").val(res.RuleHeader[0].period_from);
						$("#period_to").val(res.RuleHeader[0].period_to);
						if (res.RuleHeader[0].until_active_flag == "Y") {
							$('#untillactive').attr('checked', true);
						}
					} else if (screen == "rulecond") {
						if (res.RuleCondition.length > 0) {
							$("#gd_rulecondition").empty();
							$("#gd_rulecondition").append("<div id='grid_rulecondition'></div>");
							grid_rulecondition(res.RuleCondition);
						} else {
							grid_rulecondition([]);
						}
					} else if (screen == "group") {
						if (res.RuleGrouping.length > 0) {
							$("#gd_grouping").empty();
							$("#gd_grouping").append("<div id='grid_grouping'></div>");
							grid_grouping(res.RuleGrouping);

						} else {
							grid_grouping([]);
						}
					} else if (screen == "idents") {
						if (res.sourceidentifier.length > 0) {
							$("#gd_sourceidentifier").empty();
							$("#gd_sourceidentifier").append("<div id='grid_sourceidentifier'></div>");
							grid_sourceidentifier(res.sourceidentifier);
						} else {
							grid_sourceidentifier([]);
						}
					} else if (screen == "identc") {
						if (res.comparisionidentifier.length > 0) {
							$("#gd_comparisionidentifier").empty();
							$("#gd_comparisionidentifier").append("<div id='grid_comparisionidentifier'></div>");
							grid_comparisionidentifier(res.comparisionidentifier);
						}
						else {
							grid_comparisionidentifier([]);
						}
					} else if (screen == "orders") {
						if (res.RulefieldorderSource.length > 0) {
							$("#gd_sourceorder").empty();
							$("#gd_sourceorder").append("<div id='grid_sourceorder'></div>");
							grid_sourceorder(res.RulefieldorderSource);
						} else {
							grid_sourceorder([]);
						}
					} else if (screen == "orderc") {
						if (res.Rulefieldordercomparison.length > 0) {
							$("#gd_comparisonorder").empty();
							$("#gd_comparisonorder").append("<div id='grid_comparisonorder'></div>");
							grid_comparisonorder(res.Rulefieldordercomparison);
						} else {
							grid_comparisonorder([]);
						}
					}
				}
				else {

				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	function getGridComboList() {
		// Dataset type
		var in_master_code = "QCD_RS_RULE_APPLLIED";
		var in_user_code = "";
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#RuleAppliedOn").empty();
				$.each(response, function (index, item) {
					$("#RuleAppliedOn").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});
		// probableflag flag
		var in_master_code = "QCD_YN";
		var in_user_code = "";
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#probableflag").empty();
				$("#probableflag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#probableflag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});

		// group flag
		var in_master_code = "QCD_RULE_GRP";
		var in_user_code = "";
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#cmbgroupflag").empty();
				$("#cmbgroupflag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#cmbgroupflag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
			}
		});

		//recon name
		var data = {};
		var txtusername = JSON.parse(localStorage.getItem("recon_userdetail"));
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = txtusername.user_name;
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbreconname").empty();
				$("#cmbreconname").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					$("#cmbreconname").append($('<option>', {
						value: item.recon_code,
						text: item.recon_name
					}));
				});
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		load();

		//sorce dataset
		var reconcode = $("#cmbreconname").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					$("#cmbsourcefield").empty();
					$("#cmbsourcefield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#cmbsourcefield").append($('<option>', {
							value: item.recon_field_desc,
							text: item.recon_field_name
						}).data('code', item.recon_field_type));
					});
					$("#cmbcomparisionfield").empty();
					$("#cmbcomparisionfield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#cmbcomparisionfield").append($('<option>', {
							value: item.recon_field_desc,
							text: item.recon_field_name
						}).data('code', item.recon_field_type));
					});
				}
				else {
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	function saveheader() {
		try {
			var in_rule_code = $("#txtrulecode").val();
			var ruleName = $("#ruleName").val();
			var cmbreconname = $("#cmbreconname").val();
			var period_from = $("#period_from").val();
			var ts = period_from.split("/");
			var pr = ts[2] + "-" + ts[1] + "-" + ts[0];
			var in_until_active_flag = "";
			if ($('#untillactive').is(":checked")) {
				in_until_active_flag = "Y"
				var pr1 = "1901-01-01";
			} else {
				in_until_active_flag = "N"
				var period_to = $("#period_to").val();
				var ts1 = period_to.split("/");
				var pr1 = ts1[2] + "-" + ts1[1] + "-" + ts1[0];
			}
			var in_source_dataset_code = "";
			var in_comparison_dataset_code = "";
			var in_source_acc_mode = "";
			var in_parent_dataset_code = "";
			var in_parent_acc_mode = "";
			var in_comparison_acc_mode = "";
			var in_applyrule_on = $("#RuleAppliedOn").val();
			if (in_applyrule_on == 'T') {
				in_source_dataset_code = $("#sourcedataset").val();
				in_comparison_dataset_code = $("#comdataset").val();
				in_source_acc_mode = $("#souaccmode").val();
				in_comparison_acc_mode = $("#comaccmode").val();
			} else {
				in_source_dataset_code = $("#sourcedataset").val();
				in_source_acc_mode = $("#souaccmode").val();
				in_parent_dataset_code = $("#comdataset").val();
				in_parent_acc_mode = $("#comaccmode").val();
			}
			var action = "";
			if ($("#txtmode").val() == "Create") {
				action = "INSERT"
			} else if ($("#txtmode").val() == "Edit") {
				action = "UPDATE"
			}
			var action_by = ""
			var rulegid = $("#rulegid").val();
			if (rulegid == "") {
				rulegid = 0;
			} else {
				addRowrule();
				return
			}
			var in_rule_order = parseFloat($("#ruleorder").val()).toFixed(2);
			var status = "D";
			var Groupflag = $("#cmbgroupflag").val();
			var in_inactive_reason = "";
			var probableflag = $("#probableflag").val();
			$.ajax({
				type: "POST",
				url: '../Rulesetup/Ruleheader',
				dataType: 'json',
				data: JSON.stringify({
					in_rule_gid: rulegid, in_rule_code: in_rule_code, in_rule_name: ruleName, in_recon_code: cmbreconname, in_period_from: pr,
					in_period_to: pr1, in_until_active_flag: in_until_active_flag, in_applyrule_on: in_applyrule_on, in_rule_order: in_rule_order,
					in_source_dataset_code: in_source_dataset_code, in_comparison_dataset_code: in_comparison_dataset_code, in_source_acc_mode: in_source_acc_mode, in_comparison_acc_mode: in_comparison_acc_mode,
					in_parent_dataset_code: in_parent_dataset_code, in_parent_acc_mode: in_parent_acc_mode, probableflag: probableflag,
					in_group_flag: Groupflag, in_action: action, in_action_by: action_by, in_active_status: status, in_inactive_reason: in_inactive_reason
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						if (response.out_result == '1') {
							$("#rulegid").val(response.in_rule_gid);
							getfetch(response.in_rule_gid, "Header");
							addRowrule();
						} else {
							$.alert({
								title: 'Recon',
								content: response.out_msg,
								type: 'green',
							});
						}
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		}
		catch (e) {
			console.log(e)
		}
	}
	//-----------------------------------------------------          Rule condition ----------------------------------------------------------------
	function grid_rulecondition(data) {
		var source_field_desc_list = "";
		var extraction_criteria_list = "";
		var comparison_criteria_list = "";
		$("#grid_rulecondition").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "rulecondition_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							rulecondition_gid: { type: "string", defaultValue: "0" },
							rulecondition_seqno: { type: "NUMBER", defaultValue: 0 },
							rule_code: { type: "string" },
							source_field_code: { type: "string", defaultValue: "" },
							source_field_desc: { type: "string", defaultValue: "" },
							comparison_field: { type: "string", defaultValue: "" },
							comparison_field_desc: { type: "string" },
							extraction_criteria: { type: "string" },
							extraction_criteria_code: { type: "string" },
							comparison_criteria: { type: "string" },
							comparison_criteria_code: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
							join_condition: { type: "string" },
						}
					}
				}
			},
			height: 185,
			groupable: false,
			//dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_rulecondition').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: "row",
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a href='javascript:void(0)' onclick='saveheader()' > <span class='fa fa-plus' style = 'color:white' > </span></a> ",
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='saverulecondition()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:28%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					//{
					//	name: "edit",
					//	id: "Edit",
					//	template: "<a href=''class='k-grid-edit'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
					//},
					{
						name: "Delete",
						id: "Delete",
						template: "<a href='' onclick='myDeleteJsrulecondition()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "rulecondition_seqno",
				title: "Seq No.",
				width: 40,
				attributes: { style: "text-align: right;" },			
			},
			{
				field: "open_parentheses_flag",
				title: "(", width: 20,
				//template: '#=sel_checkbox(data)#'
				template: function (dataItem) {
					if (dataItem.rulecondition_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
					} else {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
					}
				}
			},
			{
				field: "rulecondition_gid",
				title: "rulecondition_gid",
				hidden: true,
			},
			{
				field: "source_field_code",
				title: "Source Field",
				width: 100,
				hidden: true,
			},
			{
				field: "source_field_desc",
				title: "Source Field",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_rulecondition")
				},
				width: 120,
			},
			{
				field: "extraction_criteria_code",
				title: "Extraction criteria",
				hidden: true,
			},
			{
				field: "extraction_criteria",
				title: "Extraction criteria",
				editor: function (container, options) {
					combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_rulecondition", "SOURCE")
				},
				editable: true,
				width: 170,
			},
			{
				field: "comparison_field",
				title: "comparison_field",
				width: 100,
				hidden: true,
			},
			{
				field: "comparison_field_desc",
				title: "Comparison Field",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_rulecondition")
				},
				width: 120,
			},
			{
				field: "comparison_criteria_code",
				title: "comparison_criteria_code",
				hidden: true,
			},
			{
				field: "comparison_criteria",
				title: "Comparison criteria",
				editor: function (container, options) {
					combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_rulecondition", "COMPARISON")
				},
				width: 170,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			},
			{
				field: "close_parentheses_flag",
				title: ")", width: 20,
				//template: '#=sel_checkbox1(data)#'
				template: function (dataItem) {
					if (dataItem.rulecondition_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
					} else {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
					}
				},
			},

			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_rulecondition")
				},
				width: 40,
			}],
			editable: true,
		});
		source_field_desc_list = cmbsourcefield();
		comparison_field_desc_list = cmbsourcefield();
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
	}

	function OnEdit(e) {
		try {
			setDefaultValues(e);
		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}
	}
	function color() {
		$("#grid_rulecondition").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
	}
	function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		debugger;
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.source_field_desc;
		} else {
			var codeValue = selectedItem.comparison_field_desc;
		}
		var in_recon_code = $("#cmbreconname").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "extraction_criteria") {
					if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.extraction_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.extraction_criteria_input = undefined;
				}
				if (datafield == "comparison_criteria") {
					if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.comparison_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.comparison_criteria_input = undefined;
				}
			},
		});
	}
	function cmbsourcefield() {
		var arr1 = [];
		var reconcode = $("#cmbreconname").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		return arr1;
	}
	function addRowrule() {
		var grid = $("#grid_rulecondition").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].rulecondition_seqno > max) {
				max = grid.dataSource._data[i].rulecondition_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ rulecondition_seqno: newSeqNo, open_parentheses_flag: "N", close_parentheses_flag: "N", rulecondition_gid: 0 });
	}
	$(function () {
		$('#grid_rulecondition').on('click', '.chkbx1', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_rulecondition').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_rulecondition').on('click', '.chkbx2', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_rulecondition').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function saverulecondition() {
		debugger;
		try {
			var grid = $("#grid_rulecondition").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));

			var in_rule_code = $("#txtrulecode").val();
			var in_source_field = model.source_field_code;
			var in_comparison_field = model.comparison_field;
			var in_extraction_criteria = model.extraction_criteria;
			var in_comparison_criteria = model.comparison_criteria;
			var rulecondition_seqno = model.rulecondition_seqno;
			var action = "";
			var action_by = ""
			var rulecondtion_gid = model.rulecondition_gid;
			if (rulecondtion_gid == "0") {
				rulecondtion_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			var in_open_flag = model.open_parentheses_flag
			var in_close_flag = model.close_parentheses_flag;

			var in_join_condition = model.join_condition;
			$.ajax({
				type: "POST",
				url: '../Rulesetup/ruleconditionsave',
				dataType: 'json',
				data: JSON.stringify({
					in_rulecondition_gid: rulecondtion_gid, in_rule_code: in_rule_code, in_source_field: in_source_field, in_comparison_field: in_comparison_field, in_open_flag: in_open_flag, in_close_flag: in_close_flag, in_rulecondition_seqno: rulecondition_seqno,
					in_extraction_criteria: in_extraction_criteria, in_comparison_criteria: in_comparison_criteria, in_action: action, in_action_by: action_by, in_active_status: status, in_join_condition: in_join_condition
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						getfetch($("#rulegid").val(), "rulecond");
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function myDeleteJsrulecondition() {
		var grid = $("#grid_rulecondition").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var rulecondition_gid = parseInt(model.rulecondition_gid);
		if (rulecondition_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_rule_code = model.rule_code;
						var in_source_field = "";
						var in_comparison_field = "";
						var in_extraction_criteria = "";
						var in_comparison_criteria = "";
						var action = "Delete";
						var action_by = "";
						var status = "";
						var rulecondition_seqno = 0;
						$.ajax({
							type: "POST",
							url: '../Rulesetup/ruleconditionsave',
							dataType: 'json',
							data: JSON.stringify({
								in_rulecondition_gid: rulecondition_gid, in_rule_code: in_rule_code, in_source_field: in_source_field, in_comparison_field: in_comparison_field, in_rulecondition_seqno: rulecondition_seqno,
								in_extraction_criteria: in_extraction_criteria, in_comparison_criteria: in_comparison_criteria, in_action: action, in_action_by: action_by, in_active_status: status
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									getfetch($("#rulegid").val(), "rulecond");
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	//-----------------------------------------------------   Rule condition  ----------------------------------------------------------------

	//-----------------------------------------------------     identifier    ----------------------------------------------------------------
	function grid_sourceidentifier(data) {
		var filter_criteria_list = "";
		var ident_criteria_list = "";
		$("#grid_sourceidentifier").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "ruleselefilter_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							ruleselefilter_gid: { type: "string", defaultValue: "0" },
							ruleselefilter_seqno: { type: "number", defaultValue: "0" },
							filter_applied_on: { type: "string", defaultValue: "S" },
							filter_field_code: { type: "string" },
							filter_field: { type: "string" },
							filter_criteria: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
							ident_criteria: { type: "string" },
							ident_value: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_sourceidentifier').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a href='javascript:void(0)' onclick='addRowsourceidentifier()' ><span class='fa fa-plus' style='color:white'></span></a>",
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='saveIdentifier()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:22%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					//{
					//	name: "edit",
					//	id: "Edit",
					//	template: "<a href='' onclick='getidentifier(this)' value='edit' data-bs-toggle='modal'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
					//},
					{
						name: "Delete",
						id: "Delete",
						template: "<a href='' onclick='myDeleteJsidentifier()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "ruleselefilter_seqno",
				title: "Seq No.",
				width: 30,
			},
			{
				field: "open_parentheses_flag",
				title: "(", width: 20,
				template: function (dataItem) {
					if (dataItem.ruleselefilter_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
					} else {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
					}
				}
				//template: '#=sel_checkboxsI(data)#'
			},
			{
				field: "ruleselefilter_gid",
				title: "ruleselefilter_gid",
				hidden: true,
			},
			
			{
				field: "dataset_name",
				title: "Filter Applied On",
				width: 100,
				hidden: true,
			},
			{
				field: "filter_applied_on",
				title: "Filter Applied On",
				width: 100,
				hidden: true,
			},
			{
				field: "filter_field_code",
				title: "Filter Applied On",
				width: 100,
				hidden: true,
			},
			{
				field: "filter_field",
				title: "Filter Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_sourceidentifier")
				},
			},
			{
				field: "filter_criteria",
				title: "Filter Criteria",
				width: 100,
				editor: function (container, options) {
					combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_sourceidentifier", "SOURCE")
				},
			},
			{
				field: "ident_criteria",
				title: "Identifier Criteria",
				width: 100,
				editor: function (container, options) {
					combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "ident_criteria", "grid_sourceidentifier", "COMPARISON")
				},
			},
			{
				field: "ident_value",
				title: "Identifier Value",
				width: 100,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true,
			},
			{
				field: "close_parentheses_flag",
				title: ")", width: 20,
				//template: '#=sel_checkboxsI1(data)#'
				template: function (dataItem) {
					if (dataItem.ruleselefilter_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
					} else {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
					}
				},
			},
			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_sourceidentifier")
				},
				width: 120,
			}],
			editable: true,
		});
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

		function OnEdit(e) {
			try {
				setDefaultValues(e);
			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
	}

	function addRowsourceidentifier() {
		var grid = $("#grid_sourceidentifier").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].ruleselefilter_seqno > max) {
				max = grid.dataSource._data[i].ruleselefilter_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ ruleselefilter_seqno: newSeqNo, open_parentheses_flag: "N", close_parentheses_flag: "N", ruleselefilter_gid: 0, filter_applied_on: "S" });
	}
	$(function () {
		$('#grid_sourceidentifier').on('click', '.chkbx3', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_sourceidentifier').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_sourceidentifier').on('click', '.chkbx4', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_sourceidentifier').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function combo_filter_field(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbreconname").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}
				if (datafield == "ident_criteria") {
					if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.ident_criteria_input = undefined;
				}
			}
		});
	}
	function grid_comparisionidentifier(data) {
		var filter_criteria_list = "";
		var ident_criteria_list = "";
		$("#grid_comparisionidentifier").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "ruleselefilter_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							ruleselefilter_gid: { type: "string", defaultValue: "0" },
							ruleselefilter_seqno: { type: "number", defaultValue: 0 },
							filter_applied_on: { type: "string", defaultValue: "C" },
							filter_field: { type: "string" },
							filter_field_code: { type: "string" },
							filter_criteria: { type: "string" },
							ident_criteria: { type: "string" },
							ident_value: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" },
							join_condition: { type: "string" },
							open_parentheses_flag: { type: "string", editable: false },
							close_parentheses_flag: { type: "string", editable: false },
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBinding: setDefaultValues,
			edit: OnEdit,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_comparisionidentifier').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a onclick='addRowcomparisionidentifier()'  href='javascript:void(0)' ><span class='fa fa-plus' style='color:white'></span></a>",
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href='' onclick='saveIdentifierC()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:22%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					//{
					//	name: "edit",
					//	id: "Edit",
					//	template: "<a href='' onclick='getidentifier(this)' value='edit' data-bs-toggle='modal'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
					//},
					{
						name: "Delete",
						id: "Delete",
						template: "<a href='' onclick='myDeleteJsidentifier1()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "40px",
			},
			{
				field: "ruleselefilter_seqno",
				title: "Seq No.",
				width: 30,
			},
			{
				field: "open_parentheses_flag",
				title: "(", width: 20,
				//template: '#=sel_checkboxCI(data)#'
				template: function (dataItem) {
					if (dataItem.ruleselefilter_gid > 0) {
						return '<input type="checkbox"' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx5">';
					} else {
						return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx5">';
					}
				}
			},
			{
				field: "ruleselefilter_gid",
				title: "ruleselefilter_gid",
				hidden: true,
			},
			
			{
				field: "dataset_name",
				title: "Filter Applied On",
				width: 100,
				hidden: true,
			},
			{
				field: "filter_applied_on",
				title: "Filter Applied On",
				width: 100,
				hidden: true,
			},
			{
				field: "filter_field_code",
				title: "filter_field_code",
				width: 100,
				hidden: true,
			},
			{
				field: "filter_field",
				title: "Filter Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_comparisionidentifier")
				},
			},
			{
				field: "filter_criteria",
				title: "Filter Criteria",
				width: 100,
				editor: function (container, options) {
					combo_filter_field1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_comparisionidentifier", "SOURCE")
				},
			},
			{
				field: "ident_criteria",
				title: "Identifier Criteria",
				width: 100,
				editor: function (container, options) {
					combo_filter_field1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "ident_criteria", "grid_comparisionidentifier", "COMPARISON")
				},
			},
			{
				field: "ident_value",
				title: "Identifier Value",
				width: 100,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true,
			},
			{
				field: "close_parentheses_flag",
				title: ")", width: 20,
				//template: '#=sel_checkboxsI1(data)#'
				template: function (dataItem) {
					if (dataItem.ruleselefilter_gid > 0) {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx6">';
					} else {
						return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx6">';
					}
				},
			},
			{
				field: "join_condition",
				title: "Joins",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_comparisionidentifier")
				},
				width: 120,
			}],
			editable: true,
		});
		filter_field_list = cmbsourcefield();
		join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

		function OnEdit(e) {
			try {
				setDefaultValues(e);
			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
	}
	function addRowcomparisionidentifier() {
		var grid = $("#grid_comparisionidentifier").data("kendoGrid");
		var dataSource = grid.dataSource;
		var max = 0;
		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		for (var i = 0; i < grid.dataSource._data.length; i++) {
			if (grid.dataSource._data[i].ruleselefilter_seqno > max) {
				max = grid.dataSource._data[i].ruleselefilter_seqno;
			}
		}
		var newSeqNo = parseInt(max) + 1;
		// Add a new row with the incremented sequence number
		dataSource.add({ ruleselefilter_seqno: newSeqNo, open_parentheses_flag: "N", close_parentheses_flag: "N", ruleselefilter_gid: 0, filter_applied_on: "C" });
	}
	$(function () {
		$('#grid_comparisionidentifier').on('click', '.chkbx5', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_comparisionidentifier').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('open_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('open_parentheses_flag', 'N');
			}
		})
	})
	$(function () {
		$('#grid_comparisionidentifier').on('click', '.chkbx6', function () {
			var checked = $(this).is(':checked');
			var grid = $('#grid_comparisionidentifier').data().kendoGrid;
			var dataItem = grid.dataItem($(this).closest('tr'));
			var row = $(this).closest('tr');
			if (checked == true) {
				dataItem._set('close_parentheses_flag', 'Y');
			}
			else {
				dataItem._set('close_parentheses_flag', 'N');
			}
		})
	})
	function combo_filter_field1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "SOURCE") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbreconname").val();
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}
				if (datafield == "ident_criteria") {
					if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.ident_criteria_input = undefined;
				}
			}
		});
	}
	function saveIdentifier() {
		try {
			var grid = $("#grid_sourceidentifier").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));

			var in_rule_code = $("#txtrulecode").val();
			var filterapplyon = model.filter_applied_on;
			var cmbfiltername = model.filter_field_code;
			var extractcriteria = model.filter_criteria;
			var identifiercriteria = model.ident_criteria;
			var identifiervalue = model.ident_value;
			var ruleselefilter_seqno = model.ruleselefilter_seqno;
			var action = "";
			var action_by = ""
			var ruleselefilter_gid = model.ruleselefilter_gid;
			if (ruleselefilter_gid == "0") {
				ruleselefilter_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			var in_open_flag = model.open_parentheses_flag
			var in_close_flag = model.close_parentheses_flag;
			var in_join_condition = model.join_condition;
			$.ajax({
				type: "POST",
				url: '../Rulesetup/ruleIdentifiersave',
				dataType: 'json',
				data: JSON.stringify({
					in_ruleselefilter_gid: ruleselefilter_gid, in_rule_code: in_rule_code, in_filter_applied_on: filterapplyon, in_join_condition: in_join_condition,
					in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, in_open_flag: in_open_flag, ruleselefilter_seqno: ruleselefilter_seqno,
					in_ident_criteria: identifiercriteria, in_action: action, in_user_code: action_by, in_active_status: status, in_close_flag: in_close_flag
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						getfetch($("#rulegid").val(), "idents");
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function saveIdentifierC() {
		try {
			var grid = $("#grid_comparisionidentifier").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));

			var in_rule_code = $("#txtrulecode").val();
			var filterapplyon = model.filter_applied_on;
			var cmbfiltername = model.filter_field_code;
			var extractcriteria = model.filter_criteria;
			var identifiercriteria = model.ident_criteria;
			var identifiervalue = model.ident_value;
			var ruleselefilter_seqno = model.ruleselefilter_seqno;
			var action = "";
			var action_by = ""
			var ruleselefilter_gid = model.ruleselefilter_gid;
			if (ruleselefilter_gid == "0") {
				ruleselefilter_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			var in_open_flag = model.open_parentheses_flag
			var in_close_flag = model.close_parentheses_flag;
			var in_join_condition = model.join_condition;
			$.ajax({
				type: "POST",
				url: '../Rulesetup/ruleIdentifiersave',
				dataType: 'json',
				data: JSON.stringify({
					in_ruleselefilter_gid: ruleselefilter_gid, in_rule_code: in_rule_code, in_filter_applied_on: filterapplyon, in_join_condition: in_join_condition,
					in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, in_open_flag: in_open_flag, ruleselefilter_seqno: ruleselefilter_seqno,
					in_ident_criteria: identifiercriteria, in_action: action, in_user_code: action_by, in_active_status: status, in_close_flag: in_close_flag
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						getfetch($("#rulegid").val(), "identc");
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function myDeleteJsidentifier() {
		var grid = $("#grid_sourceidentifier").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var ruleselefilter_gid = parseInt(model.ruleselefilter_gid);
		if (ruleselefilter_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_rule_code = "";
						var filterapplyon = "";
						var cmbfiltername = "";
						var extractcriteria = "";
						var identifiercriteria = "";
						var identifiervalue = "";
						var action = "DELETE";
						var action_by = ""
						var ruleselefilter_gid = parseInt(model.ruleselefilter_gid);
						var status = "";
						var ruleselefilter_seqno = 0;
						$.ajax({
							type: "POST",
							url: '../Rulesetup/ruleIdentifiersave',
							dataType: 'json',
							data: JSON.stringify({
								in_ruleselefilter_gid: ruleselefilter_gid, in_rule_code: in_rule_code, in_filter_applied_on: filterapplyon,
								in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, ruleselefilter_seqno: ruleselefilter_seqno,
								in_ident_criteria: identifiercriteria, in_action: action, in_user_code: action_by, in_active_status: status
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									getfetch($("#rulegid").val(), "idents");
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	function myDeleteJsidentifier1() {
		var grid = $("#grid_comparisionidentifier").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var ruleselefilter_gid = parseInt(model.ruleselefilter_gid);
		if (ruleselefilter_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_rule_code = "";
						var filterapplyon = "";
						var cmbfiltername = "";
						var extractcriteria = "";
						var identifiercriteria = "";
						var identifiervalue = "";
						var action = "DELETE";
						var action_by = ""
						var ruleselefilter_gid = parseInt(model.ruleselefilter_gid);
						var status = "";
						var ruleselefilter_seqno = 0;
						$.ajax({
							type: "POST",
							url: '../Rulesetup/ruleIdentifiersave',
							dataType: 'json',
							data: JSON.stringify({
								in_ruleselefilter_gid: ruleselefilter_gid, in_rule_code: in_rule_code, in_filter_applied_on: filterapplyon,
								in_filter_field: cmbfiltername, in_filter_criteria: extractcriteria, in_ident_value: identifiervalue, ruleselefilter_seqno: ruleselefilter_seqno,
								in_ident_criteria: identifiercriteria, in_action: action, in_user_code: action_by, in_active_status: status
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									getfetch($("#rulegid").val(), "identc");
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	//-----------------------------------------------------     identifier     ----------------------------------------------------------------
	//-----------------------------------------------------     grouping    ----------------------------------------------------------------
	function grid_grouping(data) {
		$("#grid_grouping").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "rulegrpfield_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							rulegrpfield_gid: { type: "string", defaultValue: "0" },
							rulegrpfield_seqno: { type: "number", defaultValue: "0" },
							grp_field: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_grouping').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			toolbar: "<a href='javascript:void(0)' onclick='addRowgroup()' href=''><span class='fa fa-plus' style='color:white'></span></a>",
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='savegrouping()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:12%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					//{
					//	name: "edit",
					//	id: "Edit",
					//	template: "<a href='' onclick='getgrouping(this)' value='edit' data-bs-toggle='modal'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
					//},
					{
						name: "Delete",
						id: "Delete",
						template: "<a href='' onclick='myDeleteJsgrouping()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "20px",
			},
			{
				field: "rulegrpfield_gid",
				title: "rulegrpfield_gid",
				hidden: true,
			},
			{
				field: "rulegrpfield_seqno",
				title: "Seq No.",
				width: 30,
			},

			{
				field: "grp_field",
				title: "Comparison Group Field",
				width: 100,
				hidden: true,
			},
			{
				field: "recon_field_code",
				title: "recon_field_code",
				hidden: true,
			},
			{
				field: "recon_field_name",
				title: "Comparison Group Field",
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "recon_field_code", "grid_grouping")
				},
				width: 120,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true,
			}],
			editable: true,

		});
		recon_field_name_list = cmbsourcefield();
	}
	function addRowgroup() {
		var grid = $("#grid_grouping").data("kendoGrid");
		var dataSource = grid.dataSource;

		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		var newSeqNo = parseInt(lastSeqNo) + 1;

		// Add a new row with the incremented sequence number
		dataSource.add({ rulegrpfield_seqno: newSeqNo, open_parentheses_flag: "N", close_parentheses_flag: "N", rulegrpfield_gid:0 });
	}
	function savegrouping() {
		try {
			var grid = $("#grid_grouping").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var in_rule_code = $("#txtrulecode").val();
			var cmbcomgrpfield = model.recon_field_code;
			var rulegrpfield_seqno = model.rulegrpfield_seqno;
			var action = "";
			var action_by = ""
			var rulegrpfield_gid = model.rulegrpfield_gid;
			if (rulegrpfield_gid == "0") {
				rulegrpfield_gid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}
			var status = "Y";
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulegroupsave',
				dataType: 'json',
				data: JSON.stringify({
					in_rulegrpfield_gid: rulegrpfield_gid, in_rule_code: in_rule_code, rulegrpfield_seqno: rulegrpfield_seqno,
					in_grp_field: cmbcomgrpfield, in_action: action, in_action_by: action_by, in_active_status: status
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function myDeleteJsgrouping() {
		var grid = $("#grid_grouping").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var rulegrpfield_gid = parseInt(model.rulegrpfield_gid);
		if (rulegrpfield_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_rule_code = "";
						var rulegid = 0;
						var cmbcomgrpfield = "";
						var in_group_method_flag = "";
						var in_manytomany_match_flag = "";
						var action = "DELETE";
						var action_by = ""
						var rulegrpfield_seqno = 0;
						var status = "";
						$.ajax({
							type: "POST",
							url: '../Rulesetup/rulegroupsave',
							dataType: 'json',
							data: JSON.stringify({
								in_rulegrpfield_gid: rulegrpfield_gid, in_rule_code: in_rule_code, rulegrpfield_seqno: rulegrpfield_seqno,
								in_grp_field: cmbcomgrpfield, in_action: action, in_action_by: action_by, in_active_status: status
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									getfetch($("#rulegid").val(), "group");
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	//-----------------------------------------------------     grouping    ----------------------------------------------------------------

	//-----------------------------------------------------     Source order    ----------------------------------------------------------------
	function grid_sourceorder(data) {
		var recorder_field_list = "";
		$("#grid_sourceorder").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "recorder_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							rulerecorder_gid: { type: "string", defaultValue: "0" },
							rule_code: { type: "string" },
							recorder_applied_on: { type: "string" },
							recorder_seqno: { type: "number" },
							recorder_field: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			toolbar: "<a onclick=addrowSorder()  href='javascript:void(0)' ><span class='fa fa-plus' style='color:white'></span></a>",
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_sourceorder').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='saverulesourceorder()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:19%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					//{
					//	name: "edit",
					//	id: "Edit",
					//	template: "<a href='' onclick='getgrouping(this)' value='edit' data-bs-toggle='modal'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
					//},
					{
						name: "Delete",
						id: "Delete",
						template: "<a href='' onclick='myDeleteJssourceorder()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "20px",
			},
			{
				field: "rulerecorder_gid",
				title: "rulerecorder_gid",
				hidden: true,
			},
			{
				field: "rule_code",
				title: "rule_code",
				width: 100,
				hidden: true,
			},
			{
				field: "recorder_applied_on",
				title: "recorder_applied_on",
				hidden: true,
			},
			{
				field: "recorder_field_code",
				title: "rule_code",
				width: 100,
				hidden: true,
			},
			{
				field: "recorder_field",
				title: "Source Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "recorder_field_code", "grid_sourceorder")
				},
			},
			{
				field: "recorder_seqno",
				title: "Order Field",
				width: 100,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,

		});
		recorder_field_list = cmbsourcefield();
	}
	function addrowSorder() {
		var grid = $("#grid_sourceorder").data("kendoGrid");
		var dataSource = grid.dataSource;

		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		var newSeqNo = parseInt(lastSeqNo) + 1;

		// Add a new row with the incremented sequence number
		dataSource.add({ recorder_seqno: newSeqNo, rulerecorder_gid: 0 });
	}
	function saverulesourceorder() {
		try {
			var grid = $("#grid_sourceorder").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var in_rule_code = $("#txtrulecode").val();
			var in_recorder_applied_on = "S";
			var in_recorder_seqno = model.recorder_seqno;
			var in_recorder_field = model.recorder_field_code;
			var action = "";
			var action_by = "";
			var rulerecorder_gid = model.rulerecorder_gid;
			if (rulerecorder_gid == "0") {
				in_rulerecorder_gid = 0;
				action = "INSERT"
			} else {
				in_rulerecorder_gid = model.rulerecorder_gid
				action = "UPDATE"
			}
			var status = "Y"
			$.ajax({
				type: "POST",
				url: '../Rulesetup/Rulefieldordersave',
				dataType: 'json',
				data: JSON.stringify({
					in_rulerecorder_gid: in_rulerecorder_gid, in_rule_code: in_rule_code, in_recorder_applied_on: in_recorder_applied_on,
					in_recorder_seqno: in_recorder_seqno, in_recorder_field: in_recorder_field,
					in_action: action, in_user_code: action_by, in_active_status: status
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						getfetch($("#rulegid").val(), "orders");
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function grid_comparisonorder(data) {
		var recorder_field_list = "";
		$("#grid_comparisonorder").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "recorder_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							rulerecorder_gid: { type: "string", defaultValue: "0" },
							rule_code: { type: "string" },
							recorder_applied_on: { type: "string" },
							recorder_seqno: { type: "number" },
							recorder_field: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			toolbar: "<a onclick=addrowCorder()  href='javascript:void(0)'><span class='fa fa-plus' style='color:white'></span></a>",
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_comparisonorder').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			columns: [{
				command: [
					{
						name: "save",
						id: "Save",
						template: "<a href=''onclick='saverulecomparisonorder()' class='k-grid-save' data-bs-toggle='modal' ><img src = '../Assets/images/topsave.png' style='width:19%;'></a>&nbsp;&nbsp;&nbsp;",
					},
					//{
					//	name: "edit",
					//	id: "Edit",
					//	template: "<a href='' onclick='getgrouping(this)' value='edit' data-bs-toggle='modal'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
					//},
					{
						name: "Delete",
						id: "Delete",
						template: "<a href='' onclick='myDeleteJscomparisonorder()'  data-bs-toggle='modal'><img src = '../Assets/images/del.png' href='../Rulesetup/Rulesetupdetail'></a>&nbsp;&nbsp;&nbsp;"
					},
				], title: "Action&nbsp;", width: "20px",
			},
			{
				field: "rulerecorder_gid",
				title: "rulerecorder_gid",
				hidden: true,
			},
			{
				field: "rule_code",
				title: "rule_code",
				width: 100,
				hidden: true,
			},
			{
				field: "recorder_applied_on",
				title: "recorder_applied_on",
				hidden: true,
			},
			{
				field: "recorder_field_code",
				title: "rule_code",
				width: 100,
				hidden: true,
			},
			{
				field: "recorder_field",
				title: "Target Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "recorder_field_code", "grid_comparisonorder")
				},
			},
			{
				field: "recorder_seqno",
				title: "Order Field",
				width: 100,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,

		});
		recorder_field_list = cmbsourcefield();
	}
	function addrowCorder() {
		var grid = $("#grid_comparisonorder").data("kendoGrid");
		var dataSource = grid.dataSource;

		// Get the last sequence number and increment it
		var lastSeqNo = grid.dataSource._data.length;
		var newSeqNo = parseInt(lastSeqNo) + 1;

		// Add a new row with the incremented sequence number
		dataSource.add({ recorder_seqno: newSeqNo, rulerecorder_gid: 0 });
	}
	function saverulecomparisonorder() {
		try {
			var grid = $("#grid_comparisonorder").data("kendoGrid");
			var model = grid.dataItem($(event.target).closest("tr"));
			var in_rule_code = $("#txtrulecode").val();
			var in_recorder_applied_on = "C";
			var in_recorder_seqno = model.recorder_seqno;
			var in_recorder_field = model.recorder_field_code;
			var action = "INSERT";
			var action_by = "";
			var rulerecorder_gid = model.rulerecorder_gid;
			if (rulerecorder_gid == "0") {
				in_rulerecorder_gid = 0;
				action = "INSERT"
			} else {
				in_rulerecorder_gid = model.rulerecorder_gid
				action = "UPDATE"
			}
			var status = "Y"
			$.ajax({
				type: "POST",
				url: '../Rulesetup/Rulefieldordersave',
				dataType: 'json',
				data: JSON.stringify({
					in_rulerecorder_gid: in_rulerecorder_gid, in_rule_code: in_rule_code, in_recorder_applied_on: in_recorder_applied_on,
					in_recorder_seqno: in_recorder_seqno, in_recorder_field: in_recorder_field,
					in_action: action, in_user_code: action_by, in_active_status: status
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						getfetch($("#rulegid").val(), "orderc");
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function myDeleteJssourceorder() {
		var grid = $("#grid_sourceorder").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var model = grid.dataItem($(event.target).closest("tr"));
		var rulerecorder_gid = parseInt(model.rulerecorder_gid);
		if (rulerecorder_gid == 0) {
			grid.dataSource.remove(model);
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_rule_code = "";
						var in_recorder_applied_on = "";
						var in_recorder_seqno = 0;
						var in_recorder_field = "";
						var action = "DELETE";
						var action_by = "";
						var status = ""
						$.ajax({
							type: "POST",
							url: '../Rulesetup/Rulefieldordersave',
							dataType: 'json',
							data: JSON.stringify({
								in_rulerecorder_gid: rulerecorder_gid, in_rule_code: in_rule_code, in_recorder_applied_on: in_recorder_applied_on,
								in_recorder_seqno: in_recorder_seqno, in_recorder_field: in_recorder_field,
								in_action: action, in_user_code: action_by, in_active_status: status
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									getfetch($("#rulegid").val(), "orders");
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	function myDeleteJscomparisonorder() {
		var grid = $("#grid_comparisonorder").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		var rulerecorder_gid = parseInt(model.rulerecorder_gid);
		if (rulerecorder_gid == 0) {
			grid.dataSource.remove(model);
		} else {
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						var in_rule_code = "";
						var in_recorder_applied_on = "";
						var in_recorder_seqno = 0;
						var in_recorder_field = "";
						var action = "DELETE";
						var action_by = "";
						var status = ""
						$.ajax({
							type: "POST",
							url: '../Rulesetup/Rulefieldordersave',
							dataType: 'json',
							data: JSON.stringify({
								in_rulerecorder_gid: rulerecorder_gid, in_rule_code: in_rule_code, in_recorder_applied_on: in_recorder_applied_on,
								in_recorder_seqno: in_recorder_seqno, in_recorder_field: in_recorder_field,
								in_action: action, in_user_code: action_by, in_active_status: status
							}),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
								if (response.out_result == "1") {
									$.alert({
										icon: 'fa fa-success',
										title: 'Recon',
										theme: 'dark',
										content: response.out_msg,
										type: 'green',
										animationSpeed: 700,
									});
									getfetch($("#rulegid").val(), "orderc");
								} else {
									$.alert({
										title: 'Recon',
										content: response.out_msg,
										type: 'red',
									});
								}
							}
						})
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}
	//-----------------------------------------------------     Source order    ----------------------------------------------------------------
	function saveheadersubmit() {
		try {
			var in_rule_code = $("#txtrulecode").val();
			var ruleName = $("#ruleName").val();
			var cmbreconname = $("#cmbreconname").val();
			var period_from = $("#period_from").val();
			var ts = period_from.split("/");
			var pr = ts[2] + "-" + ts[1] + "-" + ts[0];
			var in_until_active_flag = "";
			if ($('#untillactive').is(":checked")) {
				in_until_active_flag = "Y"
				var pr1 = "1901-01-01";
			} else {
				in_until_active_flag = "N"
				var period_to = $("#period_to").val();
				var ts1 = period_to.split("/");
				var pr1 = ts1[2] + "-" + ts1[1] + "-" + ts1[0];
			}
			var in_source_dataset_code = "";
			var in_comparison_dataset_code = "";
			var in_source_acc_mode = "";
			var in_parent_dataset_code = "";
			var in_parent_acc_mode = "";
			var in_comparison_acc_mode = "";
			var in_applyrule_on = $("#RuleAppliedOn").val();
			if (in_applyrule_on == 'T') {
				in_source_dataset_code = $("#sourcedataset").val();
				in_comparison_dataset_code = $("#comdataset").val();
				in_source_acc_mode = $("#souaccmode").val();
				in_comparison_acc_mode = $("#comaccmode").val();
			} else {
				in_source_dataset_code = $("#sourcedataset").val();
				in_source_acc_mode = $("#souaccmode").val();
				in_comparison_dataset_code = $("#comdataset").val();
				in_comparison_acc_mode = $("#comaccmode").val();
			}

			var action = "";
			var action_by = ""
			var rulegid = $("#rulegid").val();
			if (rulegid == "") {
				rulegid = 0;
				action = "INSERT"
			} else {
				action = "UPDATE"
			}

			var in_rule_order = parseFloat($("#ruleorder").val()).toFixed(2);
			var status = "Y";
			var Groupflag = $("#cmbgroupflag").val();
			var in_inactive_reason = "";
			var probableflag = $("#probableflag").val();
			$.ajax({
				type: "POST",
				url: '../Rulesetup/Ruleheader',
				dataType: 'json',
				data: JSON.stringify({
					in_rule_gid: rulegid, in_rule_code: in_rule_code, in_rule_name: ruleName, in_recon_code: cmbreconname, in_period_from: pr,
					in_period_to: pr1, in_until_active_flag: in_until_active_flag, in_applyrule_on: in_applyrule_on, in_rule_order: in_rule_order,
					in_source_dataset_code: in_source_dataset_code, in_comparison_dataset_code: in_comparison_dataset_code, in_source_acc_mode: in_source_acc_mode, in_comparison_acc_mode: in_comparison_acc_mode,
					in_parent_dataset_code: in_parent_dataset_code, in_parent_acc_mode: in_parent_acc_mode, probableflag: probableflag,
					in_group_flag: Groupflag, in_action: action, in_action_by: action_by, in_active_status: status, in_inactive_reason: in_inactive_reason
				}),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					debugger;
					if (response != null) {
						$.alert({
							title: 'Recon',
							content: response.out_msg,
							type: 'green',
						});
						$("#rulegid").val(response.in_rule_gid);
						getfetch(response.in_rule_gid, "Header");
					}
					else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		}
		catch (e) {
			console.log(e)
		}
	}
	function openInfoModel() {
		$("#infomodal").modal("show");
	}
	function sourcefieldchange() {
		if ($("#RuleAppliedOn").val() == 'S') {
			$("#comdataset").empty();
			$("#comdataset").append($('<option>', {
				value: "",
				text: "  Select  "
			}));
			var reconcode = $("#cmbreconname").val();
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulerecondatasetfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					var res = JSON.parse(response);
					$.each(res, function (index, item) {
						if (item.dataset_type == "S" && item.parent_dataset_code == $("#sourcedataset").val()) {
							$("#comdataset").append($('<option>', {
								value: item.dataset_code,
								text: item.dataset_name
							}));
						}
					});
				}
			});
		}
	}
</script>
