<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid-filter.k-state-active {
			background-color: initial !important;
		}


		.k-grid-header {
			font-weight: bold;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}

		.accordion-wrapper {
			border-radius: 8px;
			overflow: hidden;
			box-shadow: 0 4px 4px -2px rgba(0, 0, 0, 0.5);
			width: 100%;
			margin: 0 auto;
		}

		.accordion {
			width: 100%;
			color: white;
			overflow: hidden;
			margin-bottom: 3px;
		}

			.accordion:last-child {
				margin-bottom: 0;
			}

		.accordion-label {
			display: flex;
			-webkit-box-pack: justify;
			justify-content: space-between;
			padding: 4px;
			background: rgb(135, 46, 123);
			/*background: rgba(4,57,94,.8);*/
			font-weight: bold;
			cursor: pointer;
			font-size: 14px;
			color: white;
		}

			.accordion-label:hover {
				/*background: rgba(4,57,94,1);*/
				background: rgb(135, 46, 123)
			}

			.accordion-label::after {
				content: "\276F";
				width: 16px;
				height: 16px;
				text-align: center;
				-webkit-transition: all 0.3s;
				transition: all 0.3s;
			}

		.accordion-content {
			max-height: 0;
			padding: 0 16px;
			color: rgba(4, 57, 94, 1);
			background: rgb(135 46 123 / 14%);
			-webkit-transition: all 0.3s;
			transition: all 0.3s;
		}

			.accordion-content p {
				margin: 0;
				color: rgba(4,57,94,.7);
				font-size: 18px;
			}

		input:checked + .accordion-label {
			background: rgba(4,57,94,1);
		}

			input:checked + .accordion-label::after {
				-webkit-transform: rotate(90deg);
				transform: rotate(90deg);
			}

		input:checked ~ .accordion-content {
			max-height: 100vh;
			/* padding: 16px; */
		}

		.validated1 {
			background-color: green; /* Change to desired color */
			color: white; /* Change to desired text color */
		}

		.validated {
			background-color: red; /* Change to desired color */
			color: white; /* Change to desired text color */
		}

	</style>
</head>
<body>
	<form method="post" class="form-horizontal" id="form" enctype="multipart/form-data">
		<div class="row" style="margin-top: -18px;margin-bottom: 10px;">
			<div class="col-sm-6">
				<div class="row">
					<div class="col-sm-4">
						<label for="lblpreprocesscode" class="form-label">Preprocess Code</label>
						<input class="form-control" type="text" id="txtpreprocesscode" disabled value="">
					</div>
					<div class="col-sm-4">
						<label for="lblmode" class="form-label">Mode</label>
						<input class="form-control" type="text" id="txtmode2" value="" disabled>
					</div>
					<div class="col-sm-4">
						<label for="lblstatus" class="form-label">Status</label><br>
						<input class="form-control" type="text" id="txtstatus2" value="Active" disabled>
					</div>
				</div>
			</div>
			<div class="col-sm-5">
			</div>
			<div class="col-sm-1" style="margin-top:20px;">
			</div>
		</div>
		<div class="row" style="margin-top:10px;">
			<div class="col-sm-3">
				<label class="form-label" for="">Preprocess Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<input class="form-control" type="text" id="preprocessname" disabled>
				<input class="form-control" type="hidden" id="preprocessgid" value=0;>
				<input class="form-control" type="hidden" id="validquery" />
			</div>
			<div class="col-sm-2">
				<label class="form-label" for="">Process Method&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="Cmbprocessmethod" class="form-select form-control" onchange="processmethod()" disabled>
				</select>
			</div>
			<div class="col-sm-3">
				<label class="form-label" for="">Recon&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="cmbreconpre1" class="form-select form-control" onchange="reconcode()" disabled>
				</select>
			</div>
			<div class="col-sm-1" style="width: 12%;">
				<label class="form-label" for="">Preprocess Order&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<input class="form-control" type="number" id="preprocessorder" disabled>
			</div>
			<div class="col-md-1" style="width: 10%;">
				<label for="" class="form-label">Hold Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="holdflag11" class="form-select form-control" style=" width:100%;" disabled>
				</select>
			</div>
			<div class="col-md-1" style="padding-left:0;width: 11%;">
				<label for="" class="form-label">Post Process Flag&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
				<select id="postprocessflag" class="form-select form-control" style=" width:100%;" disabled>
				</select>
			</div>
		</div>
		<div style="height:300px;overflow-x:auto;padding-top:10px;margin-top:10px">
			<div class="accordion-wrapper">
				<div class="accordion" id="headingfunction">
					<input type="checkbox" name="radio-a" id="check2" style="display:none">
					<label class="accordion-label" for="check2">&nbsp;&nbsp;&nbsp;Function</label>
					<div id="headingfunction" class="accordion-content">
						<div class="accordion-body" style="padding-left:15px;">
							<div class="row">
								<div class="col-sm-3">
									<label class="form-label" for="">Lookup Recon Field&nbsp&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
									<select id="cmbgetrecon" class="form-select form-control" onchange="cmbgetfunction()" disabled>
									</select>
								</div>
								<div class="col-sm-3">
									<label class="form-label" for="">Lookup Function&nbsp;</label>
									<input class="form-control" id="Cmbfunction" name="Cmbfunction" disabled type="text" value="" data-bind="value:Cmbfunction">
									@*<select id="Cmbfunction" class="form-select form-control">
									</select>*@
								</div>
								<div class="col-sm-3">
									<label class="form-label" for="">Update Recon Field&nbsp;</label>
									<select id="Cmbreconfield" disabled class="form-select form-control">
									</select>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headingexpression">
					<input type="checkbox" name="radio-a" id="check8" style="display:none">
					<label class="accordion-label" for="check8">&nbsp;&nbsp;&nbsp;Expression</label>
					<div id="headingexpression" class="accordion-content">
						<div class="accordion-body" style="padding-left:15px;">
							<div class="row">
								<div class="col-sm-3">
									<label class="form-label" for="">Update Recon Field&nbsp;</label>
									<select id="Cmbreconfieldpre" disabled class="form-select form-control">
									</select>
								</div>
								<div class="col-sm-8">
									<label for="organization" class="form-label">
										<span>Expression</span>&nbsp;&nbsp;&nbsp;&nbsp;
										<input class="form-check-input" disabled style="margin: 0px;" type="checkbox" value="false" name="cumulativeflag" id="cumulativeflag" />&nbsp;&nbsp;
										<span id="lblcumulativeflag" style="font-size:12px;">Cumulative Flag</span>
									</label>
									<textarea id="CmbExpression" disabled name="CmbExpression" rows="4" style="height: 32px;width:700px;border-radius: 0.375rem;"></textarea>
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headinglookupdataset">
					<input type="checkbox" name="radio-a" id="check3" style="display:none">
					<label class="accordion-label" for="check3">&nbsp;&nbsp;&nbsp;Lookup Dataset</label>
					<div id="headinglookupdataset" class="accordion-content">
						<div class="row" style="margin-bottom:5px;">
							<div class="col-sm-3">
								<label class="form-label" for="">Lookup Dataset &nbsp&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								<select id="cmblookupdatasetpre" disabled class="form-select form-control" onchange="lookupchange()">
								</select>
							</div>
							<div class="col-sm-3" id="luprfield">
								<label class="form-label" for="">Lookup Return Field&nbsp;</label>
								<select id="Cmblookupdatasetfield" disabled class="form-select form-control">
								</select>
							</div>
							<div class="col-sm-3" id="uprfield">
								<label class="form-label" for="">Update Recon Field&nbsp;</label>
								<select id="Cmbreconfieldpre1" disabled class="form-select form-control">
								</select>
							</div>
							<div class="col-sm-3">
								<div>
									<input type="checkbox" id="lookupflag" disabled onclick="lookupflagjs()">
									<label for="vehicle1">Enable Mutiple Update Recon Field </label>
								</div>
								<div style="margin-top:10px" id="rflag">
									<input type="checkbox" id="returnflag" disabled onclick="returnflag()">
									<label for="vehicle1">Group Return Value</label>
								</div>
							</div>
						</div>
						<div class="col-xs-12" style="margin-top:5px;margin-bottom:10px" id="lookupgrid">
							<label class="form-label" style="font-size: 14px;margin-left: -13px;font-weight:bold">&nbsp;&nbsp;&nbsp;Lookup Update Field</label>
							<div id="grid_lookupfield">
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headinglookuprecon">
					<input type="checkbox" name="radio-a" id="check4" style="display:none">
					<label class="accordion-label" for="check4">&nbsp;&nbsp;&nbsp;Recon (vs) Lookup</label>
					<div id="headinglookuprecon" class="accordion-content">
						<div class="row" style="margin-bottom:5px;">
							<div class="col-xs-12" style="margin-top:5px;">
								<div id="grid_lookup">
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headinglookup">
					<input type="checkbox" name="radio-a" id="check5" style="display:none">
					<label class="accordion-label" for="check5">&nbsp;&nbsp;&nbsp;Lookup (vs) Recon</label>
					<div id="headinglookup" class="accordion-content">
						<div class="row" style="margin-bottom:5px;">
							<div class="col-xs-12" style="margin-top:5px;">
								<div id="grid_lookuprecon">
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headinglookupfilter">
					<input type="checkbox" name="radio-a" id="check7" style="display:none">
					<label class="accordion-label" for="check7">&nbsp;&nbsp;&nbsp;Lookup Filter</label>
					<div class="accordion-content" id="headinglookupfilter">
						<div class="col-xs-12" style="margin-top:5px;">
							<div id="gd_lookupfilter">
								<div id="grid_lookupfilter">
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headingcumexp">
					<input type="checkbox" name="radio-a" id="check9" style="display:none">
					<label class="accordion-label" for="check9">&nbsp;&nbsp;&nbsp;Recon Order</label>
					<div class="accordion-content" id="headingcumexp">
						<div class="col-xs-12" style="margin-top:5px;">
							<div id="gd_cumexporder">
								<div id="grid_cumexporder">
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headingaggexp">
					<input type="checkbox" name="radio-a" id="check10" style="display:none">
					<label class="accordion-label" for="check10">&nbsp;&nbsp;&nbsp;Aggregation Grouping</label>
					<div class="accordion-content" id="headingaggexp">
						<div class="col-xs-12" style="margin-top:5px;">
							<div id="gd_aggexp">
								<div id="grid_aggexp">
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headingfilter">
					<input type="checkbox" name="radio-a" id="check1" style="display:none">
					<label class="accordion-label" for="check1">&nbsp;&nbsp;&nbsp;Recon Filter</label>
					<div class="accordion-content" id="headingfilter">
						<div class="col-xs-12" style="margin-top:5px;">
							<div id="gd_filter">
								<div id="grid_filter">
								</div>
							</div>
						</div>
					</div>
				</div>
				<div class="accordion" id="headingquery">
					<input type="checkbox" name="radio-a" id="check6" style="display:none">
					<label class="accordion-label" for="check6">&nbsp;&nbsp;&nbsp;Query</label>
					<div id="collapsequery" class="accordion-content">
						<textarea id="querydatapre" disabled name="querydata" rows="4" style="margin-top: 20px;height: 115px;width: 1000px;border-radius: 0.375rem;"></textarea>
						@*<button type="button" id="validatequery" class="btn btn-sm btn btn-primary" onclick="validatequery1()">Validate</button>&nbsp;&nbsp;&nbsp;*@
					</div>
				</div>
			</div>
		</div>
		<div class="row" style="padding-top:16px">
			<div class="col-sm-4">
			</div>
			<div class="col-sm-4" style="margin-left:-190px;">
				<i class="btn btn-sm cancel_btn me-2" data-bs-dismiss="modal" style="color: #000000;float:right">Cancel</i>
			</div>
			<div class="col-sm-4">
			</div>
		</div>
	</form>

</body>
</html>
<script>
	function getGridCombopreprocessList() {
		//recon type
		var in_master_code = "QCD_PROCESSM";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#Cmbprocessmethod").empty();
				$("#Cmbprocessmethod").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#Cmbprocessmethod").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
			}
		});
		//recon name
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = sessionStorage.getItem("usrname");
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbreconpre1").empty();
				$("#cmbreconpre1").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					$("#cmbreconpre1").append($('<option>', {
						value: item.recon_code,
						text: item.recon_name
					}));
				});
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
		// holdflag11 flag
		var in_master_code = "QCD_YN";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#holdflag11").empty();
				$("#holdflag11").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#holdflag11").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});

			}
		});
		// postprocessflag flag
		var in_master_code = "QCD_YN";
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Common/Qcdmaster',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_user_code: in_user_code, in_master_code: in_master_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				$("#postprocessflag").empty();
				$("#postprocessflag").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(response, function (index, item) {
					$("#postprocessflag").append($('<option>', {
						value: item.masterSyscode,
						text: item.masterName
					}));
				});
				$("#postprocessflag").val('N');
			}
		});
		preprocessload();
	}
	function cmbgetfunction() {
		var sourcedata = "SOURCE1";
		var codeValue = $('#cmbgetrecon').find(":selected").text();
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					var selected = [];
					for (var i = 0; i < res.length; i++) {
						selected[i] = res[i].condition_desc;
					}
					$("#Cmbfunction").autocomplete({
						source: selected,
						minLength: 0
					}).focus(function () {
						$("#Cmbfunction").autocomplete('search', $("#Cmbfunction").val())
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	function processmethod() {
		if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION') {
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookup").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").hide();
				$("#headingexpression").hide();
				$("#headingexpressiongrid").hide();
				$("#headingcumexp").hide();
				$("#headingaggexp").hide();
				$("#headinglookupaggexp").hide();
				$("#lblcumulativeflag").hide();
				$("#cumulativeflag").hide();
				$("#headinglookuporder").hide();
				$("#lblopeningflag").hide();
				$("#openingflag").hide();
				$("#headingfunction").show();
				$("#headingcomparsion").hide();
				$("#headingsourcefilter").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressionlookupAgg").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingfilter").show();
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				//$("#check1").prop('checked', true);
				$("#check2").prop('checked', true);
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP') {
				$("#Cmbreconfield").val('');
				$("#Cmbfunction").val('');
				$("#cmbgetrecon").val('');
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookupdataset").show();
				$("#headinglookup").show();
				$("#headinglookuprecon").show();
				$("#headinglookupfilter").show();
				$("#headinglookupfilterExp").hide();
				$("#headinglookupaggexp").hide();
				$("#headingfunction").hide();
				$("#cumulativeflag").hide();
				$("#headinglookuporder").hide();
				$("#lblcumulativeflag").hide()
				$("#lblopeningflag").hide();
				$("#openingflag").hide();
				$("#headingcumexp").hide();
				$("#headingaggexp").hide();
				$("#headingexpression").hide();
				$("#headingsourcefilter").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressionlookupAgg").hide();
				$("#headingexpressiongrid").hide();
				$("#headingcomparsion").hide();
				$("#headingfilter").show();
				$("#check3").prop('checked', true);
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				//$("#check4").prop('checked', true);
				//$("#check5").prop('checked', true);
				//$("#check6").prop('checked', true);
				//$("#check7").prop('checked', true);
				$("#lookupgrid").hide();
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_QUERY') {
				$("#Cmbreconfield").val('');
				$("#Cmbfunction").val('');
				$("#cmbgetrecon").val('');
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#headingquery").show();
				$("#headinglookup").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").hide();
				$("#headingexpressionlookupAgg").hide();
				$("#headinglookupaggexp").hide();
				$("#headingfunction").hide();
				$("#headinglookuporder").hide();
				$("#headingcumexp").hide();
				$("#headingaggexp").hide();
				$("#cumulativeflag").hide();
				$("#lblcumulativeflag").hide();
				$("#lblopeningflag").hide();
				$("#openingflag").hide();
				$("#headingexpression").hide();
				$("#headingsourcefilter").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressiongrid").hide();
				$("#headingcomparsion").hide();
				$("#headingfilter").hide();
				$("#check6").prop('checked', true);
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				$("#validquery").val("false");
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookup").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").hide();
				$("#headinglookupaggexp").hide();
				$("#headingfunction").hide();
				$("#cumulativeflag").hide();
				$("#lblcumulativeflag").hide();
				$("#headinglookuporder").hide();
				$("#lblopeningflag").hide();
				$("#openingflag").hide();
				$("#headingcumexp").hide();
				$("#headingaggexp").hide();
				$("#headingcomparsion").hide();
				$("#headingsourcefilter").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressionlookupAgg").hide();
				$("#headingexpression").hide();
				$("#headingexpressiongrid").show();
				$("#headingfilter").show();
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				$("#check18").prop('checked', true);
				//$("#check1").prop('checked', true);
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_CUMULATIVEXP') {
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookup").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").hide();
				$("#headinglookuporder").hide();
				$("#headingfunction").hide();
				$("#headingexpression").show();
				$("#headingexpressiongrid").hide();
				$("#headinglookupaggexp").hide();
				$("#cumulativeflag").hide();
				$("#lblcumulativeflag").hide();
				$("#lblopeningflag").hide();
				$("#openingflag").hide();
				$("#lblgroupflag").hide();
				$("#groupflag").hide();
				$("#lblaggflag").hide();
				$("#aggflag").hide();
				$("#headingcumexp").show();
				$("#headingaggexp").hide();
				$("#headingcomparsion").hide();
				$("#headingsourcefilter").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressionlookupAgg").hide();
				$("#headingexpressiongrid").hide();
				$("#headingfilter").show();
				$("#check8").prop('checked', true);
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				//$("#check1").prop('checked', true);
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_AGGEXP') {
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookup").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").hide();
				$("#headinglookuporder").hide();
				$("#headingfunction").hide();
				$("#headingexpression").show();
				$("#headingexpressiongrid").hide();
				$("#cumulativeflag").show();
				$("#lblcumulativeflag").show();
				$("#lblopeningflag").show();
				$("#openingflag").show();
				$("#groupflag").show();
				$("#lblgroupflag").show();
				$("#aggflag").show();
				$("#lblaggflag").show();
				$("#headingcumexp").hide();
				$("#headingaggexp").show();
				$("#headinglookupaggexp").hide();
				$("#headingcomparsion").hide();
				$("#headingsourcefilter").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressionlookupAgg").hide();
				$("#headingexpressiongrid").hide();
				$("#headingfilter").show();
				$("#check8").prop('checked', true);
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				//$("#check1").prop('checked', true);
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_COMPARISONEXP') {
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookup").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").hide();
				$("#headingfunction").hide();
				$("#headinglookuporder").hide();
				$("#cumulativeflag").hide();
				$("#lblcumulativeflag").hide();
				$("#lblopeningflag").hide();
				$("#openingflag").hide();
				$("#groupflag").hide();
				$("#lblgroupflag").hide();
				$("#aggflag").hide();
				$("#lblaggflag").hide();
				$("#headingcumexp").hide();
				$("#headingaggexp").hide();
				$("#headinglookupaggexp").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressionlookupAgg").hide();
				$("#headingexpressiongrid").show();
				$("#headingexpression").hide();
				$("#headingcomparsion").show();
				$("#headingsourcefilter").show();
				$("#headingcomparisionfilter").show();
				$("#headingfilter").show();
				$("#check18").prop('checked', true);
				$("#sourcedataset").prop('disabled', false);
				$("#comdataset").prop('disabled', false);
				//$("#check1").prop('checked', true);
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP_EXPRESSION') {
				$("#Cmbreconfield").val('');
				$("#Cmbfunction").val('');
				$("#cmbgetrecon").val('');
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookup").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").show();
				$("#headingfunction").hide();
				$("#cumulativeflag").hide()
				$("#lblcumulativeflag").hide();
				$("#headinglookuporder").hide();
				$("#lblopeningflag").hide();
				$("#openingflag").hide();
				$("#headingcumexp").hide();
				$("#headingaggexp").hide();
				$("#headingexpression").hide();
				$("#headingexpressiongrid").hide();
				$("#headingsourcefilter").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingexpressionlookup").show();
				$("#headingexpressionlookupAgg").hide();
				$("#headingcomparsion").hide();
				$("#headingfilter").hide();
				$("#headinglookupaggexp").hide();
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				$("#lookupgrid").hide();
				$("#check14").prop('checked', true);
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
			else if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP_EXP_AGG') {
				$("#Cmbreconfield").val('');
				$("#Cmbfunction").val('');
				$("#cmbgetrecon").val('');
				$("#cmblookupdataset").val('');
				$("#Cmblookupdatasetfield").val('');
				$("#Cmbreconfield1").val('');
				$("#querydata").val('');
				$("#headingquery").hide();
				$("#headinglookupdataset").hide();
				$("#headinglookup").hide();
				$("#headinglookuprecon").hide();
				$("#headinglookupfilter").hide();
				$("#headinglookupfilterExp").show();
				$("#headingfunction").hide();
				$("#cumulativeflag1").show();
				$("#lblcumulativeflag1").show();
				$("#lblopeningflag1").show();
				$("#openingflag1").show();
				$("#groupflag1").show();
				$("#lblgroupflag1").show();
				$("#aggflag1").show();
				$("#lblaggflag1").show();
				$("#headingcumexp").hide();
				$("#headingaggexp").hide();
				$("#headinglookupaggexp").show();
				$("#headinglookuporder").show();
				$("#headingexpression").hide();
				$("#headingexpressiongrid").hide();
				$("#headingsourcefilter").hide();
				$("#headingcomparisionfilter").hide();
				$("#headingexpressionlookup").hide();
				$("#headingexpressionlookupAgg").show();
				$("#headingcomparsion").hide();
				$("#headingfilter").hide();
				$("#sourcedataset").prop('disabled', true);
				$("#comdataset").prop('disabled', true);
				$("#lookupgrid").hide();
				$("#check19").prop('checked', true);
				$("#sourcedataset").val("");
				$("#comdataset").val("");
			}
		}
	function preprocessload() {
		var data = getlocalStorage("preprocess_details");
		$("#txtmode2").val("View");
		$("#txtpreprocesscode").val(data.preprocess_code);
		$("#cmbreconpre1").val(data.recon_code);
		jQuery('#cmbreconpre1').trigger("change");
		$("#preprocessname").val(data.preprocess_desc);
		$("#preprocessorder").val(data.preprocess_order);
		$("#preprocessgid").val(data.preprocess_gid);
		$("#Cmbprocessmethod").val(data.process_method);
		jQuery('#Cmbprocessmethod').trigger("change");
		$("#cmbgetrecon").val(data.get_recon_field);
		jQuery('#cmbgetrecon').trigger("change");
		$("#Cmbfunction").val(data.process_function);
		$("#Cmbreconfield").val(data.set_recon_field);
		$("#querydatapre").val(data.process_query);

		$("#holdflag11").val(data.hold_flag);
		$("#txtstatus2").val("Active");
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocessfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ preprocess_code: data.preprocess_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				 var result = JSON.parse(response);
				 if (result != null) {
					$("#txtpreprocesscode").val(result.header[0].preprocess_code);
					$("#preprocessgid").val(result.header[0].preprocess_gid)
					$("#cmbrecon").val(result.header[0].recon_code);
					jQuery('#cmbrecon').trigger("change");
					$("#cmbreconname_desc").val(sessionStorage.getItem("reconname"));
					$("#preprocessname").val(result.header[0].preprocess_desc);
					$("#preprocessorder").val(result.header[0].preprocess_order);
					$("#preprocessgid").val(result.header[0].preprocess_gid);
					$("#Cmbprocessmethod").val(result.header[0].process_method);
					processmethod1();
					$("#cmbgetrecon").val(result.header[0].get_recon_field);
					jQuery('#cmbgetrecon').trigger("change");
					$("#Cmbfunction").val(result.header[0].process_function);
					if ($("#Cmbprocessmethod").val() == 'QCD_FUNCTION')
					{
						$("#Cmbreconfield").val(result.header[0].set_recon_field);
					} else {
						$("#Cmbreconfield1").val(result.header[0].set_recon_field);
					}
					if ($("#Cmbprocessmethod").val() == 'QCD_EXPRESSION') {
						if (result.reconexp.length > 0) {
							grid_expression(result.reconexp)
						} else {
							grid_expression([])
						}
					}
					if ($("#Cmbprocessmethod").val() == 'QCD_CUMULATIVEXP') {
						$("#Cmbreconfield2").val(result.header[0].set_recon_field);
						$("#CmbExpression").val(result.header[0].process_expression)
					}
					if ($("#Cmbprocessmethod").val() == 'QCD_AGGEXP') {
						$("#CmbExpression").val(result.header[0].process_expression);
						$("#Cmbreconfield2").val(result.header[0].set_recon_field);
						if (result.header[0].cumulative_flag == "Y") {
							$('#cumulativeflag').attr('checked', true);
						}
						if (result.header[0].opening_flag == "Y") {
							$('#openingflag').attr('checked', true);
						}
						if (result.header[0].group_flag == "Y") {
							$('#groupflag').attr('checked', true);
						}
						if (result.header[0].agg_flag == "Y") {
							$('#aggflag').attr('checked', true);
						}
					}

					$("#postprocessflag").val(result.header[0].postprocess_flag)
					$("#querydata").val(result.header[0].process_query);
					$("#cmblookupdataset").val(result.header[0].lookup_dataset_code);
					jQuery('#cmblookupdataset').trigger("change");
					$("#Cmblookupdatasetfield").val(result.header[0].lookup_return_field);
					if (result.header[0].lookup_group_flag == "Y") {
						$("#returnflag").prop("checked", true);
					} else {
						$("#returnflag").prop("checked", false);
					}
					if (result.header[0].lookup_multi_return_flag == "Y") {
						$("#lookupflag").prop("checked", true);
						lookupflagjs();
					} else {
						$("#lookupflag").prop("checked", false);
					}
					$("#holdflag").val(result.header[0].hold_flag);
					$("#txtstatus").val(result.header[0].active_status_desc);
					$("#Cmbclone").prop('disabled', true)
					$("#btnclone").prop('disabled', true)
					if (result.filter.length > 0) {
						$("#gd_filter").empty();
						$("#gd_filter").append("<div id='grid_filter'></div>");
						grid_filterdata(result.filter);
					}
					else {
						grid_filterdata([]);
					}
					if (result.filterlookup.length > 0) {
						$("#gd_lookupfilter").empty();
						$("#gd_lookupfilter").append("<div id='grid_lookupfilter'></div>");
						grid_lookupfilter(result.filterlookup);
					}
					else {
						grid_lookupfilter([]);
					}
					if (result.condition.length > 0){
						grid_lookup(result.condition)
					} else {
						grid_lookup([]);
					}
					if (result.conditionlookup.length > 0) {
						grid_lookuprecon(result.conditionlookup)
					} else {
						grid_lookuprecon([])
					}
					if (result.lookup.length > 0) {
						grid_lookupfield(result.lookup)
					} else {
						grid_lookupfield([]);
					}
					if (result.preprocessorder.length > 0) {
						grid_cumexporder(result.preprocessorder)
					} else {
						grid_cumexporder([]);
					}
					if (result.aggexp.length > 0) {
						grid_aggexp(result.aggexp)
					} else {
						grid_aggexp([]);
					}
					if (result.preprocesscondition.length > 0) {
						grid_preprocesscondition(result.preprocesscondition)
					} else {
						grid_preprocesscondition([]);
					}
					if (result.sourcefilter.length > 0) {
						grid_sourcefilter(result.sourcefilter)
					} else {
						grid_sourcefilter([]);
					}
					if (result.comparsionfilter.length > 0) {
						grid_comparisionfilter(result.comparsionfilter)
					} else {
						grid_comparisionfilter([]);
					}
					if ($("#Cmbprocessmethod").val() == 'QCD_COMPARISONEXP')
					{
						if (result.reconexp.length > 0) {
							grid_expression(result.reconexp)
						} else {
							grid_expression([])
						}
						$("#sourcedataset").val(result.header[0].source_dataset_code);
						$("#comdataset").val(result.header[0].comparison_dataset_code);
						$("#Cmbreconfield2").val(result.header[0].set_recon_field);
					}
					if (result.header[0].recorderby_type == "ASC")
					{
						$("#reconorderby1").prop("checked", true);
					}else {
						$("#reconorderby2").prop("checked", true);
					}
					if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP_EXPRESSION')
					{
						$("#CmbExpression1").val(result.header[0].process_expression);
						$("#cmblookupdataset1").val(result.header[0].lookup_dataset_code);
						jQuery('#cmblookupdataset1').trigger("change");
						$("#Cmblookupdatasetfield1").val(result.header[0].lookup_return_field);
						if (result.filterlookup.length > 0)
						{
							grid_lookupfilterexp(result.filterlookup)
						}
						else
						{
							grid_lookupfilterexp([]);
						}
						if (result.lookupexp.length > 0) {
							grid_expression1(result.lookupexp)
						} else {
							grid_expression1([])
						}
					}
					if ($("#Cmbprocessmethod").val() == 'QCD_LOOKUP_EXP_AGG')
					{
						$("#CmbExpression1").val(result.header[0].process_expression);
						$("#cmblookupdataset2").val(result.header[0].lookup_dataset_code);
						jQuery('#cmblookupdataset2').trigger("change");
						$("#Cmblookupdatasetfield1").val(result.header[0].lookup_return_field);
						if (result.lookupaggexp.length > 0)
						{
							grid_aggexplookup(result.lookupaggexp)
						} else
						{
							grid_aggexplookup([]);
						}
						if (result.filterlookup.length > 0)
						{
							grid_lookupfilterexp(result.filterlookup)
						} else
						{
							grid_lookupfilterexp([]);
						}
						if (result.lookuporder.length > 0)
						{
							grid_lookuporder(result.lookuporder)
						} else {
							grid_lookuporder([]);
						}
						if (result.header[0].recorderby_type == "ASC")
						{
							$("#reconorderby1").prop("checked", true);
						}else {
							$("#reconorderby2").prop("checked", true);
						}
						if (result.header[0].cumulative_flag == "Y") {
							$('#cumulativeflag1').attr('checked', true);
						}
						if (result.header[0].opening_flag == "Y") {
							$('#openingflag1').attr('checked', true);
						}
						if (result.header[0].group_flag == "Y") {
							$('#groupflag1').attr('checked', true);
						}
						if (result.header[0].agg_flag == "Y") {
							$('#aggflag1').attr('checked', true);
						}
					}
					if ($("#txtmode").val() == "View")
					{
						$("#grid_filter .k-grid-toolbar").hide();
						$("#grid_lookup .k-grid-toolbar").hide();
						$("#grid_lookuprecon .k-grid-toolbar").hide();
						$("#grid_lookupfilter .k-grid-toolbar").hide();
						$("#grid_lookupfield .k-grid-toolbar").hide();
						$("#grid_cumexporder .k-grid-toolbar").hide();
						$("#grid_aggexp .k-grid-toolbar").hide();
						$("#grid_preprocesscondition .k-grid-toolbar").hide();
						$("#grid_sourcefilter .k-grid-toolbar").hide();
						$("#grid_comparisionfilter .k-grid-toolbar").hide();
						$("#grid_lookuporder .k-grid-toolbar").hide();
						$("#grid_aggexplookup .k-grid-toolbar").hide();
						$("#grid_lookupfilterexp .k-grid-toolbar").hide();
					}
				 }
				 else {
					grid_filterdata([]);
					grid_lookup([]);
					grid_lookuprecon([]);
					grid_lookupfield([]);
					grid_lookupfilter([]);
					grid_cumexporder([]);
					grid_lookuporder([]);
					grid_aggexp([]);
					grid_aggexplookup([]);
					grid_expression([]);
					grid_expression1([]);
					grid_preprocesscondition([]);
					grid_sourcefilter([]);
					grid_comparisionfilter([]);
				 }
			},
		});

	}
	function reconcode() {
		//dataset combo
		var reconcode = $("#cmbreconpre1").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Preprocess/Preprocessdatasetfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmblookupdataset").empty();
				$("#cmblookupdataset").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.dataset_type == "L") {
						$("#cmblookupdataset").append($('<option>', {
							value: item.dataset_code,
							text: item.dataset_name
						}));
					}
				});
				$("#cmblookupdataset1").empty();
				$("#cmblookupdataset1").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.dataset_type == "L") {
						$("#cmblookupdataset1").append($('<option>', {
							value: item.dataset_code,
							text: item.dataset_name
						}));
					}
				});
				$("#cmblookupdataset2").empty();
				$("#cmblookupdataset2").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.dataset_type == "L") {
						$("#cmblookupdataset2").append($('<option>', {
							value: item.dataset_code,
							text: item.dataset_name
						}));
					}
				});
			}
		});
		var reconcode = $("#cmbreconpre1").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					$("#Cmbreconfield").empty();
					$("#Cmbreconfield").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#cmbgetrecon").empty();
					$("#cmbgetrecon").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#Cmbreconfieldpre1").empty();
					$("#Cmbreconfieldpre1").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$("#Cmbreconfieldpre").empty();
					$("#Cmbreconfieldpre").append($('<option>', {
						value: "",
						text: "  Select  "
					}));
					$.each(res, function (index, item) {
						$("#Cmbreconfield").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#cmbgetrecon").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#Cmbreconfieldpre1").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
					$.each(res, function (index, item) {
						$("#Cmbreconfieldpre").append($('<option>', {
							value: item.recon_field_name,
							text: item.recon_field_desc
						}).data('code', item.recon_field_type));
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	function cmbgetfunction() {
		var sourcedata = "SOURCE1";
		var codeValue = $('#cmbgetrecon').find(":selected").text();
		var in_recon_code = $("#cmbreconpre1").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					var selected = [];
					for (var i = 0; i < res.length; i++) {
						selected[i] = res[i].condition_desc;
					}
					$("#Cmbfunction").autocomplete({
						source: selected,
						minLength: 0
					}).focus(function () {
						$("#Cmbfunction").autocomplete('search', $("#Cmbfunction").val())
					});
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}
	//---- Function ----------------
		function grid_filterdata(data) {
			var join_condition_list = "";
			var filter_criteria_list = "";
			var filter_field_list = "";
			var ident_value_list = "";
			$("#grid_filter").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "filter_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocessfilter_gid: { type: "string", defaultValue: "0" },
								filter_seqno: { type: "NUMBER" },
								filter_field_code: { type: "string" },
								filter_field: { type: "string" },
								filter_criteria: { type: "string" },
								ident_criteria: { type: "string" },
								ident_value_flag: { type: "string", editable: false },
								ident_value: { type: "string" },
								ident_value_code: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 210,
				groupable: false,
				dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_filter').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					};
				},
				sortable: false,
				selectable: true,
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},

				columns: [
				{
					field: "filter_seqno",
					title: "Seq No.",
					width: 60,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,filterable: false,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
						}
					}
				},
				{
					field: "preprocessfilter_gid",
					title: "preprocessfilter_gid",
					hidden: true,
				},
				{
					field: "filter_field_code",
					title: "filter_field_code",
					hidden: true,
				},
				{
					field: "filter_field",
					title: "Filter Field",
					width: 100,
					editor: function (container, options) {
						combo_editor_man_process(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_filter")
					},
				},
				{
					field: "filter_criteria",
					title: "Filter Criteria",
					width: 100,
					editor: function (container, options) {
						combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_filter", "COMPARISON")
					},
				},
				{
					field: "ident_value_code",
					title: "ident_value_code",
					hidden: true,
				},
				{
					field: "ident_value_flag",
					title: "Value",
					width: 60,
					template: function (dataItem) {
						var isChecked = dataItem.ident_value_flag == "Y" ? 'checked' : '';
						return `
						<center>
							<label class="switch">
								<input type="checkbox" class="chkbx9" ${isChecked}>
								<span class="slider round"></span>
							</label>
						</center>`;
					},
				},
				{
					field: "ident_value",
					title: "Filter Value",
					width: 100,
					editor: function (container, options) {
						combo_editor_identifiervaluec(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "ident_value_code", "ident_value_flag", "grid_filter")
					},
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true,
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,filterable: false,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_filter")
					},
					width: 50,
				}],
				editable: true,
			});

			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
			$(function () {
				$('#grid_filter').on('click', '.chkbx3', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_filter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('open_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('open_parentheses_flag', 'N');
					}
				})
			})
			$(function () {
				$('#grid_filter').on('click', '.chkbx4', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_filter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('close_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('close_parentheses_flag', 'N');
					}
				})
			})
			$(function () {
				$('#grid_filter').on('click', '.chkbx9', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_filter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('ident_value_flag', 'Y');
					}
					else {
						dataItem._set('ident_value_flag', 'N');
					}
				})
			})
			function OnEdit(e) {
				try {
					setDefaultValues(e);
				}
				catch (err) {
					javascript_log4j_root(arguments.callee.name, err);
				}
			}
		}
		function combo_editor_identifiervaluec(container, cmbid, datasource, datafield, code_datafield, code_flag, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "ident_value") {
						if (datafield == "ident_value" && selectedItem.ident_value_input != undefined) {
							selectedItem[datafield] = selectedItem.ident_value_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
							selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						}
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man_process(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});


			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});

			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_filter_field(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.filter_field;
			} else {
				var codeValue = selectedItem.filter_field;
			}
			var in_recon_code = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulefilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "filter_criteria") {
						if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.filter_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.filter_criteria_input = undefined;
					}

				}
			});
		}

		//----lookup filter ----------
		function grid_lookupfilter(data) {
			var join_condition_list = "";
			var filter_criteria_list = "";
			var filter_field_list = "";
			var ident_value_list = "";
			$("#grid_lookupfilter").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "filter_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocessfilter_gid: { type: "string", defaultValue: "0" },
								filter_seqno: { type: "NUMBER" },
								filter_field_code: { type: "string" },
								filter_field: { type: "string" },
								filter_criteria: { type: "string" },
								ident_criteria: { type: "string" },
								ident_value_flag: { type: "string", editable: false },
								ident_value: { type: "string" },
								ident_value_code: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 210,
				groupable: false,
				dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_filter').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					};
				},
				sortable: false,
				selectable: true,
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				toolbar: "<a onclick=savefilterheader1()  href='javascript:void(0)'><span class='fa fa-plus' style='color:white'></span></a>",
				columns: [
				{
					field: "filter_seqno",
					title: "Seq No.",
					width: 60,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,filterable: false,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
						}
					}
				},
				{
					field: "preprocessfilter_gid",
					title: "preprocessfilter_gid",
					hidden: true,
				},
				{
					field: "filter_field_code",
					title: "filter_field_code",
					hidden: true,
				},
				{
					field: "filter_field",
					title: "Filter Field",
					width: 100,
					editor: function (container, options) {
						combo_editor_man_process1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_lookupfilter")
					},
				},
				{
					field: "filter_criteria",
					title: "Filter Criteria",
					width: 100,
					editor: function (container, options) {
						combo_filter_fieldl(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_lookupfilter", "COMPARISON")
					},
				},
				{
					field: "ident_value_code",
					title: "ident_value_code",
					hidden: true,
				},
				{
					field: "ident_value_flag",
					title: "Value",
					width: 60,
					template: function (dataItem) {
						var isChecked = dataItem.ident_value_flag == "Y" ? 'checked' : '';
						return `
						<center>
							<label class="switch">
								<input type="checkbox" class="chkbx9" ${isChecked}>
								<span class="slider round"></span>
							</label>
						</center>`;
					},
				},
				{
					field: "ident_value",
					title: "Filter Value",
					width: 100,
					editor: function (container, options) {
						combo_editor_identifiervaluecl(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "ident_value_code", "ident_value_flag", "grid_lookupfilter")
					},
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true,
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,filterable: false,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookupfilter")
					},
					width: 50,
				}],
				editable: true,
			});

			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
			$(function () {
				$('#grid_lookupfilter').on('click', '.chkbx3', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_lookupfilter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('open_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('open_parentheses_flag', 'N');
					}
				})
			})
			$(function () {
				$('#grid_lookupfilter').on('click', '.chkbx4', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_lookupfilter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('close_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('close_parentheses_flag', 'N');
					}
				})
			})
			$(function () {
				$('#grid_lookupfilter').on('click', '.chkbx9', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_lookupfilter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('ident_value_flag', 'Y');
					}
					else {
						dataItem._set('ident_value_flag', 'N');
					}
				})
			})
			function OnEdit(e) {
				try {
					setDefaultValues(e);
				}
				catch (err) {
					javascript_log4j_root(arguments.callee.name, err);
				}
			}
		}
		function combo_editor_identifiervaluecl(container, cmbid, datasource, datafield, code_datafield, code_flag, grid_id) {
			var arr1 = [];
			var datasetcode = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						var res = result.DataSet;
						for (i = 0; res.length > i; i++) {
							var list1 = {};
							list1.code = res[i].dataset_table_field;
							list1.desc = res[i].field_name;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "ident_value") {
						if (datafield == "ident_value" && selectedItem.ident_value_input != undefined) {
							selectedItem[datafield] = selectedItem.ident_value_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
							selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						}
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man_process1(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var datasetcode = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						var res = result.DataSet;
						for (i = 0; res.length > i; i++) {
							var list1 = {};
							list1.code = res[i].dataset_table_field;
							list1.desc = res[i].field_name;
							arr1.push(list1);
						}
					}
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_filter_fieldl(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.filter_field;
			} else {
				var codeValue = selectedItem.filter_field;
			}
			var in_recon_code = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulefilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "filter_criteria") {
						if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.filter_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.filter_criteria_input = undefined;
					}

				}
			});
		}

		//----lookup filter exp----------
		function grid_lookupfilterexp(data) {
			var join_condition_list = "";
			var filter_criteria_list = "";
			var filter_field_list = "";
			var ident_value_list = "";
			$("#grid_lookupfilterexp").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "filter_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocessfilter_gid: { type: "string", defaultValue: "0" },
								filter_seqno: { type: "NUMBER" },
								filter_field_code: { type: "string" },
								filter_field: { type: "string" },
								filter_criteria: { type: "string" },
								ident_criteria: { type: "string" },
								ident_value_flag: { type: "string", editable: false },
								ident_value: { type: "string" },
								ident_value_code: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 210,
				groupable: false,
				dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_lookupfilterexp').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					};
				},
				sortable: false,
				selectable: true,
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				columns: [
				{
					field: "filter_seqno",
					title: "Seq No.",
					width: 60,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,filterable: false,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
						}
					}
				},
				{
					field: "preprocessfilter_gid",
					title: "preprocessfilter_gid",
					hidden: true,
				},
				{
					field: "filter_field_code",
					title: "filter_field_code",
					hidden: true,
				},
				{
					field: "filter_field",
					title: "Filter Field",
					width: 100,
					editor: function (container, options) {
						combo_editor_man_process2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_lookupfilterexp")
					},
				},
				{
					field: "filter_criteria",
					title: "Filter Criteria",
					width: 100,
					editor: function (container, options) {
						combo_filter_field2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_lookupfilterexp", "COMPARISON")
					},
				},
				{
					field: "ident_value_code",
					title: "ident_value_code",
					hidden: true,
				},
				{
					field: "ident_value_flag",
					title: "Value",
					width: 60,
					template: function (dataItem) {
						var isChecked = dataItem.ident_value_flag == "Y" ? 'checked' : '';
						return `
						<center>
							<label class="switch">
								<input type="checkbox" class="chkbx9" ${isChecked}>
								<span class="slider round"></span>
							</label>
						</center>`;
					},
				},
				{
					field: "ident_value",
					title: "Filter Value",
					width: 100,
					editor: function (container, options) {
						combo_editor_identifiervaluec2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "ident_value_code", "ident_value_flag", "grid_lookupfilterexp")
					},
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true,
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,filterable: false,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookupfilterexp")
					},
					width: 50,
				}],
				editable: true,
			});

			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
			$(function () {
				$('#grid_lookupfilterexp').on('click', '.chkbx3', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_lookupfilterexp').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('open_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('open_parentheses_flag', 'N');
					}
				})
			})
			$(function () {
				$('#grid_lookupfilterexp').on('click', '.chkbx4', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_lookupfilterexp').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('close_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('close_parentheses_flag', 'N');
					}
				})
			});
			$(function () {
				$('#grid_lookupfilterexp').on('click', '.chkbx9', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_lookupfilterexp').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('ident_value_flag', 'Y');
					}
					else {
						dataItem._set('ident_value_flag', 'N');
					}
				})
			});
			function OnEdit(e) {
				try {
					setDefaultValues(e);
				}
				catch (err) {
					javascript_log4j_root(arguments.callee.name, err);
				}
			}
		}
		function combo_editor_identifiervaluec2(container, cmbid, datasource, datafield, code_datafield, code_flag, grid_id) {
			var arr1 = [];
			if($("#Cmbprocessmethod").val() == "QCD_LOOKUP_EXPRESSION"){
				var datasetcode = $("#cmblookupdataset1").val();
			} else {
				var datasetcode = $("#cmblookupdataset2").val();
			}

			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						var res = result.DataSet;
						for (i = 0; res.length > i; i++) {
							var list1 = {};
							list1.code = res[i].dataset_table_field;
							list1.desc = res[i].field_name;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "ident_value") {
						if (datafield == "ident_value" && selectedItem.ident_value_input != undefined) {
							selectedItem[datafield] = selectedItem.ident_value_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
							selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						}
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man_process2(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			if($("#Cmbprocessmethod").val() == "QCD_LOOKUP_EXPRESSION"){
				var datasetcode = $("#cmblookupdataset1").val();
			} else {
				var datasetcode = $("#cmblookupdataset2").val();
			}
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						var res = result.DataSet;
						for (i = 0; res.length > i; i++) {
							var list1 = {};
							list1.code = res[i].dataset_table_field;
							list1.desc = res[i].field_name;
							arr1.push(list1);
						}
					}
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_filter_field2(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.filter_field;
			} else {
				var codeValue = selectedItem.filter_field;
			}
			var in_recon_code = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulefilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "filter_criteria") {
						if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.filter_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.filter_criteria_input = undefined;
					}

				}
			});
		}

</script>
<script type="text/javascript">
	//-------------------------------------------------- Look up multi ----------------
		function grid_lookupfield(data) {
				var lookup_return_field_desc_list = "";
				var set_recon_field_desc_list = "";
				$("#grid_lookupfield").kendoGrid({
					dataSource: {
						data: data,
						pageSize: 5,
						sort: [{ field: "lookup_seqno", dir: "asc" }],
						schema: {
							model: {
								fields: {
									preprocesslookup_gid: { type: "string", defaultValue: "0" },
									preprocess_code: { type: "string" },
									lookup_seqno: { type: "NUMBER" },
									lookup_return_field: { type: "string", defaultValue: "" },
									lookup_return_field_desc: { type: "string", defaultValue: "" },
									set_recon_field: { type: "string", defaultValue: "" },
									set_recon_field_desc: { type: "string" },
									active_status: { type: "string" },
									active_status_desc: { type: "string" },
									reverse_update_flag: { type: "string", editable: false },
									value_flag: { type: "string", editable: false }
								}
							}
						}
					},
					height: 200,
					groupable: false,
					//dataBinding: setDefaultValues,
					edit: OnEdit,
					dataBound: function (e) {
							resultData = e.sender._data;
							var rows = $('#grid_lookupfield').data('kendoGrid').tbody.children();
							setColor(rows, resultData);
							if ($("#txtmode").val() == "View") {
								$(".k-grid-save").hide();
								$(".k-grid-delete").hide();
								$(".k-grid-add").hide();
							};
					},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				columns: [
					{
						field: "lookup_seqno",
						title: "Seq No.",
						width: 50,
						attributes: { style: "text-align: right;" },
						editor: function (container, options) {
							item_rate(container, options.field, '9', '3');
						},
					},
				{
					field: "preprocesslookup_gid",
					title: "preprocesslookup_gid",
					hidden: true,
				},
				{
					field: "lookup_return_field",
					title: "Lookup Return Field",
					width: 100,
					hidden: true,
				},
				{
					field: "set_recon_field_desc",
					title: "Update Recon Field",
					editor: function (container, options) {
						combo_editor_man_reconfield(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "set_recon_field", "grid_lookupfield",options)
					},
					editable: true,
					width: 120,
				},
				{
					field: "lookup_return_field_desc",
					title: "Lookup Return Field",
					editor: function (container, options) {
						combo_editor_man_lookupfield(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "lookup_return_field", "grid_lookupfield",options)
					},
					width: 120,
				},
				{
					field: "value_flag",
					title: "Value", width: 60,
					template: function (dataItem) {
						var isChecked = dataItem.value_flag == "Y" ? 'checked' : '';
						return `
						<center>
							<label class="switch">
								<input type="checkbox" class="chkbx11" ${isChecked}>
								<span class="slider round"></span>
							</label>
						</center>`;
					},
				},
				{
					field: "reverse_update_flag",
					title: "Reverse Update", width: 60,
					template: function (dataItem) {
						var isChecked = dataItem.reverse_update_flag == "Y" ? 'checked' : '';
						return `
						<center>
							<label class="switch">
								<input type="checkbox" class="chkbx10" ${isChecked}>
								<span class="slider round"></span>
							</label>
						</center>`;
					},
				},
				{
					field: "set_recon_field",
					title: "set_recon_field",
					hidden: true,
				},

				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "preprocess_code",
					title: "preprocess_code",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				}],
				editable: true,
			});

		}
		$(function () {
			$('#grid_lookupfield').on('click', '.chkbx10', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookupfield').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('reverse_update_flag', 'Y');
					dataItem.set('set_recon_field_desc','');
					dataItem.set('set_recon_field','');
					dataItem.set('set_recon_field_input','');
					dataItem.set('lookup_return_field_desc','');
					dataItem.set('lookup_return_field','');
					dataItem.set('lookup_return_field_input','');
				}
				else {
					dataItem._set('reverse_update_flag', 'N');
					dataItem.set('set_recon_field_desc','');
					dataItem.set('set_recon_field','');
					dataItem.set('set_recon_field_input','');
				}
			})
		});
		$(function () {
			$('#grid_lookupfield').on('click', '.chkbx11', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookupfield').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('value_flag', 'Y');
					dataItem.set('lookup_return_field_desc','');
					dataItem.set('lookup_return_field','');
					dataItem.set('lookup_return_field_input','');
				}
				else {
					dataItem._set('value_flag', 'N');
					dataItem.set('lookup_return_field_desc','');
					dataItem.set('lookup_return_field','');
					dataItem.set('lookup_return_field_input','');
				}
			})
		});
		function combo_editor_man_lookupfield(container, cmbid, datasource, datafield, code_datafield, grid_id,options) {
			var arr4 = [];
			var datasetcode = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						var res = result.DataSet;
						for (i = 0; res.length > i; i++) {
							var list1 = {};
							list1.code = res[i].dataset_table_field;
							list1.desc = res[i].field_name;
							arr4.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr4,
				change: function (e) {
					var cmb_value = this.value();
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "lookup_return_field_desc" && options.model.value_flag === "Y" && options.model.reverse_update_flag === "N" ) {
						if (datafield == "lookup_return_field_desc" && selectedItem.lookup_return_field_desc_input != undefined)
						{
							selectedItem[datafield] = selectedItem.lookup_return_field_desc_input;
						}
						else
						{
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						}
					} else {
						if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
							selectedItem[datafield] = "";
							selectedItem[code_datafield] = "";
						}
						else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
							selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

						}
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man_reconfield(container, cmbid, datasource, datafield, code_datafield, grid_id,options) {
			var arr5 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						var res = result;
						for (i = 0; res.length > i; i++) {
							var list1 = {};
							list1.code = res[i].recon_field_name;
							list1.desc = res[i].recon_field_desc;
							arr5.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr5,
				change: function (e) {
					var cmb_value = this.value();
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "set_recon_field_desc" && options.model.reverse_update_flag === "Y" ) {
						if (datafield == "set_recon_field_desc" && selectedItem.set_recon_field_desc_input != undefined)
						{
							selectedItem[datafield] = selectedItem.set_recon_field_desc_input;
						}
						else
						{
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						}
					} else {
						if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
							selectedItem[datafield] = "";
							selectedItem[code_datafield] = "";
						}
						else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
							selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

						}
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}

		//---- Look up condition ----------------
		function grid_lookup(data) {
			var source_field_desc_list = "";
			var extraction_criteria_list = "";
			var comparison_criteria_list = "";
			$("#grid_lookup").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "condition_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocesscondition_gid: { type: "string", defaultValue: "0" },
								preprocess_code: { type: "string" },
								condition_seqno: { type: "NUMBER" },
								source_field_code: { type: "string", defaultValue: "" },
								source_field_desc: { type: "string", defaultValue: "" },
								comparison_field: { type: "string", defaultValue: "" },
								comparison_field_desc: { type: "string" },
								extraction_criteria: { type: "string" },
								extraction_criteria_code: { type: "string" },
								comparison_criteria: { type: "string" },
								comparison_criteria_code: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 200,
				groupable: false,
				//dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_lookup').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					};
				},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				columns: [
				{
					field: "condition_seqno",
					title: "Seq No.",
					width: 70,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,filterable: false,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						}
					}
				},
				{
					field: "preprocesscondition_gid",
					title: "preprocesscondition_gid",
					hidden: true,
				},
				{
					field: "source_field_code",
					title: "Recon Field",
					width: 100,
					hidden: true,
				},
				{
					field: "source_field_desc",
					title: "Recon Field",
					editor: function (container, options) {
						combo_editor_man_lookup(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_lookup")
					},
					width: 120,
				},
				{
					field: "extraction_criteria_code",
					title: "Extraction Criteria",
					hidden: true,
				},
				{
					field: "extraction_criteria",
					title: "Extraction Criteria",
					editor: function (container, options) {
						combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_lookup", "SOURCE")
					},
					editable: true,
					width: 120,
				},
				{
					field: "comparison_field",
					title: "comparison_field",
					width: 100,
					hidden: true,
				},
				{
					field: "comparison_field_desc",
					title: "Lookup Field",
					editor: function (container, options) {
						combo_editor_man_lookup1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_lookup")
					},
					width: 120,
				},
				{
					field: "comparison_criteria_code",
					title: "comparison_criteria_code",
					hidden: true,
				},
				{
					field: "comparison_criteria",
					title: "Comparison Criteria",
					editor: function (container, options) {
						combo_editor_man2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_lookup", "COMPARISON")
					},
					width: 120,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,filterable: false,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookup")
					},
					width: 60,
				}],
				editable: true,
			});
			source_field_desc_list = "";
			comparison_field_desc_list = "";
			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
		}
		$(function () {
			$('#grid_lookup').on('click', '.chkbx1', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookup').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('open_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('open_parentheses_flag', 'N');
				}
			})
		})
		$(function () {
			$('#grid_lookup').on('click', '.chkbx2', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookup').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('close_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('close_parentheses_flag', 'N');
				}
			})
		})
		function OnEdit(e) {
			try {
				setDefaultValues(e);
				//e.container.find("input[name='source_field_desc']").change(function () {
				//	e.model.extraction_criteria = "";
				//	$("#extraction_criteria_list").val("");
				// });

			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}

		function color() {
			$("#grid_lookup").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
		}
		function combo_editor_man_lookup(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

					}
				}
			});

			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man_lookup1(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var datasetcode = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.DataSet.length > i; i++) {
							var list1 = {};
							list1.code = result.DataSet[i].dataset_table_field;
							list1.desc = result.DataSet[i].field_name;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});

			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.source_field_desc;
			} else {
				var codeValue = selectedItem.source_field_desc;
			}
			var in_recon_code = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulefilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "extraction_criteria") {
						if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.extraction_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.extraction_criteria_input = undefined;
					}

				}
			});
		}
		function combo_editor_man2(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.source_field_desc;
			} else {
				var codeValue = selectedItem.comparison_field_desc;
			}
			var in_dataset_code = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Preprocess/lookupfilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_dataset_code: in_dataset_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "extraction_criteria") {
						if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.extraction_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.extraction_criteria_input = undefined;
					}
					if (datafield == "comparison_criteria") {
						if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.comparison_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.comparison_criteria_input = undefined;
					}
				},
			});
		}
		//---- Look up filter ----------------
		function grid_lookuprecon(data) {
			var source_field_desc_list = "";
			var extraction_criteria_list = "";
			var comparison_criteria_list = "";
			$("#grid_lookuprecon").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "condition_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocesscondition_gid: { type: "string", defaultValue: "0" },
								preprocess_code: { type: "string" },
								condition_seqno: { type: "NUMBER" },
								source_field_code: { type: "string", defaultValue: "" },
								source_field_desc: { type: "string", defaultValue: "" },
								comparison_field: { type: "string", defaultValue: "" },
								comparison_field_desc: { type: "string" },
								extraction_criteria: { type: "string" },
								extraction_criteria_code: { type: "string" },
								comparison_criteria: { type: "string" },
								comparison_criteria_code: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 200,
				groupable: false,
				//dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_lookuprecon').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					};
				},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				columns: [
				{
					field: "condition_seqno",
					title: "Seq No.",
					width: 70,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,filterable: false,
					//template: '#=sel_checkbox(data)#'
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						}
					}
				},
				{
					field: "preprocesscondition_gid",
					title: "preprocesscondition_gid",
					hidden: true,
				},
				{
					field: "comparison_field_desc",
					title: "Lookup Field",
					editor: function (container, options) {
						combo_editor_man_lookup1new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_lookuprecon")
					},
					width: 120,
				},
				{
					field: "extraction_criteria_code",
					title: "Extraction Criteria",
					hidden: true,
				},
				{
					field: "extraction_criteria",
					title: "Extraction Criteria",
					editor: function (container, options) {
						combo_editor_man1new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_lookuprecon", "SOURCE")
					},
					editable: true,
					width: 120,
				},
				{
					field: "source_field_code",
					title: "Recon Field",
					width: 100,
					hidden: true,
				},
				{
					field: "source_field_desc",
					title: "Recon Field",
					editor: function (container, options) {
						combo_editor_man_lookupnew(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_lookuprecon")
					},
					width: 120,
				},
				{
					field: "comparison_criteria_code",
					title: "comparison_criteria_code",
					hidden: true,
				},
				{
					field: "comparison_criteria",
					title: "Comparison Criteria",
					editor: function (container, options) {
						combo_editor_mannew(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_lookuprecon", "COMPARISON")
					},
					width: 120,
				},

				{
					field: "comparison_field",
					title: "comparison_field",
					width: 100,
					hidden: true,
				},

				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,filterable: false,
					//template: '#=sel_checkbox1(data)#'
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						}
					},
				},
				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_lookuprecon")
					},
					width: 60,
				}],
				editable: true,
			});
			source_field_desc_list = "";
			comparison_field_desc_list = "";
			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
		}
		$(function () {
			$('#grid_lookuprecon').on('click', '.chkbx1', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookuprecon').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('open_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('open_parentheses_flag', 'N');
				}
			})
		})
		$(function () {
			$('#grid_lookuprecon').on('click', '.chkbx2', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_lookuprecon').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('close_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('close_parentheses_flag', 'N');
				}
			})
		})
		function OnEdit(e) {
			try {
				setDefaultValues(e);
			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
		function addRowrecon() {
			var grid = $("#grid_lookuprecon").data("kendoGrid");
			var dataSource = grid.dataSource;
			var max = 0;
			// Get the last sequence number and increment it
			var lastSeqNo = grid.dataSource._data.length;
			for (var i = 0; i < grid.dataSource._data.length; i++) {
				if (grid.dataSource._data[i].condition_seqno > max) {
					max = grid.dataSource._data[i].condition_seqno;
				}
			}
			var newSeqNo = parseInt(max) + 1;
			// Add a new row with the incremented sequence number
			dataSource.add({ condition_seqno: newSeqNo, preprocesscondition_gid: 0, open_parentheses_flag: "N", close_parentheses_flag: "N" });
			var lastRow = grid.tbody.children().last();
			grid.content.scrollTop(lastRow.position().top);
		}
		function color() {
			$("#grid_lookuprecon").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
		}
		function combo_editor_man_lookupnew(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

					}
				}
			});

			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man_lookup1new(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var datasetcode = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.DataSet.length > i; i++) {
							var list1 = {};
							list1.code = result.DataSet[i].dataset_table_field;
							list1.desc = result.DataSet[i].field_name;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});

			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_man1new(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.source_field_desc;
			} else {
				var codeValue = selectedItem.source_field_desc;
			}
			var in_recon_code = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulefilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "extraction_criteria") {
						if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.extraction_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.extraction_criteria_input = undefined;
					}

				}
			});
		}
		function combo_editor_mannew(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.source_field_desc;
			} else {
				var codeValue = selectedItem.comparison_field_desc;
			}
			var in_dataset_code = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Preprocess/lookupfilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_dataset_code: in_dataset_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "extraction_criteria") {
						if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.extraction_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.extraction_criteria_input = undefined;
					}
					if (datafield == "comparison_criteria") {
						if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.comparison_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.comparison_criteria_input = undefined;
					}
				},
			});
		}


		function lookupchange() {
			var datasetcode = $("#cmblookupdataset").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						$("#Cmblookupdatasetfield").empty();
						$("#Cmblookupdatasetfield").append($('<option>', {
							value: "",
							text: "  Select  "
						}));
						$.each(result.DataSet, function (index, item) {
							$("#Cmblookupdatasetfield").append($('<option>', {
								value: item.dataset_table_field,
								text: item.field_name
							}));
						});
					}
					else {
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		function lookupchange1() {
			var datasetcode = $("#cmblookupdataset2").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Recon/Datasetfieldlist',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						$("#Cmblookupdatasetfield1").empty();
						$("#Cmblookupdatasetfield1").append($('<option>', {
							value: "",
							text: "  Select  "
						}));
						$.each(result.DataSet, function (index, item) {
							$("#Cmblookupdatasetfield1").append($('<option>', {
								value: item.dataset_table_field,
								text: item.field_name
							}));
						});
					}
					else {
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}

			});
		}
		function validatequery1() {
			var in_sql = $("#querydata").val();
			var index = in_sql.toLowerCase().indexOf("where");
			if (index !== -1) {
				in_sql = in_sql + "  and 1=2"
			} else {
				in_sql = in_sql + "  where 1=2"
			}
			var in_action_by = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Preprocess/validatequery',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_sql: in_sql, in_action_by: in_action_by }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != "[]") {
						var result = JSON.parse(response);
						var data = result[0];
						if (data.out_result == "1") {
							$.alert({
								title: 'Recon',
								content: data.out_msg,
								type: 'green',
							});
							$("#validquery").val("true");
						} else {
							$.alert({
								title: 'Recon',
								content: data.out_msg,
								type: 'red',
							});
						}
					} else {
						$.alert({
							title: 'Recon',
							content: "failed",
							type: 'red',
						});
						$("#validquery").val("false");
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		}
		function lookupflagjs() {
			var checkbox = document.getElementById("lookupflag");
			if (checkbox.checked) {
				$("#lookupgrid").show();
				$("#Cmblookupdatasetfield").prop('disabled', true);
				$("#Cmbreconfield1").prop('disabled', true);
				$("#luprfield").hide();
				$("#uprfield").hide();
				$("#rflag").hide();
			} else {
				$("#lookupgrid").hide();
				$("#Cmblookupdatasetfield").prop('disabled', false);
				$("#Cmbreconfield1").prop('disabled', false);
				$("#luprfield").show();
				$("#uprfield").show();
				$("#rflag").show();
			}
		}
		function grid_cumexporder(data) {
			var recorder_field_list = "";
			$("#grid_cumexporder").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "recorder_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocessrecorder_gid: { type: "string", defaultValue: "0" },
								preprocess_code: { type: "string" },
								recorder_seqno: { type: "string" },
								recorder_field: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" }
							}
						}
					}
				},

				height: 185,
				groupable: false,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_cumexporder').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					}
				},
				sortable: false,
				selectable: true,
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				columns: [
				{
					field: "preprocessrecorder_gid",
					title: "preprocessrecorder_gid",
					hidden: true,
				},
				{
					field: "preprocess_code",
					title: "preprocess_code",
					width: 100,
					hidden: true,
				},
				{
					field: "recorder_field_code",
					title: "recorder_code",
					width: 100,
					hidden: true,
				},
				{
					field: "recorder_seqno",
					title: "Order Seq No.",
					width: 30,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "recorder_field",
					title: "Recon Field",
					width: 100,
					editor: function (container, options) {
						combo_editor_manreorder(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "recorder_field_code", "grid_cumexporder")
					},
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				}],
				editable: true,

			});
		}

		function combo_editor_manreorder(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
							}
						}
					}
				});
			 $('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});

			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}

		function grid_aggexp(data) {
			var grp_field_list = "";
			$("#grid_aggexp").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "grpfield_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocessgrpfield_gid: { type: "string", defaultValue: "0" },
								preprocess_code: { type: "string" },
								grpfield_seqno: { type: "string" },
								grp_field: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" }
							}
						}
					}
				},

				height: 185,
				groupable: false,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_aggexp').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					}
				},
				sortable: false,
				selectable: true,
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				columns: [
				{
					field: "preprocessgrpfield_gid",
					title: "preprocessgrpfield_gid",
					hidden: true,
				},
				{
					field: "preprocess_code",
					title: "preprocess_code",
					width: 100,
					hidden: true,
				},
				{
					field: "grp_field_code",
					title: "recorder_code",
					width: 100,
					hidden: true,
				},
				{
					field: "grpfield_seqno",
					title: "Group Field Seq No.",
					width: 30,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "grp_field",
					title: "Group Field",
					width: 100,
					editor: function (container, options) {
						combo_editor_managgexp(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "grp_field_code", "grid_aggexp")
					},
				},

				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				}],
				editable: true,

			});
		}

		function combo_editor_managgexp(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}

		//-----------------------------------------------------   preprocess condition  ----------------------------------------------------------------
		function grid_preprocesscondition(data) {
			var source_field_desc_list = "";
			var extraction_criteria_list = "";
			var comparison_criteria_list = "";
			$("#grid_preprocesscondition").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "condition_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocesscondition_gid: { type: "string", defaultValue: "0" },
								condition_seqno: { type: "string", defaultValue: 0 },
								preprocess_code: { type: "string" },
								source_field_code: { type: "string", defaultValue: "" },
								source_field_desc: { type: "string", defaultValue: "" },
								comparison_field: { type: "string", defaultValue: "" },
								comparison_field_desc: { type: "string" },
								extraction_criteria: { type: "string" },
								extraction_criteria_code: { type: "string" },
								comparison_criteria: { type: "string" },
								comparison_criteria_code: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
								join_condition: { type: "string" },
							}
						}
					}
				},
				height: 185,
				groupable: false,
				//dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_preprocesscondition').data('kendoGrid').tbody.children();
					setColor(rows, resultData);

					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
						$(".k-grid-delete").hide();
						$(".k-grid-add").hide();
					}
				},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				resizable: true,
				pageable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},
				columns: [
				{
					field: "condition_seqno",
					title: "Seq No.",
					width: 80,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,filterable: false,
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx1">';
						}
					}
				},
				{
					field: "preprocesscondition_gid",
					title: "preprocesscondition_gid",
					hidden: true,
				},
				{
					field: "source_field_code",
					title: "Source Field",
					width: 100,
					hidden: true,
				},
				{
					field: "source_field_desc",
					title: "Source Field",
					editor: function (container, options) {
						//combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_preprocesscondition")
						combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "source_field_code", "grid_preprocesscondition","SOURCE")
					},
					width: 120,
				},
				{
					field: "extraction_criteria_code",
					title: "Extraction Criteria",
					hidden: true,
				},
				{
					field: "extraction_criteria",
					title: "Extraction Criteria",
					editor: function (container, options) {
						combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "extraction_criteria", "grid_preprocesscondition", "SOURCE")
					},
					editable: true,
					width: 170,
				},
				{
					field: "comparison_field",
					title: "comparison_field",
					width: 100,
					hidden: true,
				},
				{
					field: "comparison_field_desc",
					title: "Comparison Field",
					editor: function (container, options) {
						//combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_preprocesscondition")
					combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_preprocesscondition","Comparison")
					},
					width: 120,
				},
				{
					field: "comparison_criteria_code",
					title: "comparison_criteria_code",
					hidden: true,
				},
				{
					field: "comparison_criteria",
					title: "Comparison Criteria",
					editor: function (container, options) {
						combo_editor_man1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_criteria", "grid_preprocesscondition", "COMPARISON")
					},
					width: 170,
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,filterable: false,
					template: function (dataItem) {
						if (dataItem.preprocesscondition_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx2">';
						}
					},
				},

				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_preprocesscondition")
					},
					width: 60,
				}],
				editable: true,
			});
			//source_field_desc_list = cmbsourcefield();
			//comparison_field_desc_list = cmbsourcefield();
			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];
		}
		function OnEdit(e) {
			try {
				setDefaultValues(e);
			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
		function color() {
			$("#grid_preprocesscondition").data("kendoGrid").dataItem($(event.target).closest("tr")).css('backgroundColor', '#ff3333');
		}
		function combo_editor_man1(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {

			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "SOURCE") {
				var codeValue = selectedItem.source_field_desc;
			} else {
				var codeValue = selectedItem.comparison_field_desc;
			}
			var in_recon_code = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulefilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "extraction_criteria") {
						if (datafield == "extraction_criteria" && selectedItem.extraction_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.extraction_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.extraction_criteria_input = undefined;
					}
					if (datafield == "comparison_criteria") {
						if (datafield == "comparison_criteria" && selectedItem.comparison_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.comparison_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.comparison_criteria_input = undefined;
					}
				},
			});
		}
		function cmbsourcefield() {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});
			return arr1;
		}
		function combo_editor_new(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
				var arr = [];
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var sourcedata = Sdata;
					if (Sdata == "SOURCE") {
						var dataset_code = $("#sourcedataset").val();
				} else {
						var dataset_code = $("#comdataset").val();
				}
				var in_recon_code = $("#cmbrecon").val();
				var in_user_code = sessionStorage.getItem("usrname");
				$.ajax({
				type: "POST",
				url: '../Rulesetup/getdatasetField',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_dataset_code: dataset_code, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
				if (response != null) {
				var res = JSON.parse(response);
				for (i = 0; res.length > i; i++) {
					var list = {};
					list.code = res[i].recon_field_name;
					list.desc = res[i].recon_field_desc;
					arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					}
				});
				$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
			  if(datafield == "filter_value")
			  {
				var combo = $("#" + cmbid).data("kendoComboBox");
				combo.input.attr("readonly", true); // stop typing
			  }
		}

		$(function () {
			$('#grid_preprocesscondition').on('click', '.chkbx1', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_preprocesscondition').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('open_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('open_parentheses_flag', 'N');
				}
			})
		})
		$(function () {
			$('#grid_preprocesscondition').on('click', '.chkbx2', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_preprocesscondition').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('close_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('close_parentheses_flag', 'N');
				}
			})
		});

		//-----------------------------------------------------   preprocess condition  ----------------------------------------------------------------
		//-----------------------------------------------------  sourcefilter ----------------------------------------------------------------
		function grid_sourcefilter(data) {
			try {
				var join_condition_list = "";
				var filter_field_list = "";
				var filter_criteria_list = "";
				var filter_value_list = "";
				$("#grid_sourcefilter").kendoGrid({
					dataSource: {
						data: data,
						pageSize: 5,
						sort: [{ field: "filter_seqno", dir: "asc" }],
						schema: {
							model: {
								fields: {
									preprocessfilter_gid: { type: "string", defaultValue: "0" },
									preprocess_code: { type: "string" },
									filter_field_code: { type: "string", defaultValue: "" },
									filter_field: { type: "string" },
									filter_criteria: { type: "string", defaultValue: "" },
									filter_seqno: { type: "string", defaultValue: 0 },
									filter_value_flag: { type: "string" },
									filter_value: { type: "string", defaultValue: "" },
									filter_value_code: { type: "string", defaultValue: "" },
									active_status: { type: "string" },
									active_status_desc: { type: "string" },
									join_condition: { type: "string", defaultValue: "" },
									open_parentheses_flag: { type: "string", editable: false },
									close_parentheses_flag: { type: "string", editable: false },
								}
							}
						}
					},
					height: 185,
					groupable: false,
					dataBinding: setDefaultValues,
					edit: OnEdit,
					dataBound: function (e) {
						resultData = e.sender._data;
						var rows = $('#grid_sourcefilter').data('kendoGrid').tbody.children();
						setColor(rows, resultData);
						if ($("#txtmode").val() == "View") {
							$(".k-grid-save").hide();
						};

					},
					sortable: false,
					selectable: "row",
					filterable: false,
					navigatable: true,
					resizable: true,
					pageable: true,
					pageable: {
						refresh: false,
						pageSizes: true,
						buttonCount: 5
					},
					columns: [
					{
						field: "filter_seqno",
						title: "Seq No.",
						width: 60,
						attributes: { style: "text-align: right;" },
						editor: function (container, options) {
							item_rate(container, options.field, '9', '3');
						},
					},
					{
						field: "open_parentheses_flag",
						title: "(", width: 20,
						template: function (dataItem) {
							if (dataItem.preprocessfilter_gid > 0) {
								return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
							} else {
								return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx3">';
							}
						}
					},
					{
						field: "preprocessfilter_gid",
						title: "preprocessfilter_gid",
						hidden: true,
					},
					{
						field: "preprocess_code",
						title: "preprocess_code",
						width: 100,
						hidden: true,
					},

					{
						field: "filter_field_code",
						title: "filter_field_code",
						width: 100,
						hidden: true,
					},
					{
						field: "filter_field",
						title: "Filter Field",
						width: 100,
						editor: function (container, options) {
							//combo_editor_man_theme(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_sourcefilter")
							combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_sourcefilter","SOURCE")
						},
					},
					{
						field: "filter_criteria",
						title: "Filter Criteria",
						width: 100,
						editor: function (container, options) {
							combo_filter_field(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_sourcefilter", "COMPARISON")
						},
					},
					{
						field: "filter_value_code",
						title: "filter_value_code",
						hidden: true,
						width:50
					},
					{
						field: "filter_value_flag",
						title: "Value",
						width: 60,
						template: function (dataItem) {
							var isChecked = dataItem.filter_value_flag == "Y" ? 'checked' : '';
							return `
							<center>
								<label class="switch">
									<input type="checkbox" class="chkbx9" ${isChecked}>
									<span class="slider round"></span>
								</label>
							</center>`;
						},
						width: 50,
					},
					{
						field: "filter_value",
						title: "Filter Value",
						width: 100,
						editor: function (container, options) {
							//combo_editor_filtervalues(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_value_code", "filter_value_flag", "grid_sourcefilter")
							//combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_value_code", "grid_sourcefilter","SOURCE")
							if (options.model.filter_value_flag === "Y") {

								$('<input name="' + options.field + '" class="k-input k-textbox" />')
								.appendTo(container);
							} else {
							combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_value_code", "grid_sourcefilter","SOURCE")
							}
						},
					},
					{
						field: "active_status",
						title: "Status",
						hidden: true
					},
					{
						field: "active_status_desc",
						title: "Status",
						width: 80,
						hidden: true
					},
					{
						field: "close_parentheses_flag",
						title: ")", width: 20,
						template: function (dataItem) {
							if (dataItem.preprocessfilter_gid > 0) {
								return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
							} else {
								return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx4">';
							}
						},
					},

					{
						field: "join_condition",
						title: "Joins",
						editor: function (container, options) {
							combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_sourcefilter")
						},
						width: 40,
					}],
					editable: true,
				});
				join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}

			function OnEdit(e) {
				try {
					setDefaultValues(e);

				}
				catch (err) {
					javascript_log4j_root(arguments.callee.name, err);
				}
			}
			$(function () {

				$('#grid_sourcefilter').on('click', '.chkbx3', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_sourcefilter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('open_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('open_parentheses_flag', 'N');
					}
				});
			});
			$(function () {

				$('#grid_sourcefilter').on('click', '.chkbx4', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_sourcefilter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('close_parentheses_flag', 'Y');
					}
					else {
						dataItem._set('close_parentheses_flag', 'N');
					}
				});
			});
			$(function () {
				debugger;
				$('#grid_sourcefilter').on('click', '.chkbx9', function () {
					var checked = $(this).is(':checked');
					var grid = $('#grid_sourcefilter').data().kendoGrid;
					var dataItem = grid.dataItem($(this).closest('tr'));
					var row = $(this).closest('tr');
					if (checked == true) {
						dataItem._set('filter_value_flag', 'Y');
						dataItem._set('filter_value', '');
						dataItem._set('filter_value_code', '');
						var uid = dataItem.uid; // store the edited dataItem UID before refresh
							grid.refresh();
							setTimeout(function() {
								var editedRow = grid.table.find("tr[data-uid='" + uid + "']");
								grid.select(editedRow);
								grid.content.scrollTop(editedRow.position().top);
							}, 100);
					}
					else {
							dataItem._set('filter_value_flag', 'N');
							dataItem._set('filter_value', '');
							dataItem._set('filter_value_code', '');
							var uid = dataItem.uid; // store the edited dataItem UID before refresh
							grid.refresh();
							setTimeout(function() {
								var editedRow = grid.table.find("tr[data-uid='" + uid + "']");
								grid.select(editedRow);
								grid.content.scrollTop(editedRow.position().top);
							}, 100);
						}
				 });
			});
		}
		function combo_filter_field(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
			var arr = [];
			var cmb_var = $("#" + grid_id).data("kendoGrid");
			var selectedItem = cmb_var.dataItem(cmb_var.select());
			var sourcedata = Sdata;
			if (sourcedata == "COMPARISON") {
				var codeValue = selectedItem.filter_field;
			} else {
				var codeValue = selectedItem.filter_field;
			}
			var in_recon_code = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/rulefilterfetch',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var res = JSON.parse(response);
						for (i = 0; res.length > i; i++) {
							var list = {};
							list.code = res[i].condition_desc;
							list.desc = res[i].condition_desc;
							arr.push(list);
						}
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});

			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr,
				change: function (e) {
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "filter_criteria") {
						if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.filter_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.filter_criteria_input = undefined;
					}
					if (datafield == "ident_criteria") {
						if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
							selectedItem[datafield] = selectedItem.ident_criteria_input;
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						}
						selectedItem.ident_criteria_input = undefined;
					}
				}
			});
		}
		function combo_editor_man_theme(container, cmbid, datasource, datafield, code_datafield, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
						selectedItem[datafield] = "";
						selectedItem[code_datafield] = "";
					}
					else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
		function combo_editor_filtervalues(container, cmbid, datasource, datafield, code_datafield, code_flag, grid_id) {
			var arr1 = [];
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
					if (response != null) {
						var result = JSON.parse(response);
						for (i = 0; result.length > i; i++) {
							var list1 = {};
							list1.code = result[i].recon_field_name;
							list1.desc = result[i].recon_field_desc;
							arr1.push(list1);
						}
					}
				}
			});
			$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
				autoBind: false,
				filter: "contains",
				dataSource: arr1,
				change: function (e) {
					var cmb_value = this.value();
					if (cmb_value && this.selectedIndex == -1) {
						this.value("");
					}
					//else{FF
					var cmb_var = $("#" + grid_id).data("kendoGrid");
					var selectedItem = cmb_var.dataItem(cmb_var.select());
					var combobox_data = $("#" + cmbid).data("kendoComboBox");
					if (datafield == "filter_value") {
						if (datafield == "filter_value" && selectedItem.filter_value_input != undefined) {
							selectedItem[datafield] = selectedItem.filter_value_input;
							selectedItem[code_flag] = 'Y';
						} else {
							selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
							selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
							selectedItem[code_flag] = 'N';
						}
					}
				}
			});
			$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
		}
</script>
<script type="text/javascript">

	//-----------------------------------------------------  sourcefilter ----------------------------------------------------------------
	//-----------------------------------------------------  comparisionfilter ----------------------------------------------------------------
	function grid_comparisionfilter(data) {
		try {
			var join_condition_list = "";
			var filter_field_list = "";
			var filter_criteria_list = "";
			var filter_value_list = "";
			$("#grid_comparisionfilter").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 5,
					sort: [{ field: "filter_seqno", dir: "asc" }],
					schema: {
						model: {
							fields: {
								preprocessfilter_gid: { type: "string", defaultValue: "0" },
								preprocess_code: { type: "string" },
								filter_field_code: { type: "string", defaultValue: "" },
								filter_field: { type: "string" },
								filter_criteria: { type: "string", defaultValue: "" },
								filter_seqno: { type: "string", defaultValue: 0 },
								filter_value: { type: "string" },
								filter_value_flag: { type: "string" , editable: false},
								filter_value_code: { type: "string" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								join_condition: { type: "string", defaultValue: "" },
								open_parentheses_flag: { type: "string", editable: false },
								close_parentheses_flag: { type: "string", editable: false },
							}
						}
					}
				},
				height: 185,
				groupable: false,
				dataBinding: setDefaultValues,
				edit: OnEdit,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_comparisionfilter').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					if ($("#txtmode").val() == "View") {
						$(".k-grid-save").hide();
					};

				},
				sortable: false,
				selectable: "row",
				filterable: false,
				navigatable: true,
				pageable: true,
				resizable: true,
				pageable: {
					refresh: false,
					pageSizes: true,
					buttonCount: 5
				},

				columns: [
				{
					field: "filter_seqno",
					title: "Seq No.",
					width: 60,
					attributes: { style: "text-align: right;" },
					editor: function (container, options) {
						item_rate(container, options.field, '9', '3');
					},
				},
				{
					field: "open_parentheses_flag",
					title: "(", width: 20,
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx5">';
						} else {
							return '<input type="checkbox" ' + (dataItem.open_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx5">';
						}
					}
				},
				{
					field: "preprocessfilter_gid",
					title: "preprocessfilter_gid",
					hidden: true,
				},
				{
					field: "preprocess_code",
					title: "preprocess_code",
					width: 100,
					hidden: true,
				},

				{
					field: "filter_field_code",
					title: "filter_field_code",
					width: 100,
					hidden: true,
				},
				{
					field: "filter_field",
					title: "Filter Field",
					width: 100,
					editor: function (container, options) {
						//combo_editor_man_comparision(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_comparisionfilter")
						combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_field_code", "grid_comparisionfilter","COMPARISON")
					},
				},
				{
					field: "filter_criteria",
					title: "Filter Criteria",
					width: 100,
					editor: function (container, options) {
						combo_filter_field2(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_criteria", "grid_comparisionfilter", "COMPARISON")
					},
				},
				{
					field: "filter_value_code",
					title: "filter_value_code",
					hidden: true,
				},
				{
					field: "filter_value_flag",
					title: "Value",
					template: function (dataItem) {
						var isChecked = dataItem.filter_value_flag == "Y" ? 'checked' : '';
						return `
						<center>
							<label class="switch">
								<input type="checkbox" class="chkbx9" ${isChecked}>
								<span class="slider round"></span>
							</label>
						</center>`;
					},
					width: 50,
				},
				{
					field: "filter_value",
					title: "Filter Value",
					width: 100,
					editor: function (container, options) {
						//combo_editor_filtervaluec(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_value_code", "filter_value_flag", "grid_comparisionfilter")

						if (options.model.filter_value_flag === "Y") {

							$('<input name="' + options.field + '" class="k-input k-textbox" />')
							.appendTo(container);
						} else {
						combo_editor_new(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "filter_value_code", "grid_comparisionfilter","COMPARISON")
						}
					},
				},
				{
					field: "active_status",
					title: "Status",
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					hidden: true
				},
				{
					field: "close_parentheses_flag",
					title: ")", width: 20,
					template: function (dataItem) {
						if (dataItem.preprocessfilter_gid > 0) {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx6">';
						} else {
							return '<input type="checkbox" ' + (dataItem.close_parentheses_flag == "Y" ? 'checked="checked"' : '') + ' class="chkbx6">';
						}
					},
				},

				{
					field: "join_condition",
					title: "Joins",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "join_condition", "grid_comparisionfilter")
					},
					width: 40,
				}],
				editable: true,
			});
			join_condition_list = [{ code: '', desc: '' }, { code: 'AND', desc: 'AND' }, { code: 'OR', desc: 'OR' }];

		}
		catch (err) {
			javascript_log4j_root(arguments.callee.name, err);
		}

		function OnEdit(e) {
			try {
				setDefaultValues(e);

			}
			catch (err) {
				javascript_log4j_root(arguments.callee.name, err);
			}
		}
		$(function () {
			$('#grid_comparisionfilter').on('click', '.chkbx5', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_comparisionfilter').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('open_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('open_parentheses_flag', 'N');
				}
			})
		})
		$(function () {
			$('#grid_comparisionfilter').on('click', '.chkbx6', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_comparisionfilter').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('close_parentheses_flag', 'Y');
				}
				else {
					dataItem._set('close_parentheses_flag', 'N');
				}
			})
		})
		$(function () {
			debugger;
			$('#grid_comparisionfilter').on('click', '.chkbx9', function () {
				var checked = $(this).is(':checked');
				var grid = $('#grid_comparisionfilter').data().kendoGrid;
				var dataItem = grid.dataItem($(this).closest('tr'));
				var row = $(this).closest('tr');
				if (checked == true) {
					dataItem._set('filter_value_flag', 'Y');
					dataItem._set('filter_value', '');
					dataItem._set('filter_value_code', '');
					var uid = dataItem.uid; // store the edited dataItem UID before refresh
						grid.refresh();
						setTimeout(function() {
							var editedRow = grid.table.find("tr[data-uid='" + uid + "']");
							grid.select(editedRow);
							grid.content.scrollTop(editedRow.position().top);
						}, 100);
				}
				else {
					dataItem._set('filter_value_flag', 'N');
					dataItem._set('filter_value', '');
					dataItem._set('filter_value_code', '');
					var uid = dataItem.uid; // store the edited dataItem UID before refresh
						grid.refresh();
						setTimeout(function() {
							var editedRow = grid.table.find("tr[data-uid='" + uid + "']");
							grid.select(editedRow);
							grid.content.scrollTop(editedRow.position().top);
						}, 100);
				}
			});
		});
	}
	function combo_filter_field2(container, cmbid, datasource, datafield, code_datafield, grid_id, Sdata) {
		var arr = [];
		var cmb_var = $("#" + grid_id).data("kendoGrid");
		var selectedItem = cmb_var.dataItem(cmb_var.select());
		var sourcedata = Sdata;
		if (sourcedata == "COMPARISON") {
			var codeValue = selectedItem.filter_field;
		} else {
			var codeValue = selectedItem.filter_field;
		}
		var in_recon_code = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/rulefilterfetch',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_condition_type: sourcedata, in_field_type: codeValue, in_recon_code: in_recon_code, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var res = JSON.parse(response);
					for (i = 0; res.length > i; i++) {
						var list = {};
						list.code = res[i].condition_desc;
						list.desc = res[i].condition_desc;
						arr.push(list);
					}
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});

		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr,
			change: function (e) {
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_criteria") {
					if (datafield == "filter_criteria" && selectedItem.filter_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.filter_criteria_input = undefined;
				}
				if (datafield == "ident_criteria") {
					if (datafield == "ident_criteria" && selectedItem.ident_criteria_input != undefined) {
						selectedItem[datafield] = selectedItem.ident_criteria_input;
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					}
					selectedItem.ident_criteria_input = undefined;
				}
			}
		});
	}
	function combo_editor_man_comparision(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function combo_editor_filtervaluec(container, cmbid, datasource, datafield, code_datafield, code_flag, grid_id) {
		var arr1 = [];
		var reconcode = $("#cmbrecon").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Rulesetup/FieldAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (datafield == "filter_value") {
					if (datafield == "filter_value" && selectedItem.filter_value_input != undefined) {
						selectedItem[datafield] = selectedItem.filter_value_input;
						selectedItem[code_flag] = 'Y';
					} else {
						selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
						selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
						selectedItem[code_flag] = 'N';
					}
				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	//-----------------------------------------------------  comparisionfilter ----------------------------------------------------------------
	//-----------------------------------------------------  lookup export agg ----------------------------------------------------------------
	function grid_aggexplookup(data) {
		var grp_field_list = "";
		$("#grid_aggexplookup").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "grpfield_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocessgrpfield_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							grpfield_seqno: { type: "string" },
							grp_field: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_aggexplookup').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			columns: [
			{
				field: "preprocessgrpfield_gid",
				title: "preprocessgrpfield_gid",
				hidden: true,
			},
			{
				field: "preprocess_code",
				title: "preprocess_code",
				width: 100,
				hidden: true,
			},
			{
				field: "grp_field_code",
				title: "recorder_code",
				width: 100,
				hidden: true,
			},
			{
				field: "grpfield_seqno",
				title: "Group Field Seq No.",
				width: 30,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '3');
				},
			},
			{
				field: "grp_field",
				title: "Group Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_managgexp1(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "grp_field_code", "grid_aggexplookup")
				},
			},

			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,

		});
	}
	function combo_editor_managgexp1(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var datasetcode = $("#cmblookupdataset2").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.DataSet.length > i; i++) {
						var list1 = {};
						list1.code = result.DataSet[i].dataset_table_field;
						list1.desc = result.DataSet[i].field_name;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

				}
			}
		});
		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function grid_lookuporder(data) {
		var recorder_field_list = "";
		$("#grid_lookuporder").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "recorder_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocessrecorder_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							recorder_seqno: { type: "string" },
							recorder_field: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_lookuporder').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			columns: [
			{
				field: "preprocessrecorder_gid",
				title: "preprocessrecorder_gid",
				hidden: true,
			},
			{
				field: "preprocess_code",
				title: "preprocess_code",
				width: 100,
				hidden: true,
			},
			{
				field: "recorder_field_code",
				title: "recorder_code",
				width: 100,
				hidden: true,
			},
			{
				field: "recorder_seqno",
				title: "Order Seq No.",
				width: 20,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '3');
				},
			},
			{
				field: "recorder_field",
				title: "Lookup Field",
				width: 100,
				editor: function (container, options) {
					combo_editor_manreorder(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "recorder_field_code", "grid_lookuporder")
				},
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,

		});
	}
	function combo_editor_manreorder(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		var datasetcode = $("#cmblookupdataset2").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Recon/Datasetfieldlist',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.DataSet.length > i; i++) {
						var list1 = {};
						list1.code = result.DataSet[i].dataset_table_field;
						list1.desc = result.DataSet[i].field_name;
						arr1.push(list1);
					}
				}
			}
		});
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;

				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	//-----------------------------------------------------  lookup exp ----------------------------------------------------------------
	function grid_expression(data) {
		var preprocessexp_update_field_list = "";
		$("#grid_expression").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "recorder_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocessexp_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							preprocessexp_sno: { type: "string" },
							preprocessexp_update_field: { type: "string" },
							preprocess_expression: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_expression').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			columns: [
			{
				field: "preprocessexp_gid",
				title: "preprocessexp_gid",
				hidden: true,
			},
			{
				field: "preprocess_code",
				title: "preprocess_code",
				width: 100,
				hidden: true,
			},
			{
				field: "preprocessexp_update_field_code",
				title: "preprocessexp_update_field",
				width: 100,
				hidden: true,
			},
			{
				field: "preprocessexp_sno",
				title: "Seq No.",
				width: 30,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '3');
				},
			},
			{
				field: "preprocessexp_update_field",
				title: "Recon Field",
				width: 40,
				editor: function (container, options) {
					combo_editor_exp(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "preprocessexp_update_field_code", "grid_expression")
				},
			},
			{
				field: "preprocess_expression",
				title: "Expression",
				width: 150,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,

		});
	}
	function combo_editor_exp(container, cmbid, datasource, datafield, code_datafield, grid_id) {
		var arr1 = [];
		if($("#Cmbprocessmethod").val()  == "QCD_EXPRESSION") {
			var reconcode = $("#cmbrecon").val();
			var in_user_code = sessionStorage.getItem("usrname");
			$.ajax({
				type: "POST",
				url: '../Rulesetup/FieldAgainstRecon',
				dataType: 'json',
				async: false,
				data: JSON.stringify({ in_recon_code: reconcode, in_user_code: in_user_code }),
				contentType: 'application/json; charset=utf-8',
				success: function (response) {
				if (response != null) {
					var result = JSON.parse(response);
					for (i = 0; result.length > i; i++) {
						var list1 = {};
						list1.code = result[i].recon_field_name;
						list1.desc = result[i].recon_field_desc;
						arr1.push(list1);
						}
					}
				}
			});
			} else {
					var datasetcode = $("#cmblookupdataset1").val();
					var in_user_code = sessionStorage.getItem("usrname");
					$.ajax({
							type: "POST",
							url: '../Recon/Datasetfieldlist',
							dataType: 'json',
							async: false,
							data: JSON.stringify({ datasetCode: datasetcode, in_user_code: in_user_code }),
							contentType: 'application/json; charset=utf-8',
							success: function (response) {
							if (response != null) {
							var result = JSON.parse(response);
								for (i = 0; result.DataSet.length > i; i++) {
										var list1 = {};
										list1.code = result.DataSet[i].dataset_table_field;
										list1.desc = result.DataSet[i].field_name;
										arr1.push(list1);
									}
				}
			}
		});
		}
		$('<input  id="' + cmbid + '" data-text-field="desc" data-value-field="desc" data-bind="value:' + datafield + '" name ="' + datafield + '"/>').appendTo(container).kendoComboBox({
			autoBind: false,
			filter: "contains",
			dataSource: arr1,
			change: function (e) {
				var cmb_value = this.value();
				if (cmb_value && this.selectedIndex == -1) {
					this.value("");
				}
				//else{FF
				var cmb_var = $("#" + grid_id).data("kendoGrid");
				var selectedItem = cmb_var.dataItem(cmb_var.select());
				var combobox_data = $("#" + cmbid).data("kendoComboBox");
				if (combobox_data != undefined && combobox_data.selectedIndex == -1) {
					selectedItem[datafield] = "";
					selectedItem[code_datafield] = "";
				}
				else {
					selectedItem[datafield] = combobox_data.dataItem(combobox_data.selectedIndex).desc;
					selectedItem[code_datafield] = combobox_data.dataItem(combobox_data.selectedIndex).code;
				}
			}
		});

		$("<span class='k-invalid-msg' data-for='" + datafield + "'></span>").appendTo(container);
	}
	function grid_expression1(data) {
		var preprocessexp_update_field_list = "";
		$("#grid_expression1").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				sort: [{ field: "recorder_seqno", dir: "asc" }],
				schema: {
					model: {
						fields: {
							preprocessexp_gid: { type: "string", defaultValue: "0" },
							preprocess_code: { type: "string" },
							preprocessexp_sno: { type: "string" },
							preprocessexp_update_field: { type: "string" },
							preprocess_expression: { type: "string" },
							active_status: { type: "string" },
							active_status_desc: { type: "string" }
						}
					}
				}
			},
			height: 185,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_expression1').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
				if ($("#txtmode").val() == "View") {
					$(".k-grid-save").hide();
					$(".k-grid-delete").hide();
					$(".k-grid-add").hide();
				}
			},
			sortable: false,
			selectable: true,
			filterable: false,
			navigatable: true,
			resizable: true,
			pageable: true,
			pageable: {
				refresh: false,
				pageSizes: true,
				buttonCount: 5
			},
			columns: [
			{
				field: "preprocessexp_gid",
				title: "preprocessexp_gid",
				hidden: true,
			},
			{
				field: "preprocess_code",
				title: "preprocess_code",
				width: 100,
				hidden: true,
			},
			{
				field: "preprocessexp_update_field_code",
				title: "preprocessexp_update_field",
				width: 100,
				hidden: true,
			},
			{
				field: "preprocessexp_sno",
				title: "Seq No.",
				width: 30,
				attributes: { style: "text-align: right;" },
				editor: function (container, options) {
					item_rate(container, options.field, '9', '3');
				},
			},
			{
				field: "preprocessexp_update_field",
				title: "Lookup Field",
				width: 40,
				editor: function (container, options) {
					combo_editor_exp(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "preprocessexp_update_field_code", "grid_expression1")
				},
			},
			{
				field: "preprocess_expression",
				title: "Expression",
				width: 150,
			},
			{
				field: "active_status",
				title: "Status",
				hidden: true
			},
			{
				field: "active_status_desc",
				title: "Status",
				width: 80,
				hidden: true
			}],
			editable: true,
		});
	}
	//-----------------------------------------------------  exp ----------------------------------------------------------------
</script>


