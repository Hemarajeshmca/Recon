@{
	ViewData["Title"] = "Recon";
	Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
	<title></title>
	<style>
		.nav-item.me-2.me-xl-50 {
			margin-right: 33rem !important;
		}

		.error_show {
			color: red;
			margin-left: 10px;
		}

		.k-grid.k-widget {
			height: 360px;
		}

		.k-grid-header th.k-header > .k-link {
			width: 100px;
		}

		.k-grid-header {
			font-weight: bold;
		}

		.k-grid-filter.k-state-active {
			color: #ffffff;
			background-color: #1274AC;
		}

		table {
			border: 1px solid #C5C5C5 !important;
		}

		.k-grid-content {
			overflow-x: hidden;
		}

		.k-content {
			font-weight: normal;
			font-size: 13px;
		}

		.k-widget.k-window {
			padding-top: 35px;
			min-width: 90px;
			min-height: 50px;
			width: 700px !important;
			height: 300px !important;
			top: 180.766px !important;
			/*left: 120px !important;*/
			z-index: 10003;
			left: 300px !important;
		}
	</style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
	<div class="content-wrapper">
		<div class="container-xxl flex-grow-1 container-p-y">
			<div class="card-body" style="margin-top:-1%;height: 82%;">
				<div class="row" style="margin-top:-15px;">
					<div class="col-xs-12">
						<a href='' onclick='getSerializedRows()' data-bs-toggle='modal' id="btn_new">
							<i class="fa fa-plus cursor-pointer" aria-hidden="true" style="color:green;font-size:15px;"></i>
						</a>
						<div id="gd_reconlist">
							<div id="grid_reconlist"> </div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>



	<div class="modal fade" id="clone_recon" tabindex="-1" aria-hidden="true">
		<div class="modal-dialog modal-lg" role="document">
			<div class="modal-content">
				<div class="modal-header">
				</div>
				<div class="modal-body" style="margin-top: -26px;">
					<div class="row">
						<div class="col-sm-4">
						</div>
						<div class="col-sm-4">
							<h4 style="font-size: 15px;text-align: center;color: #1a9950;font-weight: 600;">Recon Clone</h4>
						</div>
						<div class="col-sm-4">
							<i class="bx bx-x cursor-pointer" data-bs-dismiss="modal" style="color: #000000;float:right"></i>
						</div>
					</div>
					<hr style="margin-top:-1px; width:100%;">
					<div class="row">
						<div class="col-md-6">
							<label>New Recon Name</label>
							<span style="font-size: 12px;color: red;font-weight: bold;">*</span>
							<input class="form-control" id="newReconName" type="text" />

						</div>
						<div class="col-md-6">
							<label>Selected Recon Name</label>
							<input class="form-control" id="selectedReconName" type="text" disabled />
							<input class="form-control" id="selectedReconCode" type="text" hidden />

						</div>
					</div>


					<div class="row" style="margin-top: 2%;">
						<div class="col-sm-4"></div>
						<div class="col-sm-4" style="margin-top:20px;float: right;">
							<center>
								<button type="button" class="btn btn-sm save_btn me-2" onclick="cloneRecon()">Clone</button>&nbsp;&nbsp;&nbsp;
								<button type="button" class="btn btn-sm cancel_btn me-2" data-bs-dismiss="modal">Cancel</button>
							</center>
						</div>
						<div class="col-sm-4"></div>

					</div>

				</div>
			</div>
		</div>
	</div>
</body>
</html>

<script>
	$(document).ready(function () {
		$('[data-bs-toggle="tooltip"]').tooltip();
		$("#navhead").text("Recon");
		setlocalStorage("ls_pageList", "");
		grid_reconlist_details([]);
		gridlist();
	});
	function gridlist() {
		var data = {};		
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = sessionStorage.getItem("usrname");
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				if (res != null) {
					$("#gd_reconlist").empty();
					$("#gd_reconlist").append("<div id='grid_reconlist'></div>");
					grid_reconlist_details(res);
				}
				else {
					grid_reconlist_details([]);
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}
	var status_Priority = [];
	function grid_reconlist_details(data) {

		try {
			$.each(data, function (index, value) {
				var flag = false;
				$.each(status_Priority, function (sindex, svalue) {
					if (svalue == value.active_status_desc) {
						flag = true;
					}
				});
				if (flag == false) {
					status_Priority.push(value.active_status_desc);
				}
			});
			var formatdate = sessionStorage.getItem("kendate");
			var formatdate1 = "{0:" + formatdate + "}";
			$("#grid_reconlist").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 15,
					schema: {
						model: {
							fields: {
								recon_gid: { type: "string" },
								recon_code: { type: "string" },
								recon_name: { type: "string" },
								recontype_code: { type: "string" },
								recontype_desc: { type: "string" },
								period_from: { type: "date" },
								period_to: { type: "date" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" },
								status: { type: "string" },
							}
						},
						parse: function (data) {
							$.each(data, function (i, item) {
								item.period_from = kendo.parseDate(item.period_from, "yyyy-MM-dd");
								item.period_to = kendo.parseDate(item.period_to, "yyyy-MM-dd");
							});
							return data;
						}
					}
				},
				height: 450,
				groupable: false,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_reconlist').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
					var screen_code = rolevalidatescreen('recon_setup')
					if (screen_code[0].add == "N") {
						$("#btn_new").hide();
					}
					if (screen_code[0].edit == "N") {
						$(".k-grid-edit").hide();
					}
					if (screen_code[0].view == "N") {
						$(".k-grid-view").hide();
					}
					if (screen_code[0].delete == "N") {
						$(".k-grid-delete").hide();
					}
				},
				pageable: {
					refresh: false,
					pageSizes: [10, 15, 20, 25, 50],
					buttonCount: 5
				},
				sortable: true,
				selectable: true,
				filterable: true,
				navigatable: true,
				change: selectRow,
				resizable: true,
				columns: [{
					command: [
						{
							name: "edit",
							id: "btn_Edit",
							template: "<a href='' onclick='getSerializedSelectedRows(this)' value='edit' class='k-grid-edit' data-bs-toggle='modal'><img src = '../Assets/images/editicons.png'></a>&nbsp;&nbsp;&nbsp;",
						},
						{
							name: "view",
							id: "View",
							template: "<a href=''onclick='getSerializedSelectedRows(this)' value='view' class='k-grid-view' data-bs-toggle='modal'><img src = '../Assets/images/viewicons.png'></a>&nbsp;&nbsp;&nbsp;",
						},
						{
							name: "Delete",
							id: "Delete",
							template: "<a href='' onclick='myDeleteJs()' class='k-grid-delete' data-bs-toggle='modal'><img src = '../Assets/images/del.png'></a>&nbsp;&nbsp;&nbsp;",
						},
						{
							name: "Clone",
							id: "Clone",
							template: "<a href='' title='Clone' id='cloneid' onclick='clonePopup(this)' data-bs-toggle='modal'><img style='height: 15px;width:15px;' src = '../Assets/images/clone.png' alt='Clone'></a>"
						},
					],
					title: "Action&nbsp;",
					width: 50,
				},
				{
					field: "recon_gid",
					title: "Row id",
					width: 10,
					hidden: true
				},

				{
					field: "recon_code",
					title: "Recon Code",
					width: 50
				},
				{
					field: "recon_name",
					title: "Recon Name",
					width: 120
				},
				{
					field: "recontype_code",
					title: "Recon Type Code",
					width: 10,
					hidden: true
				},
				{
					field: "recontype_desc",
					title: "Recon Type",
					width: 50
				},
				{
					field: "period_from",
					title: "Period From",
					width: 50,
					format: formatdate1,
					filterable: {
						ui: function (element) {
							element.kendoDatePicker({
								format: formatdate
							});
						},
					},
				},
				{
					field: "period_to",
					title: "Period To",
					width: 50,
					format: formatdate1,
					filterable: {
						ui: function (element) {
							element.kendoDatePicker({
								format: formatdate
							});
						},
					},
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 50,
					resizable: false,
					filterable: {
						ui: priorityFilter,
						extra: false,
						operators: {
							string: {
								eq: "Is equal to",
								neq: "Not equal to"
							}
						},
					},
				},
				{
					field: "In_mode_flag",
					title: "Mode",
					width: 10,
					hidden: true
				},
				{
					field: "until_active_flag",
					title: "until_active_flag",
					width: 10,
					hidden: true
				},
				{
					field: "active_status",
					title: "Status",
					width: 10,
					hidden: true
				}],
				editable: false,

			});
			//$("#grid_reconlist").kendoTooltip({
			//	filter: "td",
			//	content: function (e) {
			//		var target = e.target;
			//		if (target.id === "cloneid") {
			//			// Get the alt attribute of the image (assuming it has an alt attribute)
			//			return target.querySelector('img').getAttribute('alt');
			//		} else {
			//		var target = e.target;
			//		return $(innerHTMLValue).text(); // You can customize the tooltip content as needed
			//		}
			//	},
			//});
			var grid = $("#grid_reconlist").data("kendoGrid");
			function filterActiveData() {
				var dataSource = grid.dataSource;
				dataSource.filter({
					logic: "and",
					filters: [
						{ field: "active_status_desc", operator: "neq", value: "InActive" }
					]
				});
			}
			filterActiveData();
		}
		catch (err) {
			console.log(err)

		}
	}
	function priorityFilter(element) {
		element.kendoDropDownList({
			dataSource: status_Priority,
			optionLabel: "--Select Value--"
		});
	}
	function getSerializedRows() {
		btn_onClick('Create');
		document.location = "../Recon/ReconView";
	}
	function getSerializedSelectedRows(mode) {
		try {
			if (getlocalStorage("ls_pageList") != undefined || getlocalStorage("ls_pageList") != "") {
				var items = getlocalStorage("ls_pageList");
				if (items.length == 0) {
					kendoAlert("Please select records");
				}
				else {
					if ($(mode).attr('value') == "edit") {
						if (items.active_status != "N") {
							btn_onClick("Edit");
							document.location = '../Recon/ReconView';
						}
					}
					else if ($(mode).attr('value') == "view") {
						btn_onClick('View');
						document.location = "../Recon/ReconView";
					} else if (mode == 'clone') {
						btn_onClick("Edit");
						$("#clone_recon").modal('show');
						var grid = $("#grid_reconlist").data("kendoGrid");
						var selectedItem = grid.dataItem(grid.select());
						$("#selectedReconName").val(selectedItem.recon_name);
						$("#selectedReconCode").val(selectedItem.recon_code);
					}
				}
			}
		}
		catch (err) {

		}
	}
	function selectRow() {
		try {
			var grid = $("#grid_reconlist").data("kendoGrid");
			var selectedItem = grid.dataItem(grid.select());
			setlocalStorage("ls_pageList", selectedItem);
		}
		catch (err) {

		}
	}
	function myDeleteJs() {
		var grid = $("#grid_reconlist").data("kendoGrid");
		var model = grid.dataItem($(event.target).closest("tr"));
		if (model.active_status != "N") {
			var recon_gid = model.recon_gid;
			$.confirm({
				icon: 'fa fa-warning',
				title: 'Recon',
				autoClose: 'cancel|10000',
				theme: 'dark',
				animationSpeed: 700,
				content: 'Are you sure do you want to delete this record!',
				type: 'orange',
				buttons: {
					confirm: function () {
						$.confirm({
							title: 'Delete Reason',
							content: '' +
								'<form action="" class="formName">' +
								'<div class="form-group">' +
								'<label>Reason</label>' +
								'<input type="text" placeholder="Reason" class="name form-control" required />' +
								'</div>' +
								'</form>',
							buttons: {
								formSubmit: {
									text: 'Submit',
									btnClass: 'btn-blue',
									action: function () {
										var name = this.$content.find('.name').val();
										if (!name) {
											$.alert('Reason cannot be empty');
											return false;
										}
										var reconcode = model.recon_code;
										var cmbrecontype = "";
										var ReconName = "";
										var pr = "1901-01-01";
										var in_until_active_flag = "";
										var pr1 = "1901-01-01";
										var action = "DELETE";
										var action_by = ""
										var status = "";

										var in_recon_automatch_partial = "";
										var in_recon_date_flag = "";
										var in_recon_date_field = "";
										var in_recon_value_flag = "";
										var in_recon_value_field = "";
										var in_threshold_plus_value = 0;
										var in_threshold_minus_value = 0;
										var in_threshold_code = "";
										$.ajax({
											type: "POST",
											url: '../Recon/Reconheadersave',
											dataType: 'json',
											data: JSON.stringify({
												in_recon_gid: recon_gid, in_recon_code: reconcode, in_recon_name: ReconName, in_recontype_code: cmbrecontype, in_action: action, in_action_by: action_by, in_period_from: pr, in_period_to: pr1, in_active_status: status, in_recon_automatch_partial: in_recon_automatch_partial, in_until_active_flag: in_until_active_flag, in_recon_date_flag: in_recon_date_flag, in_recon_date_field: in_recon_date_field, in_recon_value_flag: in_recon_value_flag, in_recon_value_field: in_recon_value_field, in_threshold_plus_value: in_threshold_plus_value, in_threshold_minus_value: in_threshold_minus_value, in_active_reason: name, threshold_code: in_threshold_code
											}),
											contentType: 'application/json; charset=utf-8',
											success: function (response) {
												$.alert({
													icon: 'fa fa-success',
													title: 'Recon',
													theme: 'dark',
													content: response.out_msg,
													type: 'green',
													animationSpeed: 700,
												});
												gridlist();
											}
										})
									}
								},
								cancel: function () {
									//close
								},
							},

						});
					},
					cancel: function () {
						$.alert({
							icon: 'fa fa-success',
							title: 'Recon',
							theme: 'dark',
							content: 'Delete Canceled.!',
							type: 'blue',
							animationSpeed: 700,
						});
					},
				}
			});
		}
	}

	function clonePopup(e) {
		var grid = $("#grid_reconlist").data("kendoGrid");
		var selectedItem = grid.dataItem(grid.select());
		if (selectedItem.active_status == 'Y') {
			$("#clone_recon").modal('show');
			$("#selectedReconName").val(selectedItem.recon_name);
			$("#selectedReconCode").val(selectedItem.recon_code);
		} else if (selectedItem.active_status == 'D') {
			$("#clone_recon").modal('hide');
			btn_onClick("Edit");
			setlocalStorage("cloned_reconCode", selectedItem.recon_code);
			document.location = "../Recon/ReconViewClone";
		} else if (selectedItem.active_status == 'N') {
			return;
		}

	}

	function cloneRecon() {
		btn_onClick("Edit");
		var newReconName = $("#newReconName").val();
		var selectedReconCode = $("#selectedReconCode").val();
		$.ajax({
			type: "POST",
			url: '../Recon/cloneRecon',
			dataType: 'json',
			data: JSON.stringify({ in_recon_name: newReconName, in_clone_recon_code: selectedReconCode }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var result = JSON.parse(response);
				if (result.length > 0) {
					if (result[0].out_result == '1') {
						$.alert({
							title: 'Recon',
							content: result[0].out_msg,
							type: 'green',
						});
						$("#clone_recon").modal('hide');
						btn_onClick("Edit");
						setlocalStorage("cloned_reconCode", result[0].out_recon_code);
						document.location = "../Recon/ReconViewClone";
					} else {
						$.alert({
							title: 'Recon',
							content: result[0].out_msg,
							type: 'red',
						});
					}
				}
			}
		});
	}

	function showCloneIcon() {
		var grid = $("#grid_reconlist").data("kendoGrid");
		var selectedItem = grid.dataItem(grid.select());
		if (selectedItem.active_status == "Y") {
			return "<a href='' onclick='clonePopup()' data-bs-toggle='modal'><img style='height: 20px; width: 20px; ' src = '../Assets/images/clone.png'></a>"
		}
	}


</script>



