@{
    ViewBag.title = "KnockOff MIS";
    Layout = "~/Views/Shared/_LayoutNew.cshtml";
}
<!Doctype html>
<html>
<head>
    <title></title>
    <style>

        .k-grid-header .k-grid-filter .k-i-filter {
            display: inline-block !important; /* Ensure the filter icon is visible */
            visibility: visible !important;
        }


        table {
            width: 100% !important;
        }

            table#grid1 {
                width: 100% !important;
            }

        .custom-excel-button {
            background-color: #4CAF50; /* Green background */
            color: white; /* White font color */
            /*border: none; /* Optional: Remove border */
            padding: 5px 10px; /* Optional: Add padding */
            border-radius: 5px; /* Optional: Rounded corners */
            cursor: pointer; /* Optional: Change cursor to pointer */
        }

            .custom-excel-button:hover {
                background-color: #45a049; /* Darker green on hover */
            }

        th.k-header a.k-link {
            color: #fff !important;
        }

        .k-grid td {
            border: unset !important;
            font-weight: 800;
            line-height: 1em;
            border-left: 1px solid #c5c5c5 !important;
        }

        .k-grid-header th.k-header, .k-filter-row th {
            font-weight: 700 !important;
        }

        .k-grid td {
            background-color: unset !important;
        }

        .selectedDataset {
            font-size: 13px;
            font-weight: 600;
            color: brown;
        }

        /*      .k-link:link, .k-link:visited, .k-nav-current.k-state-hover .k-link {
                                                                                            color: #fff !important;
                                                                                        }*/

        .nav-item.me-2.me-xl-50 {
            margin-right: 33rem !important;
        }

        .error_show {
            color: red;
            margin-left: 10px;
        }

        .k-grid.k-widget {
            height: 360px;
        }

        /*		.k-grid-header th.k-header > .k-link {
                                                                                                                                    width: 100px;
                                                                                                                                }*/

        .k-grid-header {
            font-weight: bold;
        }

        /* .k-state-active {
            display: none;
        } */

        .k-content {
            font-weight: normal;
            font-size: 13px;
        }

        .k-widget.k-window {
            padding-top: 35px;
            min-width: 90px;
            min-height: 50px;
            width: 700px !important;
            height: 300px !important;
            top: 180.766px !important;
            /*left: 120px !important;*/
            z-index: 10003;
            left: 300px !important;
        }

        .action-button {
            width: 120px;
            background: #673AB7;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 0px 10px 5px;
            float: right;
            border-radius: 20px;
        }

        .action-button-previous {
            width: 100px;
            background: #616161;
            font-weight: bold;
            color: white;
            border: 0 none;
            border-radius: 0px;
            cursor: pointer;
            padding: 10px 5px;
            margin: 10px 5px 10px 0px;
            float: right;
            border-radius: 20px;
        }

        .tooltip-container {
            position: relative;
            display: inline-block;
        }

        .info-icon {
            cursor: pointer;
        }

        .tooltip1 {
            display: none;
            position: absolute;
            background-color: lightslategray;
            color: #fff;
            padding: 10px;
            border-radius: 15px;
            white-space: nowrap;
            z-index: 1;
            top: 100%;
            margin-left: -95px;
            transform: translateX(-50%);
        }

        .tooltip-container:hover .tooltip1 {
            display: block;
        }
    </style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
    <div class="content-wrapper">
        <div class="container-xxl flex-grow-1 container-p-y">
            <div class="card-body" style="margin-top:-12px;height: 84%;">
                <div class="row" style="margin-top:10px;margin-bottom: 2%;">

                    <div class="col-sm-2">
                        <label for="" class="form-label">Period From&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
                        <div>
                            <input class="cusDate" #datepicker data-role='datepicker' id="period_from" name="period_from" style="width:100%" />
                            <span data-for='valid' class='k-invalid-msg'></span>
                        </div>
                    </div>
                    <div class="col-sm-2">
                        <label for="" class="form-label">Period To&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>

                        <div>
                            <input class="cusDate" data-role='datepicker' id="period_to" style="height:25px;width: 100%;" data-bind="value:period_to" /><span data-for='valid' class='k-invalid-msg'></span>
                        </div>
                    </div>
                    <div class="col-md-3">
                        <label for="organization" class="form-label">Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label><br>
                        <select id="reconname" class="form-select form-control" onchange="onc()"> </select>
                    </div>
                    <div class="col-md-3" style="margin-top: 2%;">
                        <button type="button" onclick="run()" class="btn btn-sm save_btn me-2" style="width:25%;margin-top:6px;">
                            View
                        </button> &nbsp;&nbsp;
                        @* <button type="button" onclick="exportexcel()" id="exportExcel" aria-hidden="true" class="btn btn-sm btn-success me-2" style="background: #38b55a;border-color: #38b55a;width:23%;margin-top: 7px">
                        <i class="fa-solid fa-file-excel"></i>
                        </button> *@
                    </div>
                </div>

                <div id="grid"></div>
            </div>
        </div>
    </div>


</body>
</html>
<script>
    var selected_dataset = '';
    $(document).ready(function () {
        $("#navhead").text("KnockOff MIS");
        kendodate_format();
        getreconlist();
        loadGrid();
        $("#exportExcel").hide();
    });

    function getreconlist() {
        var data = {};
        data.in_user_gid = 0;
        data.in_active_status = '';
        data.in_user_code = sessionStorage.getItem("usrname");
        var Context = data;
        $.ajax({
            type: "POST",
            url: '../Recon/Reconlistfetch',
            dataType: 'json',
            async: false,
            data: JSON.stringify(data),
            contentType: 'application/json; charset=utf-8',
            success: function (response) {
                var res = JSON.parse(response);
                $("#reconname").empty();
                $("#reconname").append($('<option>', {
                    value: "",
                    text: "  Select  "
                }));
                $.each(res, function (index, item) {
                    if (item.active_status == 'Y') {
                        $("#reconname").append($('<option>', {
                            value: item.recon_code,
                            text: item.recon_name
                        }));
                    }
                    $("#reconname").val(sessionStorage.getItem("reconcode"));
                });
            },
            error: function (er) {
                alert(er)
                console.log(er)
            }
        });
    }
    function onc() {
        if ($("#reconname").val() != '') {
            sessionStorage.setItem("reconcode", $("#reconname").val());
            sessionStorage.setItem("reconname", $("#reconname :selected").text());
            setcon();
        }
    }
    function run() {
        var fromDate = validateDateFormat($("#period_from").val());
        var toDate = validateDateFormat($("#period_to").val());
        if (fromDate && toDate && $("#reconname").val()) {
            var in_recon_code = $("#reconname").val();
            var period_from = $("#period_from").val();
            var ts = period_from.split("/");
            var pr = ts[2] + "-" + ts[1] + "-" + ts[0];
            var period_to = $("#period_to").val();
            var ts1 = period_to.split("/");
            var pr1 = ts1[2] + "-" + ts1[1] + "-" + ts1[0];
            var in_user_code = sessionStorage.getItem("usrname");
            $.ajax({
                type: "POST",
                url: '../KnockOff/runkosum',
                dataType: 'json',
                data: JSON.stringify({ in_recon_code: in_recon_code, in_period_from: pr, in_period_to: pr1, in_ip_addr: '', in_user_code: in_user_code }),
                contentType: 'application/json; charset=utf-8',
                success: function (response) {
                    if (response) {
                        var res = JSON.parse(response)
                        if (res.Table.length > 0) {

                            loadGrid1(res.Table);
                            $("#exportExcel").show();
                        } else {
                            loadGrid1();
                            $.alert({
                                title: 'Recon',
                                content: "No Records found",
                                type: 'red',
                            });
                        }
                    } else {
                        $.alert({
                            title: 'Recon',
                            content: "Something Went Wrong..!",
                            type: 'red',
                        });
                    }

                },
                error: function (er) {
                    alert(er)
                    console.log(er)
                }
            });
        } else if (!fromDate) {
            $.alert({
                title: 'Recon',
                content: "Invalid Date ..!",
                type: 'red',
            });
        } else if (!toDate) {
            $.alert({
                title: 'Recon',
                content: "Invalid Date ..!",
                type: 'red',
            });
        } else if (!$("#reconname").val()) {
            $.alert({
                title: 'Recon',
                content: "Please Select Recon ..!",
                type: 'red',
            });
        }

    }

    function loadGrid1(data) {
        var columns = [];
        var rows = [];
        var groupRows = [];
        var ruleRows = [];
        var totalRows = [];
        var finalRows = [];
        var dataCopy = data;

        if (dataCopy) {
            var index = 0;
            // Step 1: Separate the data into group, rule, and total rows
            $.each(dataCopy, function (i, e) {
                if (e.backcolor === "White" && e.forecolor === "Blue") {
                    // Group rows (e.g., "Receipt Report")
                    groupRows.push(e);
                } else if (e.backcolor === "White" && e.forecolor === "Black") {
                    // Rule rows (e.g., "Rule 1 - Cash T+1")
                    var lastGroupRowLabel = groupRows.length > 0 ? groupRows[groupRows.length - 1]["Row Labels"] : null;
                    e["groupRowLabel"] = lastGroupRowLabel;
                    e["groupRowdisplayLabel"] = lastGroupRowLabel;
                    ruleRows.push(e);
                } else if (e.backcolor === "Yellow" && e.forecolor === "Red" && e["Row Labels"] === "Sub Total") {
                    // Total rows (e.g., "Sub Total")
                    var lastGroupRowLabel = groupRows.length > 0 ? groupRows[groupRows.length - 1]["Row Labels"] : null;
                    e["groupRowLabel"] = lastGroupRowLabel;
                    e["groupRowdisplayLabel"] = lastGroupRowLabel;
                    totalRows.push(e);
                }
            });
            renderGroupedGrid(ruleRows, totalRows);
        }
    }


    function loadGrid2(data) {
        var groupedData = {};
        var columns = [];
        var finalRows = [];
        var finalRow = [];
        var groupLabels = [];

        // Group data by `groupRowLabel`
        data.forEach(function (entry) {
            var groupLabel = entry.groupRowLabel.replace(/[\s/[\]]+/g, "_");
            if (!groupedData[groupLabel]) {
                groupedData[groupLabel] = [];
            }

            groupedData[groupLabel].push(entry);

            // Collect group labels for column titles
            if (!groupLabels.includes(groupLabel)) {
                groupLabels.push(groupLabel);
            }
        });

        // Define columns for the grid
        columns.push({ field: "Rule", title: "Rules", width: 250, attributes: { style: "text-align:left;" } });

        // Dynamically add columns based on the `groupRowLabel`
        groupLabels.forEach(function (groupLabel) {

            columns.push({ field: groupLabel + "_Dr_Count", title: groupLabel + " - Dr Count", width: 150, attributes: { style: "text-align:center;" } });
            columns.push({ field: groupLabel + "_Dr_Value", title: groupLabel + " - Dr Value", width: 150, attributes: { style: "text-align:center;" } });
            columns.push({ field: groupLabel + "_Cr_Count", title: groupLabel + " - Cr Count", width: 150, attributes: { style: "text-align:center;" } });
            columns.push({ field: groupLabel + "_Cr_Value", title: groupLabel + " - Cr Value", width: 150, attributes: { style: "text-align:center;" } });
        });

        // Iterate over each rule and create a row
        var rules = [...new Set(data.map(d => d["Row Labels"]))];

        rules.forEach(function (rule) {
            var row = { Rule: rule };

            // For each group, add the respective values
            groupLabels.forEach(function (groupLabel) {
                var groupData = groupedData[groupLabel].find(d => d["Row Labels"] === rule);
                if (groupData) {
                    row[groupLabel + "_Dr_Count"] = groupData["Dr Count"] || "-";
                    row[groupLabel + "_Dr_Value"] = groupData["Dr Value"] || "-";
                    row[groupLabel + "_Cr_Count"] = groupData["Cr Count"] || "-";
                    row[groupLabel + "_Cr_Value"] = groupData["Cr Value"] || "-";
                } else {
                    row[groupLabel + "_Dr_Count"] = "-";
                    row[groupLabel + "_Dr_Value"] = "-";
                    row[groupLabel + "_Cr_Count"] = "-";
                    row[groupLabel + "_Cr_Value"] = "-";
                }
            });

            finalRows.push(row);
        });

        // Calculate totals for each group
        var totalRow = { Rule: "Total" };
        groupLabels.forEach(function (groupLabel) {
            var totalDrCount = 0, totalDrValue = 0, totalCrCount = 0, totalCrValue = 0;

            rules.forEach(function (rule) {
                var groupData = groupedData[groupLabel].find(d => d["Row Labels"] === rule);
                if (groupData) {
                    totalCrCount += (groupData["Cr Count"] || 0);
                    totalCrValue += parseFloat(groupData["Cr Value"].replace(/,/g, "") || 0);
                }
            });

            totalRow[groupLabel + "_Dr_Count"] = "-";
            totalRow[groupLabel + "_Dr_Value"] = "-";
            totalRow[groupLabel + "_Cr_Count"] = totalCrCount;
            totalRow[groupLabel + "_Cr_Value"] = totalCrValue;
        });

        finalRow.push(totalRow);

        $.each(finalRow, function (i, e) {
            var entryObject = {};
            for (var key in e) {
                var field = key.replace(/\s+/g, '_');
                entryObject[field] = e[key];
            }
            finalRows.push(entryObject);
        });

        // Configure the grid with columns and rows
        var gridConfig = {
            dataSource: {
                data: finalRows
            },
            height: 400,
            navigatable: false,
            groupable: false,
            editable: false,
            sortable: true,
            scrollable: true,
            pageable: false,
            resizable: true,
            persistSelection: true,
            selectable: true,
            columns: columns
        };

        // Initialize the grid
        $("#example").remove();
        $('#grid').append('<div id="example" style="position:relative;" class="k-content"><table id="grid1" style="position:relative;width:100%"></table></div>');
        var timeEditGrid = $("#grid1").kendoGrid(gridConfig).data("kendoGrid");
    }


    /*function renderGroupedGrid(datas, totalRows) {
        // Preprocess the data: replace empty spaces in all string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key == "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel };

            groupLabels.forEach(group => {
                const rowData = data.find(d => d["Row Labels"] === rowLabel && d.groupRowLabel === group);
                row[`${group}_Dr_Count`] = rowData ? rowData["Dr Count"] : "-";
                row[`${group}_Dr_Value`] = rowData ? rowData["Dr Value"] : "-";
                row[`${group}_Formal_Dr_Value`] = rowData ? rowData["Formal Dr Value"] : "-";
                row[`${group}_Cr_Count`] = rowData ? rowData["Cr Count"] : "-";
                row[`${group}_Cr_Value`] = rowData ? rowData["Cr Value"] : "-";
                row[`${group}_Formal_Cr_Value`] = rowData ? rowData["Formal Cr Value"] : "-";
            });

            return row;
        });

        /// Add "Sub Total" row dynamically
        const totalRowData = totals.find(t => t["Row Labels"] === "SubTotal") || {}; // Get 'Total' data from totalRows
        const subTotalRow = {
            RowLabel: "Total",
            backcolor: totalRowData.backcolor || "yellow",  // Use dynamic color if available
            forecolor: totalRowData.forecolor || "red"     // Use dynamic color if available
        };
        groupLabels.forEach(group => {
            const total = totals.find(t => t.groupRowLabel === group);
            subTotalRow[`${group}_Dr_Count`] = total ? total["Dr Count"] : "-";
            subTotalRow[`${group}_Dr_Value`] = total ? total["Dr Value"] : "-";
            subTotalRow[`${group}_Formal_Dr_Value`] = total ? total["Formal Dr Value"] : "-";
            subTotalRow[`${group}_Cr_Count`] = total ? total["Cr Count"] : "-";
            subTotalRow[`${group}_Cr_Value`] = total ? total["Cr Value"] : "-";
            subTotalRow[`${group}_Formal_Cr_Value`] = total ? total["Formal Cr Value"] : "-";
        });

        // Push the subTotalRow to gridData only once
        gridData.push(subTotalRow);

        // Define grid columns dynamically
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 400,
                //autoWidth: true, // Enable auto-sizing
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;" },
                locked: true // Freeze the first column
            }
        ];

        groupLabels.forEach(group => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center; font-weight: bold; background-color: blue; color: white;"  // Apply blue color to the group label
                },
                columns: [
                    { field: `${group}_Dr_Count`, title: "Dr Count", width: 120, attributes: { style: "text-align:right;" }, headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white; " } },
                    { field: `${group}_Dr_Value`, title: "Dr Value", width: 180, hidden: true, attributes: { style: "text-align:right;" }, headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" } },
                    { field: `${group}_Formal_Dr_Value`, title: "Dr Value", width: 180, attributes: { style: "text-align:right;" }, headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" } },
                    { field: `${group}_Cr_Count`, title: "Cr Count", width: 120, attributes: { style: "text-align:right;" }, headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" } },
                    { field: `${group}_Cr_Value`, title: "Cr Value", width: 180, hidden: true, attributes: { style: "text-align:right;" }, headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" } },
                    { field: `${group}_Formal_Cr_Value`, title: "Cr Value", width: 180, attributes: { style: "text-align:right;" }, headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" } }
                ]
            });
        });

        // Initialize Kendo Grid
        var gridConfig = {
            dataSource: {
                data: gridData
            },
            height: 400,
            width: "auto", // Set the grid width to 100% of its container
            sortable: false,
            scrollable: {
                virtual: false
            },
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            },

            dataBound: function (e) {
                const grid = e.sender;

                // Get all rows in both locked and non-locked sections
                const lockedRows = grid.lockedTable ? grid.lockedTable.find("tr") : $();
                const nonLockedRows = grid.tbody.find("tr");

                // Loop through all rows to find the 'Total' row and apply styles
                lockedRows.each(function (index) {
                    const lockedRow = $(this);
                    const nonLockedRow = $(nonLockedRows[index]); // Corresponding non-locked row

                    const rowLabel = lockedRow.find("td:first").text(); // First column in locked row
                    if (rowLabel === "Total") {
                        // Get the corresponding data item for the row
                        const dataItem = grid.dataSource.view()[index];

                        // Fetch the backcolor and forecolor dynamically
                        const backColor = dataItem.backcolor || "yellow";
                        const foreColor = dataItem.forecolor || "red";

                        // Apply background and foreground color to both rows
                        lockedRow.css({ "background-color": backColor, "color": foreColor });
                        nonLockedRow.css({ "background-color": backColor, "color": foreColor });
                    }
                });
            }
        };

        // Initialize the grid and make sure the previous grid is removed to avoid duplication
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:auto;"></table></div>');

        // Bind the grid data
        var timeEditGrid = $("#grid1").kendoGrid(gridConfig).data("kendoGrid");


    }*/


    function renderGroupedGrid(datas, totalRows) {
        // Preprocess the data: replace empty spaces in all string values for datas
        const data = datas.map(item => {
            const sanitizedItem = {};
            for (const key in item) {
                if (typeof item[key] === "string" && key === "groupRowLabel") {
                    sanitizedItem[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
                } else {
                    sanitizedItem[key] = item[key];
                }
            }
            return sanitizedItem;
        });

        // Preprocess the totalRows in the same way
        const totals = totalRows.map(item => {
            const sanitizedTotal = {};
            for (const key in item) {
                if (typeof item[key] === "string") {
                    sanitizedTotal[key] = item[key].replace(/[\s$#%^&*()!?/\\|[\]\-]+/g, "");
                } else {
                    sanitizedTotal[key] = item[key];
                }
            }
            return sanitizedTotal;
        });

        // Map groupRowLabel to groupRowdisplayLabel for display purposes
        const groupLabelMapping = {};
        datas.forEach(item => {
            const sanitizedLabel = item.groupRowLabel.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, "");
            groupLabelMapping[sanitizedLabel] = item.groupRowdisplayLabel;
        });

        // Extract unique group headers and row labels
        const groupLabel = [...new Set(data.map(d => d.groupRowLabel))];
        const groupLabels = groupLabel.map(label => label.replace(/[\s$#%^&*()!?/\\|[\]\-\.]+/g, ""));
        const rowLabels = [...new Set(data.map(d => d["Row Labels"]))];

        // Transform data into the required row format
        const gridData = rowLabels.map(rowLabel => {
            const row = { "RowLabel": rowLabel };

            groupLabels.forEach(group => {
                const rowData = data.find(d => d["Row Labels"] === rowLabel && d.groupRowLabel === group);
                row[`${group}_Dr_Count`] = rowData ? rowData["Dr Count"] : "-";
                row[`${group}_Dr_Value`] = rowData ? rowData["Dr Value"] : "-";
                row[`${group}_Formal_Dr_Value`] = rowData ? rowData["Formal Dr Value"] : "-";
                row[`${group}_Cr_Count`] = rowData ? rowData["Cr Count"] : "-";
                row[`${group}_Cr_Value`] = rowData ? rowData["Cr Value"] : "-";
                row[`${group}_Formal_Cr_Value`] = rowData ? rowData["Formal Cr Value"] : "-";
            });

            return row;
        });

        // Add "Sub Total" row dynamically
        const totalRowData = totals.find(t => t["Row Labels"] === "SubTotal") || {}; // Get 'Total' data from totalRows
        const subTotalRow = {
            RowLabel: "Total",
            backcolor: totalRowData.backcolor || "yellow",  // Use dynamic color if available
            forecolor: totalRowData.forecolor || "red"     // Use dynamic color if available
        };
        groupLabels.forEach(group => {
            const total = totals.find(t => t.groupRowLabel === group);
            subTotalRow[`${group}_Dr_Count`] = total ? total["Dr Count"] : "-";
            subTotalRow[`${group}_Dr_Value`] = total ? total["Dr Value"] : "-";
            subTotalRow[`${group}_Formal_Dr_Value`] = total ? total["Formal Dr Value"] : "-";
            subTotalRow[`${group}_Cr_Count`] = total ? total["Cr Count"] : "-";
            subTotalRow[`${group}_Cr_Value`] = total ? total["Cr Value"] : "-";
            subTotalRow[`${group}_Formal_Cr_Value`] = total ? total["Formal Cr Value"] : "-";
        });

        // Push the subTotalRow to gridData only once
        //gridData.push(subTotalRow);

        // Define grid columns dynamically with aggregate functions
        const columns = [
            {
                field: "RowLabel",
                title: "Rules",
                width: 400,
                headerAttributes: { style: "text-align:center; font-weight: bold; background-color: white; color: white;" },
                footerTemplate: "Total", // Include the text 'Total' in the footer
                locked: true // Freeze the first column
            }
        ];

        // Prepare aggregates dynamically
        const aggregates = [];
        groupLabels.forEach(group => {
            const displayLabel = groupLabelMapping[group] || group; // Fetch user-friendly name
            columns.push({
                title: displayLabel,
                headerAttributes: {
                    style: "text-align:center; font-weight: bold; background-color: blue; color: white;"  // Apply blue color to the group label
                },
                columns: [
                    {
                        field: `${group}_Dr_Count`,
                        title: "Dr Count",
                        width: 120,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Dr_Value`,
                        title: "Dr Value",
                        width: 180,
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Formal_Dr_Value`,
                        title: "Dr Value",
                        width: 180,
                        hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Cr_Count`,
                        title: "Cr Count",
                        width: 120,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Cr_Value`,
                        title: "Cr Value",
                        width: 180,
                        //hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    },
                    {
                        field: `${group}_Formal_Cr_Value`,
                        title: "Cr Value",
                        width: 180,
                        hidden: true,
                        attributes: { style: "text-align:right;" },
                        headerAttributes: { style: "text-align:center; font-weight: bold; background-color: blue; color: white;" },
                        aggregates: ["sum"],
                        footerTemplate: "#= sum #",
                        footerAttributes: { style: "text-align:right;" } // Right-align the footer
                    }
                ]
            });

            // Dynamically add the aggregates for this group
            aggregates.push(
                { field: `${group}_Dr_Count`, aggregate: "sum" },
                { field: `${group}_Dr_Value`, aggregate: "sum" },
                { field: `${group}_Formal_Dr_Value`, aggregate: "sum" },
                { field: `${group}_Cr_Count`, aggregate: "sum" },
                { field: `${group}_Cr_Value`, aggregate: "sum" },
                { field: `${group}_Formal_Cr_Value`, aggregate: "sum" }
            );
        });

        // Initialize Kendo Grid with footer for Grand Total
        var gridConfig = {
            dataSource: {
                data: gridData,
                aggregate: aggregates
            },
            height: 400,
            width: "auto", // Set the grid width to 100% of its container
            sortable: false,
            scrollable: {
                virtual: false
            },
            resizable: true,
            filterable: true,
            columns: columns,
            toolbar: [
                {
                    name: "excel",
                    text: "Export to Excel",
                    className: "custom-excel-button"
                }
            ],
            excel: {
                fileName: "Knockoff MIS.xlsx",
                filterable: true,
                allPages: true
            }
        };

        // Initialize the grid
        $("#example").remove(); // Remove any existing grid
        $('#grid').append('<div id="example" style="position:relative;width:auto;" class="k-content"><table id="grid1" style="position:relative;width:100%;"></table></div>');

        var timeEditGrid = $("#grid1").kendoGrid(gridConfig).data("kendoGrid");
    }




    function loadGrid(data) {
        var columns = [];
        var rows = [];
        if (data) {
            for (var key in data[0]) {
                var field = key.replace(/\s+/g, '_');
                var propType = typeof data[0][key];
                var bool = false;
                var txtalign = "";
                var widthval = "";
                if (field == "forecolor" || field == "backcolor") {
                    bool = true;
                } if (field == "Row_Labels") {
                    txtalign = "left";
                    widthval = 250;
                } else {
                    txtalign = "right"
                    widthval: 100;
                }
                columns.push({
                    field: field,
                    title: key,
                    type: propType,
                    attributes: { style: "text-align:" + txtalign },
                    filterable: false,
                    hidden: bool,
                    width: widthval
                });
            }
            $.each(data, function (i, e) {
                var entryObject = {};
                for (var key in e) {
                    var field = key.replace(/\s+/g, '_');
                    entryObject[field] = e[key];
                }
                rows.push(entryObject);
            });

            var configuration = {
                dataSource: {
                    data: rows,
                },
                height: 400,
                navigatable: false,
                groupable: false,
                editable: false,
                sortable: false,
                scrollable: true,
                attributes: { style: "text-align: center;" },
                filterable: {
                    extra: true,
                    operators: {
                        string: {
                            contains: "Contains"
                        }
                    }
                },
                pageable: false,
                resizable: true,
                persistSelection: true,
                selectable: true,
                columns: columns,
                dataBound: function (e) {
                    var grid = this; // "this" refers to the Kendo Grid

                    grid.tbody.find("tr").each(function (index) {
                        var rowData = grid.dataItem(this); // Get the data item for the current row
                        $(this).css("background-color", rowData.backcolor);
                        $(this).css("color", rowData.forecolor);
                        //}
                    });
                }
            };

            $("#example").remove();
            $('#grid').append('<div id="example" style="position:relative;" class="k-content"><table id="grid1" style="position:relative;overflow:scroll;width:100%"></table></div>');
            var timeEditGrid = $("#grid1").kendoGrid(configuration).data("kendoGrid");
        } else {
            var emptydata = [{
                "Row Labels": "",
                "Dr Count": "",
                "Dr Value": "",
                "Cr Count": "",
                "Cr Value": "",
                "Total Count": "",
                "Total Value": "",
            }];
            for (var key in emptydata[0]) {
                var emptyfield = key.replace(/\s+/g, '_');
                columns.push({
                    field: emptyfield,
                    title: key,
                    attributes: { style: "text-align: left;" },
                    filterable: false,
                });
            }
            $.each(emptydata, function (i, e) {
                var entryObject = {};
                for (var key in e) {
                    var field = key.replace(/\s+/g, '_');
                    entryObject[field] = e[key];
                }
                rows.push(entryObject);
            });

            var configuration = {
                dataSource: {
                    data: rows,
                },
                height: 400,
                navigatable: false,
                groupable: false,
                editable: false,
                sortable: false,
                scrollable: true,
                attributes: { style: "text-align: center;" },
                filterable: {
                    extra: true,
                    operators: {
                        string: {
                            contains: "Contains"
                        }
                    }
                },
                pageable: false,
                resizable: true,
                persistSelection: true,
                selectable: true,
                columns: columns
            };

            $("#example").remove();
            $('#grid').append('<div id="example" style="position:relative;" class="k-content"><table id="grid1" style="position:relative;overflow:scroll;width:100%"></table></div>');
            var timeEditGrid = $("#grid1").kendoGrid(configuration).data("kendoGrid");
        }



    }

    function exportexcel() {
        var in_recon_code = $("#reconname").val();
        var in_tran_date = $("#period_from").val();
        var ts = in_tran_date.split("/");
        var pr = ts[2] + "-" + ts[1] + "-" + ts[0];
        var in_todate = $("#period_to").val();
        var ts1 = in_todate.split("/");
        var pr1 = ts[2] + "-" + ts1[1] + "-" + ts1[0];
        var user_code = sessionStorage.getItem("usrname");
        window.location.href = '@Url.Action("KOMISreport", "KnockOff")?in_period_from=' + pr + '&in_period_to=' + pr1 + '&in_recon_code=' + in_recon_code + '&user_code=' + user_code + '';

    }

    //Date Validation



    document.addEventListener('DOMContentLoaded', function () {
        const dateInput = document.getElementById('period_from');
        const dateInput1 = document.getElementById('period_to');
        dateInput.addEventListener('focusout', onFocusOut);
        dateInput1.addEventListener('focusout', onFocusOut);
    });


</script>