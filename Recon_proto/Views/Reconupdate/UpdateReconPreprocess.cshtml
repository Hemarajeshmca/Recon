@{
	ViewBag.title = "Recon PreProcess Update";
	Layout = "~/Views/Shared/_LayoutNew.cshtml";
}

<!Doctype html>
<html>
<head>
	<title></title>

	<style>
		.selectedRule {
			font-size: 13px;
			font-weight: 600;
			color: brown;
		}

		.nav-item.me-2.me-xl-50 {
			margin-right: 28rem !important;
		}

	</style>
</head>
<body class="hold-transition skin-blue sidebar-mini fixed">
	<div class="content-wrapper">
		<div class="container-xxl flex-grow-1 container-p-y">
			<div class="card-body" style="margin-top:-1%;height: 82%;">

				<div class="row" style="margin-top:-19px">
					<div class="col-sm-4" style="margin-bottom:5px;">
						<label for="" class="form-label">Base Recon Name&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
						<select id="cmbreconname" class="form-select form-control" onchange="gridlist()">
						</select>
					</div>
					<div class="col-sm-4">
						<button type="button" class="btn btn-sm btn-success me-2" onclick='newClone()' style="padding: 4px 25px;margin-top: 30px;"> Dataset Map</button>
					</div>
				</div>
				<div class="row">
					<div class="col-xs-12">
						<div id="gd_preprocesslist">
							<div id="grid_preprocesslist"> </div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal fade" id="infomodal" tabindex="-1" aria-hidden="true">
		<div class="modal-dialog modal-xl" role="document">
			<div class="modal-content">
				<div class="modal-header">
				</div>
				<div class="modal-body" style="margin-top: -26px;">
					<div class="row">
						<div class="col-sm-4">
						</div>
						<div class="col-sm-4">
							<h4 style="font-size: 15px;text-align: center;color: #1a9950;font-weight: 600;">Recon PreProcess Update</h4>
						</div>
						<div class="col-sm-4">
							<i class="bx bx-x cursor-pointer" data-bs-dismiss="modal" style="color: #000000;float:right"></i>
						</div>
					</div>
					<hr style="margin-top:-1px; width:100%;">
					<div class="container">
						<div class="row">
							<div class="selectedRule col-md-6" id="selected_preprocess_name"></div>
							<div class="selectedRule col-md-6" id="selected_recon_name"></div>

						</div>
						<div class="row" style="margin-top: 20px;">
							<div class="col-md-6">
								<label for="" class="form-label">Update Recon&nbsp;<span style="font-size: 12px;color: red;font-weight: bold;">*</span></label>
								@* <select id="cmbupdatereconname" class="form-select form-control" onchange="updatedatasetRecon()">
								</select> *@
								<input id="updatereconname" style="width:65%" />
								<input class="form-control" type="hidden" id="selectedPreprocess">
							</div>
						</div>
						<div class="row" style="margin-top:15px;">
							<div id="gd_mappeddataset">
								<div id="grid_mappeddataset"> </div>
							</div>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-sm-4"> </div>
					<div class="col-sm-4" style="margin-bottom:30px;float: right;">
						<center>
							<button type="button" class="btn btn-sm btn-success me-2" onclick="updateRecon()" style="padding: 4px 25px;"> Update</button>
							<button type="submit" class="btn btn-sm btn-success me-2" data-bs-dismiss="modal" style="background: red;border-color: red;width:27%" onclick="rr1()">Close</button>
						</center>
					</div>
					<div class="col-sm-4"> </div>
				</div>
			</div>
		</div>
	</div>


	<div class="modal" id="ReconPreprocessdetail">
		<div class="modal-dialog modal-xl">
			<div class="modal-content" style="height:585px;">
				<div class="modal-header">
				</div>
				<div class="modal-body" style="margin-top: -26px;">
					<div class="row">
						<div class="col-sm-4">
						</div>
						<div class="col-sm-4">
							<h4 style="font-size: 15px;text-align: center;color: #1a9950;font-weight: 600;">PreProcess Detail</h4>
						</div>
						<div class="col-sm-4">
							<i class="bx bx-x cursor-pointer" data-bs-dismiss="modal" style="color: #000000;float:right"></i>
						</div>
					</div>
					<hr style="margin-top:-1px; width:100%;">
					<div class="container" style="padding:0px !important;">
						@await Html.PartialAsync("_UpdatePreprocessdetail")
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal" id="addNewRuleClone">
		<div class="modal-dialog modal-xl">
			<div class="modal-content" style="height:585px;">
				<div class="modal-header">
				</div>
				<div class="modal-body" style="margin-top: -26px;">
					<div class="row">
						<div class="col-sm-4">
						</div>
						<div class="col-sm-4">
							<h4 style="font-size: 15px;text-align: center;color: #1a9950;font-weight: 600;">Dataset Map</h4>
						</div>
						<div class="col-sm-4">
							<i onclick="closeModel()" class="bx bx-x cursor-pointer" data-bs-dismiss="modal" style="color: #000000;float:right"></i>
						</div>
					</div>
					<hr style="margin-top:-1px; width:100%;">
					<div class="container" style="padding:0px !important;">
						@await Html.PartialAsync("_addNewRuleClone")
					</div>
				</div>
			</div>
		</div>
	</div>

</body>
</html>
<script type="text/javascript">
	var preprocessList = [];
	var reconarray = [];
	$(document).ready(function () {
		$("#navhead").text("Recon PreProcess Update");
		kendodate_format();
		grid_preprocesslist([]);
		gridreconlist();
	});

	function gridreconlist() {
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		data.in_user_code = sessionStorage.getItem("usrname");
		var Context = data;
		$.ajax({
			type: "POST",
			url: '../Recon/Reconlistfetch',
			dataType: 'json',
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				$("#cmbreconname").empty();
				$("#cmbreconname").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.active_status == "Y") {
						$("#cmbreconname").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					}
				});

				// target dataset
				$("#target_reconname").empty();
				$("#target_reconname").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.active_status == "Y") {
						$("#target_reconname").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					}
				});
				// selected Recon
				$("#selected_reconName").empty();
				$("#selected_reconName").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.active_status == "Y") {
						$("#selected_reconName").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					}
				});

				// update Recon
				$("#cmbupdatereconname").empty();
				$("#cmbupdatereconname").append($('<option>', {
					value: "",
					text: "  Select  "
				}));
				$.each(res, function (index, item) {
					if (item.active_status == "Y") {
						$("#cmbupdatereconname").append($('<option>', {
							value: item.recon_code,
							text: item.recon_name
						}));
					}
				});

				if (sessionStorage.getItem("reconcode") != null) {
					$("#cmbreconname").val(sessionStorage.getItem("reconcode"));
					jQuery('#cmbreconname').trigger("change");
				}
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}

		});
	}

	//function getSerializedRows() {
	//	btn_onClick('Create');
	//	document.location = "../Reports/ReportTempletedetail";
	//}

	function gridlist() {
		if ($("#cmbreconname").val() != '') {
			sessionStorage.setItem("reconcode", $("#cmbreconname").val());
			sessionStorage.setItem("reconname", $("#cmbreconname :selected").text());
			setcon();
		}
		var cmbreconname = $("#cmbreconname").val();
		var in_user_code = sessionStorage.getItem("usrname");
		var data = {};
		data.in_user_gid = 0;
		data.in_active_status = '';
		if (cmbreconname) {
			$.ajax({
				type: "POST",
				url: '../Preprocess/Preprocesslistfetch',
				dataType: 'json',
				contentType: 'application/json; charset=utf-8',
				data: JSON.stringify({ recon_code: cmbreconname, in_user_code: in_user_code }),
				success: function (response) {
					if (response != " " && response != null && response != "{}" && response != "[]") {
						var res = JSON.parse(response)
						$("#gd_preprocesslist").empty();
						$("#gd_preprocesslist").append("<div id='grid_preprocesslist'></div>");
						var activeItems = res.filter(item => item.active_status == 'Y');
						grid_preprocesslist(activeItems);
					}
					else {
						grid_preprocesslist([]);
					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		} else {
			grid_preprocesslist([]);
		}
	}

	function grid_preprocesslist(data) {
		try {
			$("#grid_preprocesslist").kendoGrid({
				dataSource: {
					data: data,
					pageSize: 15,
					schema: {
						model: {
							fields: {
								preprocess_gid: { type: "string" },
								preprocess_code: { type: "string" },
								preprocess_desc: { type: "string" },
								recon_name: { type: "string" },
								recon_code: { type: "string" },
								preprocess_order: { type: "number" },
								active_status: { type: "string" },
								active_status_desc: { type: "string" }
							}
						}
					}
				},
				height: 420,
				groupable: false,
				dataBound: function (e) {
					resultData = e.sender._data;
					var rows = $('#grid_preprocesslist').data('kendoGrid').tbody.children();
					setColor(rows, resultData);
				},
				pageable: {
					refresh: false,
					pageSizes: [10, 15, 20, 25, 50],
					buttonCount: 5
				},
				sortable: true,
				selectable: true,
				filterable: true,
				navigatable: true,
				change: selectRow,
				resizable: true,
				columns: [{
					command: [
						{
							name: "edit",
							id: "btn_Edit",
							template: "<a href='' onclick='getSerializedSelectedRows(this)' class='k-grid-process' value='edit' data-bs-toggle='modal'><img style='height: 16px;width: 16px; cursor: pointer;' src = '../Assets/images/login-refresh.png' title='Update'></a>&nbsp;&nbsp;&nbsp;",
						},
						{
							name: "view",
							id: "View",
							template: "<a href=''onclick='getSerializedSelectedRows(this)' class='k-grid-view' value='view' data-bs-toggle='modal'><img title='View' style='cursor: pointer;' src = '../Assets/images/viewicons.png'></a>&nbsp;&nbsp;&nbsp;",
						},
					],
					title: "Action&nbsp;",
					width: "40px",
					attributes: { style: "text-align: center;" },
				},
				{
					field: "preprocess_gid",
					title: "Row id",
					width: 100,
					hidden: true,
				},
				{
					field: "preprocess_order",
					title: "Preprocess Order",
					width: 50,
					attributes: { style: "text-align: right;" },
					filterable: {
						ui: "numeric",
						extra: false,
					},
				},
				{
					field: "preprocess_code",
					title: "Preprocess Code",
					width: 50,
				},
				{
					field: "preprocess_desc",
					title: "Preprocess Name",
					width: 130,
				},
				{
					field: "hold_flag_desc",
					title: "Hold Flag",
					width: 40,
					hidden: true,
				},
				{
					field: "hold_flag",
					title: "hold_flag",
					width: 40,
					hidden: true,
				},
				{
					field: "recon_name",
					title: "Recon",
					width: 100,
					hidden: true,
				},
				{
					field: "active_status",
					title: "Status",
					width: 100,
					hidden: true
				},
				{
					field: "active_status_desc",
					title: "Status",
					width: 80,
					resizable: false,
					filterable: {
						ui: priorityFilter,
						extra: false,
						operators: {
							string: {
								eq: "Is equal to",
								neq: "Not equal to"
							}
						},
					},
				},
				{
					field: "In_mode_flag",
					title: "Mode",
					hidden: true
				}],
				editable: false,

			});
		}
		catch (err) {
			console.log(err)

		}
	}

	function selectRow() {
		try {
			var grid = $("#grid_preprocesslist").data("kendoGrid");
			var selectedItem = grid.dataItem(grid.select());
			$("#selectedPreprocess").val(selectedItem.preprocess_code);
		}
		catch (err) {

		}
	}

	function priorityFilter(element) {
		element.kendoDropDownList({
			dataSource: status_Priority,
			optionLabel: "--Select Value--"
		});
	}

	function viewPreprocessDetails() {
		if ($("#updatepreprocessname").val()) {
			event.preventDefault();
			var selectedItem = preprocessList.filter(item => item.preprocess_code == $("#updatepreprocessname").val());
			setlocalStorage("preprocess_details", selectedItem[0]);
			btn_onClick('Edit');
			getGridCombopreprocessList();
			$("#ReconPreprocessdetail").on("click", function (event) {
				event.stopPropagation();
			});
			$("#ReconPreprocessdetail").modal('show');
		} else {
			$.alert({
				title: 'Recon',
				content: "Please Select Updated Preprocess .!",
				type: 'green',
			});
		}

	}

	function getSerializedSelectedRows(mode) {
		try {
			var grid = $("#grid_preprocesslist").data("kendoGrid");
			var selectedItem = grid.dataItem(grid.select());
			$('#selected_preprocess_name').text('Selected PreProcess :' + selectedItem.preprocess_desc);
			$('#selected_recon_name').text('Selected Recon:' + selectedItem.recon_name);
			if ($(mode).attr('value') == "edit") {
				clearCheckboxes();
				getupdatePreProcessList();
				getdatasetagainstrecon();
				$("#updatereconname").val("");
				$("#updatepreprocessname").val("");
				$("#infomodal").modal("show");
			} else if ($(mode).attr('value') == "view") {
				event.preventDefault();
				var grid = $("#grid_preprocesslist").data("kendoGrid");
				var selectedItem = grid.dataItem(grid.select());
				setlocalStorage("preprocess_details", selectedItem);
				btn_onClick('Edit');
				getGridCombopreprocessList();
				$("#ReconPreprocessdetail").on("click", function (event) {
					event.stopPropagation();
				});
				$("#ReconPreprocessdetail").modal('show');
			}
		}
		catch (err) {

		}
	}

	function rr1() {
		$("#updatereconname").val("");
		$("#updatepreprocessname").val("");
		$("#selectedPreprocess").val("");
		$("#infomodal").modal("hide");
	}

	function updateRecon() {
		var grid = $("#grid_preprocesslist").data("kendoGrid");
		var selectedItem = grid.dataItem(grid.select());
		var Attribid = [];
		var arrstring = "";
		var cbs = document.getElementsByName("cb");
		for (var i = 0; i < cbs.length; i++) {
			if (cbs[i].checked) {
				var item = cbs[i].value;
				Attribid.push(item);
			}
		}
		arrString = Attribid.join("$");
		if (arrString == "") {
			$.alert({
				title: 'Recon',
				content: "Recon name should not be Empty",
				type: 'red',
			});
			return;
		}
		var data = {};
		data.in_base_recon_code = $("#cmbreconname").val();
		data.in_base_preprocess_code = $("#selectedPreprocess").val();
		data.in_update_recon_code = "$" + arrString;
		data.in_update_preprocess_code = selectedItem.preprocess_desc;
		data.in_user_code = sessionStorage.getItem("usrname");
		if (arrString != "" && data.in_update_preprocess_code) {
			$.ajax({
				type: "POST",
				url: '../Reconupdate/ReconUpdatePreprocess',
				dataType: 'json',
				contentType: 'application/json; charset=utf-8',
				data: JSON.stringify(data),
				success: function (response) {
					if (response != " " && response != null && response != "{}" && response != "[]") {
						var res = JSON.parse(response);
						if (res[0]["out_result"] == 1) {
							$.alert({
								title: 'Recon',
								content: res[0]["out_msg"],
								type: 'green',
							});
							rr1();
						} else {
							$.alert({
								title: 'Recon',
								content: res[0]["out_msg"],
								type: 'red',
							});
						}
					} else {

					}
				},
				error: function (er) {
					alert(er)
					console.log(er)
				}
			});
		} else if (arrString == "") {
			$.alert({
				title: 'Recon',
				content: "Please Select Update Recon .!",
				type: 'red',
			});

		} else if (!data.in_update_preprocess_code) {
			$.alert({
				title: 'Recon',
				content: "Please Select Update PreProcess .!",
				type: 'red',
			});
		}
	}

	function clearCheckboxes() {
		var checkboxes = document.getElementsByName("cb");
		// Iterate through the NodeList and uncheck each checkbox
		for (var i = 0; i < checkboxes.length; i++) {
			checkboxes[i].checked = false; // Uncheck the checkbox
		}
	}

	function getupdatePreProcessList() {
		var grid = $("#grid_preprocesslist").data("kendoGrid");
		var selectedItem = grid.dataItem(grid.select());
		var data = {};
		data.in_preprocess_name = selectedItem.preprocess_desc;
		$.ajax({
			type: "POST",
			url: '../Reconupdate/ReconagainstPreProcess',
			dataType: 'json',
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				reconarray = res;
				var arr = [];
				var list2 = {};
				list2.value = "";
				list2.text = "ALL";
				arr.push(list2);
				for (i = 0; res.length > i; i++) {
					var list1 = {};
					if (res[i]["active_status"] == 'Y') {
						list1.value = res[i].recon_code;
						list1.text = res[i].recon_name;
						arr.push(list1);
					}
				}
				dropdown = $("#updatereconname").kendoDropDownList({
					dataTextField: "text",
					dataValueField: "value",
					template: $("#CheckboxTemplate").html(),
					dataSource: arr,
					placeholder: "Select...",
					select: function (e) {
						e.preventDefault();
					}
				}).data("kendoDropDownList");

				dropdown.list.find(".check-input,.check-item").bind("click", function (e) {
					var $item = $(this);
					var $input;

					if ($item.hasClass("check-item")) {
						// Text was clicked
						$input = $item.children(".check-input");
						$input.prop("checked", !$input.is(':checked'));
					}
					else
						// Checkbox was clicked
						$input = $item;

					// Check all clicked?
					if ($input.val() == "")
						dropdown.list.find(".check-input").prop("checked", $input.is(':checked'));

					updateDropDown()

					e.stopImmediatePropagation();
				});

				updateDropDown();
			},
			error: function (er) {
				alert(er)
				console.log(er)
			}
		});
	}

	function updateDropDown() {
		var items = [];
		dropdown.list.find(".check-input").each(function () {
			var $input = $(this);
			if ($input.val() != "" && $input.is(':checked'))
				items.push($input.next().text());
		});
		dropdown.text(items.toString());
	}

	function newClone() {
		if ($("#cmbreconname").val()) {
			getdatasetagainstrecon();
			$("#selected_reconName").val(sessionStorage.getItem("reconcode"));
			jQuery('#selected_reconName').trigger("change");
			$("#addNewRuleClone").modal('show');
		} else {
			$.alert({
				title: 'Recon',
				content: 'Please Select Recon ..!',
				type: 'red',
			});
		}
	}

	function getdatasetagainstrecon() {
		var reconcode = $("#cmbreconname").val();
		var target_recon_code = $("#target_reconname").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Reconupdate/datasetlistmapped',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_target_recon_code: target_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				var result = res.filter(item => item.dataset_type != 'S');
				griddataset(result);
			}
		});
	}


	function griddataset(data) {
		var source_field_desc_list = "";
		var extraction_criteria_list = "";
		var comparison_criteria_list = "";
		$("#grid_dataset").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				schema: {
					model: {
						fields: {
							dataset_code: { type: "string", editable: false },
							dataset_name: { type: "string", editable: false },
							dataset_type: { type: "string", editable: false },
							dataset_type_desc: { type: "string", editable: false },
							parent_dataset_code: { type: "string", editable: false },
							parent_dataset_name: { type: "string", editable: false },
							comparison_field_desc: { type: "string", defaultValue: "", editable: true },
							comparison_field: { type: "string", editable: false },
						}
					}
				}
			},
			height: 300,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_dataset').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
			},
			pageable: {
				refresh: false,
				pageSizes: [5, 10, 15, 20],
				buttonCount: 5
			},
			sortable: true,
			selectable: true,
			filterable: true,
			navigatable: true,
			resizable: true,
			columns: [
				{
					field: "dataset_code",
					title: "Dataset Code",
					width: 40,
					editable: false,
					hidden: true,
				},
				{
					field: "dataset_name",
					title: "Source Dataset",
					width: 80,
					editable: false,
				},
				{
					field: "dataset_type_desc",
					title: "Dataset Type",
					width: 45,
					editable: false,
				},
				{
					field: "parent_dataset_code",
					title: "parent_dataset_code",
					width: 50,
					editable: false,
					hidden: true,
				},
				{
					field: "parent_dataset_name",
					title: "Source Parent Datset",
					width: 60,
					editable: false,
					hidden: true,
				},
				{
					field: "comparison_field",
					title: "comparison_field",
					width: 100,
					hidden: true,
					editable: false,
				},
				{
					field: "comparison_field_desc",
					title: "Target Dataset",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "grid_dataset")
					},
					width: 80,
					editable: true,
				}, {
					field: "dataset_type_desc",
					title: "Target Dataset Type",
					width: 45,
					editable: false,
				}],
			editable: true,
		});
		var target_recon_code = $("#target_reconname").val();
		comparison_field_desc_list = getdatasetlist(target_recon_code);
	}

	function getdatasetlist(recon_code) {
		var arr1 = [];
		var data = {};
		data.in_recon_code = recon_code;
		data.in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Datasetfile/datasetAgainstRecon',
			dataType: 'json',
			async: false,
			data: JSON.stringify(data),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				if (response.length > 0) {
					for (i = 0; response.length > i; i++) {
						var list1 = {};
						list1.code = response[i].dataset_code;
						list1.desc = response[i].dataset_name;
						arr1.push(list1);
					}
				}
			}
		});
		return arr1;
	}

	function closeModel() {
		$("#addNewRuleClone").modal('hide');
		$("#target_reconname").val("");
	}

	function updatedatasetRecon() {
		var reconcode = $("#cmbreconname").val();
		var target_recon_code = $("#cmbupdatereconname").val();
		var in_user_code = sessionStorage.getItem("usrname");
		$.ajax({
			type: "POST",
			url: '../Reconupdate/datasetlistmapped',
			dataType: 'json',
			async: false,
			data: JSON.stringify({ in_recon_code: reconcode, in_target_recon_code: target_recon_code }),
			contentType: 'application/json; charset=utf-8',
			success: function (response) {
				var res = JSON.parse(response);
				var result = res.filter(item => item.dataset_type != 'S');
				updategriddataset(result);
			}
		});
	}

	function updategriddataset(data) {
		var source_field_desc_list = "";
		var extraction_criteria_list = "";
		var comparison_criteria_list = "";
		$("#grid_mappeddataset").kendoGrid({
			dataSource: {
				data: data,
				pageSize: 5,
				schema: {
					model: {
						fields: {
							dataset_code: { type: "string", editable: false },
							dataset_name: { type: "string", editable: false },
							dataset_type: { type: "string", editable: false },
							dataset_type_desc: { type: "string", editable: false },
							parent_dataset_code: { type: "string", editable: false },
							parent_dataset_name: { type: "string", editable: false },
							comparison_field_desc: { type: "string", defaultValue: "", editable: false },
							comparison_field: { type: "string", editable: false },
						}
					}
				}
			},
			height: 300,
			groupable: false,
			dataBound: function (e) {
				resultData = e.sender._data;
				var rows = $('#grid_dataset').data('kendoGrid').tbody.children();
				setColor(rows, resultData);
			},
			pageable: {
				refresh: false,
				pageSizes: [5, 10, 15, 20],
				buttonCount: 5
			},
			sortable: true,
			selectable: true,
			filterable: true,
			navigatable: true,
			resizable: true,
			columns: [
				{
					field: "dataset_code",
					title: "Dataset Code",
					width: 40,
					editable: false,
					hidden: true,
				},
				{
					field: "dataset_name",
					title: "Source Dataset",
					width: 80,
					editable: false,
				},
				{
					field: "dataset_type_desc",
					title: "Dataset Type",
					width: 45,
					editable: false,
				},
				{
					field: "parent_dataset_code",
					title: "parent_dataset_code",
					width: 50,
					editable: false,
					hidden: true,
				},
				{
					field: "parent_dataset_name",
					title: "Source Parent Datset",
					width: 60,
					editable: false,
					hidden: true,
				},
				{
					field: "comparison_field",
					title: "comparison_field",
					width: 100,
					hidden: true,
					editable: false,
				},
				{
					field: "comparison_field_desc",
					title: "Target Dataset",
					editor: function (container, options) {
						combo_editor_man(container, "cmb_" + options.field, eval(options.field + "_list"), options.field, "comparison_field", "gd_mappeddataset")
					},
					width: 80,
					editable: false,
				}, {
					field: "dataset_type_desc",
					title: "Target Dataset Type",
					width: 45,
					editable: false,
				}],
			editable: false,
		});
		//var update_recon_code = $("#cmbupdatereconname").val();
		//comparison_field_desc_list = getdatasetlist(update_recon_code);
	}
</script>

<script type="text/x-kendo-template" id="CheckboxTemplate">
	<li unselectable="on" class="k-item nowrap check-item">
		<input type="checkbox"  name="cb" value="#= value #" class="check-input"  />
		<span >#= text #</span>
	</li>
</script>

